
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003000  08003000  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003000  08003000  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000068  08003070  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003070  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098aa  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c10  00000000  00000000  0002993b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd4  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfd6  00000000  00000000  000436a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fbb  00000000  00000000  0004f67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000d1688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fc8 	.word	0x08002fc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002fc8 	.word	0x08002fc8

0800014c <display7SEG>:
 *  Created on: Nov 5, 2022
 *      Author: Hong Phat
 */
#include "7segment.h"

 void display7SEG(int counter){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

 	  	  if(counter == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d122      	bne.n	80001a0 <display7SEG+0x54>
 	  		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2101      	movs	r1, #1
 800015e:	48bd      	ldr	r0, [pc, #756]	; (8000454 <display7SEG+0x308>)
 8000160:	f001 ff09 	bl	8001f76 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2102      	movs	r1, #2
 8000168:	48ba      	ldr	r0, [pc, #744]	; (8000454 <display7SEG+0x308>)
 800016a:	f001 ff04 	bl	8001f76 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2104      	movs	r1, #4
 8000172:	48b8      	ldr	r0, [pc, #736]	; (8000454 <display7SEG+0x308>)
 8000174:	f001 feff 	bl	8001f76 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48b5      	ldr	r0, [pc, #724]	; (8000454 <display7SEG+0x308>)
 800017e:	f001 fefa 	bl	8001f76 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	48b3      	ldr	r0, [pc, #716]	; (8000454 <display7SEG+0x308>)
 8000188:	f001 fef5 	bl	8001f76 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2120      	movs	r1, #32
 8000190:	48b0      	ldr	r0, [pc, #704]	; (8000454 <display7SEG+0x308>)
 8000192:	f001 fef0 	bl	8001f76 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	48ae      	ldr	r0, [pc, #696]	; (8000454 <display7SEG+0x308>)
 800019c:	f001 feeb 	bl	8001f76 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==1){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d122      	bne.n	80001ec <display7SEG+0xa0>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2102      	movs	r1, #2
 80001aa:	48aa      	ldr	r0, [pc, #680]	; (8000454 <display7SEG+0x308>)
 80001ac:	f001 fee3 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2104      	movs	r1, #4
 80001b4:	48a7      	ldr	r0, [pc, #668]	; (8000454 <display7SEG+0x308>)
 80001b6:	f001 fede 	bl	8001f76 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2101      	movs	r1, #1
 80001be:	48a5      	ldr	r0, [pc, #660]	; (8000454 <display7SEG+0x308>)
 80001c0:	f001 fed9 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2108      	movs	r1, #8
 80001c8:	48a2      	ldr	r0, [pc, #648]	; (8000454 <display7SEG+0x308>)
 80001ca:	f001 fed4 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	48a0      	ldr	r0, [pc, #640]	; (8000454 <display7SEG+0x308>)
 80001d4:	f001 fecf 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	489d      	ldr	r0, [pc, #628]	; (8000454 <display7SEG+0x308>)
 80001de:	f001 feca 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	489b      	ldr	r0, [pc, #620]	; (8000454 <display7SEG+0x308>)
 80001e8:	f001 fec5 	bl	8001f76 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==2){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d122      	bne.n	8000238 <display7SEG+0xec>
 	 		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4897      	ldr	r0, [pc, #604]	; (8000454 <display7SEG+0x308>)
 80001f8:	f001 febd 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	4894      	ldr	r0, [pc, #592]	; (8000454 <display7SEG+0x308>)
 8000202:	f001 feb8 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2108      	movs	r1, #8
 800020a:	4892      	ldr	r0, [pc, #584]	; (8000454 <display7SEG+0x308>)
 800020c:	f001 feb3 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	488f      	ldr	r0, [pc, #572]	; (8000454 <display7SEG+0x308>)
 8000216:	f001 feae 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	488d      	ldr	r0, [pc, #564]	; (8000454 <display7SEG+0x308>)
 8000220:	f001 fea9 	bl	8001f76 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2104      	movs	r1, #4
 8000228:	488a      	ldr	r0, [pc, #552]	; (8000454 <display7SEG+0x308>)
 800022a:	f001 fea4 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800022e:	2201      	movs	r2, #1
 8000230:	2120      	movs	r1, #32
 8000232:	4888      	ldr	r0, [pc, #544]	; (8000454 <display7SEG+0x308>)
 8000234:	f001 fe9f 	bl	8001f76 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==3){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d122      	bne.n	8000284 <display7SEG+0x138>
 	 		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2101      	movs	r1, #1
 8000242:	4884      	ldr	r0, [pc, #528]	; (8000454 <display7SEG+0x308>)
 8000244:	f001 fe97 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2102      	movs	r1, #2
 800024c:	4881      	ldr	r0, [pc, #516]	; (8000454 <display7SEG+0x308>)
 800024e:	f001 fe92 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2104      	movs	r1, #4
 8000256:	487f      	ldr	r0, [pc, #508]	; (8000454 <display7SEG+0x308>)
 8000258:	f001 fe8d 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	487c      	ldr	r0, [pc, #496]	; (8000454 <display7SEG+0x308>)
 8000262:	f001 fe88 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	487a      	ldr	r0, [pc, #488]	; (8000454 <display7SEG+0x308>)
 800026c:	f001 fe83 	bl	8001f76 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2110      	movs	r1, #16
 8000274:	4877      	ldr	r0, [pc, #476]	; (8000454 <display7SEG+0x308>)
 8000276:	f001 fe7e 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2120      	movs	r1, #32
 800027e:	4875      	ldr	r0, [pc, #468]	; (8000454 <display7SEG+0x308>)
 8000280:	f001 fe79 	bl	8001f76 <HAL_GPIO_WritePin>

 	 	  }
 	 	 if(counter==4){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b04      	cmp	r3, #4
 8000288:	d122      	bne.n	80002d0 <display7SEG+0x184>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	4871      	ldr	r0, [pc, #452]	; (8000454 <display7SEG+0x308>)
 8000290:	f001 fe71 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2104      	movs	r1, #4
 8000298:	486e      	ldr	r0, [pc, #440]	; (8000454 <display7SEG+0x308>)
 800029a:	f001 fe6c 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	486c      	ldr	r0, [pc, #432]	; (8000454 <display7SEG+0x308>)
 80002a4:	f001 fe67 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2140      	movs	r1, #64	; 0x40
 80002ac:	4869      	ldr	r0, [pc, #420]	; (8000454 <display7SEG+0x308>)
 80002ae:	f001 fe62 	bl	8001f76 <HAL_GPIO_WritePin>

 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2101      	movs	r1, #1
 80002b6:	4867      	ldr	r0, [pc, #412]	; (8000454 <display7SEG+0x308>)
 80002b8:	f001 fe5d 	bl	8001f76 <HAL_GPIO_WritePin>
 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2108      	movs	r1, #8
 80002c0:	4864      	ldr	r0, [pc, #400]	; (8000454 <display7SEG+0x308>)
 80002c2:	f001 fe58 	bl	8001f76 <HAL_GPIO_WritePin>
 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2110      	movs	r1, #16
 80002ca:	4862      	ldr	r0, [pc, #392]	; (8000454 <display7SEG+0x308>)
 80002cc:	f001 fe53 	bl	8001f76 <HAL_GPIO_WritePin>
 	 	 	  }
 	 	 if(counter==5){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d122      	bne.n	800031c <display7SEG+0x1d0>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2101      	movs	r1, #1
 80002da:	485e      	ldr	r0, [pc, #376]	; (8000454 <display7SEG+0x308>)
 80002dc:	f001 fe4b 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2104      	movs	r1, #4
 80002e4:	485b      	ldr	r0, [pc, #364]	; (8000454 <display7SEG+0x308>)
 80002e6:	f001 fe46 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2108      	movs	r1, #8
 80002ee:	4859      	ldr	r0, [pc, #356]	; (8000454 <display7SEG+0x308>)
 80002f0:	f001 fe41 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2120      	movs	r1, #32
 80002f8:	4856      	ldr	r0, [pc, #344]	; (8000454 <display7SEG+0x308>)
 80002fa:	f001 fe3c 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	4854      	ldr	r0, [pc, #336]	; (8000454 <display7SEG+0x308>)
 8000304:	f001 fe37 	bl	8001f76 <HAL_GPIO_WritePin>

 	 			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2102      	movs	r1, #2
 800030c:	4851      	ldr	r0, [pc, #324]	; (8000454 <display7SEG+0x308>)
 800030e:	f001 fe32 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	484f      	ldr	r0, [pc, #316]	; (8000454 <display7SEG+0x308>)
 8000318:	f001 fe2d 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==6){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b06      	cmp	r3, #6
 8000320:	d122      	bne.n	8000368 <display7SEG+0x21c>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2101      	movs	r1, #1
 8000326:	484b      	ldr	r0, [pc, #300]	; (8000454 <display7SEG+0x308>)
 8000328:	f001 fe25 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	4848      	ldr	r0, [pc, #288]	; (8000454 <display7SEG+0x308>)
 8000332:	f001 fe20 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2108      	movs	r1, #8
 800033a:	4846      	ldr	r0, [pc, #280]	; (8000454 <display7SEG+0x308>)
 800033c:	f001 fe1b 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2110      	movs	r1, #16
 8000344:	4843      	ldr	r0, [pc, #268]	; (8000454 <display7SEG+0x308>)
 8000346:	f001 fe16 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	4841      	ldr	r0, [pc, #260]	; (8000454 <display7SEG+0x308>)
 8000350:	f001 fe11 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	483e      	ldr	r0, [pc, #248]	; (8000454 <display7SEG+0x308>)
 800035a:	f001 fe0c 	bl	8001f76 <HAL_GPIO_WritePin>

 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2102      	movs	r1, #2
 8000362:	483c      	ldr	r0, [pc, #240]	; (8000454 <display7SEG+0x308>)
 8000364:	f001 fe07 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==7){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d122      	bne.n	80003b4 <display7SEG+0x268>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4838      	ldr	r0, [pc, #224]	; (8000454 <display7SEG+0x308>)
 8000374:	f001 fdff 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	4835      	ldr	r0, [pc, #212]	; (8000454 <display7SEG+0x308>)
 800037e:	f001 fdfa 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2104      	movs	r1, #4
 8000386:	4833      	ldr	r0, [pc, #204]	; (8000454 <display7SEG+0x308>)
 8000388:	f001 fdf5 	bl	8001f76 <HAL_GPIO_WritePin>


 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4830      	ldr	r0, [pc, #192]	; (8000454 <display7SEG+0x308>)
 8000392:	f001 fdf0 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2110      	movs	r1, #16
 800039a:	482e      	ldr	r0, [pc, #184]	; (8000454 <display7SEG+0x308>)
 800039c:	f001 fdeb 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	482b      	ldr	r0, [pc, #172]	; (8000454 <display7SEG+0x308>)
 80003a6:	f001 fde6 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2140      	movs	r1, #64	; 0x40
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <display7SEG+0x308>)
 80003b0:	f001 fde1 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter == 8){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b08      	cmp	r3, #8
 80003b8:	d122      	bne.n	8000400 <display7SEG+0x2b4>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	4825      	ldr	r0, [pc, #148]	; (8000454 <display7SEG+0x308>)
 80003c0:	f001 fdd9 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4822      	ldr	r0, [pc, #136]	; (8000454 <display7SEG+0x308>)
 80003ca:	f001 fdd4 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2104      	movs	r1, #4
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <display7SEG+0x308>)
 80003d4:	f001 fdcf 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <display7SEG+0x308>)
 80003de:	f001 fdca 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2110      	movs	r1, #16
 80003e6:	481b      	ldr	r0, [pc, #108]	; (8000454 <display7SEG+0x308>)
 80003e8:	f001 fdc5 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <display7SEG+0x308>)
 80003f2:	f001 fdc0 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <display7SEG+0x308>)
 80003fc:	f001 fdbb 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==9){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d122      	bne.n	800044c <display7SEG+0x300>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	4812      	ldr	r0, [pc, #72]	; (8000454 <display7SEG+0x308>)
 800040c:	f001 fdb3 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	480f      	ldr	r0, [pc, #60]	; (8000454 <display7SEG+0x308>)
 8000416:	f001 fdae 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <display7SEG+0x308>)
 8000420:	f001 fda9 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <display7SEG+0x308>)
 800042a:	f001 fda4 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <display7SEG+0x308>)
 8000434:	f001 fd9f 	bl	8001f76 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <display7SEG+0x308>)
 800043e:	f001 fd9a 	bl	8001f76 <HAL_GPIO_WritePin>

 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2110      	movs	r1, #16
 8000446:	4803      	ldr	r0, [pc, #12]	; (8000454 <display7SEG+0x308>)
 8000448:	f001 fd95 	bl	8001f76 <HAL_GPIO_WritePin>
 	 		   }
   }
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40010c00 	.word	0x40010c00

08000458 <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;


int isButton1Pressed(){
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <isButton1Pressed+0x20>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d104      	bne.n	800046e <isButton1Pressed+0x16>
		button1_flag = 0;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <isButton1Pressed+0x20>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
		return 1;
 800046a:	2301      	movs	r3, #1
 800046c:	e000      	b.n	8000470 <isButton1Pressed+0x18>
	}
	return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000084 	.word	0x20000084

0800047c <isButton2Pressed>:
int isButton2Pressed(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <isButton2Pressed+0x20>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d104      	bne.n	8000492 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <isButton2Pressed+0x20>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		return 1;
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <isButton2Pressed+0x18>
	}
	return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000088 	.word	0x20000088

080004a0 <isButton3Pressed>:
int isButton3Pressed(){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <isButton3Pressed+0x20>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d104      	bne.n	80004b6 <isButton3Pressed+0x16>
		button3_flag = 0;
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <isButton3Pressed+0x20>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
		return 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <isButton3Pressed+0x18>
	}
	return 0;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	2000008c 	.word	0x2000008c

080004c4 <subKeyProcess>:
void subKeyProcess(int i){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	//TODO
	if(i==0){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d103      	bne.n	80004da <subKeyProcess+0x16>
	button1_flag = 1;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <subKeyProcess+0x3c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	601a      	str	r2, [r3, #0]
		button2_flag = 1;
	}
	else if(i == 2){
		button3_flag = 1;
	}
}
 80004d8:	e00c      	b.n	80004f4 <subKeyProcess+0x30>
	else if(i==1){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d103      	bne.n	80004e8 <subKeyProcess+0x24>
		button2_flag = 1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <subKeyProcess+0x40>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	e005      	b.n	80004f4 <subKeyProcess+0x30>
	else if(i == 2){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d102      	bne.n	80004f4 <subKeyProcess+0x30>
		button3_flag = 1;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <subKeyProcess+0x44>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000084 	.word	0x20000084
 8000504:	20000088 	.word	0x20000088
 8000508:	2000008c 	.word	0x2000008c

0800050c <getKeyInput>:

void getKeyInput(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  for(int i=0;i<3;i++){
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e07f      	b.n	8000618 <getKeyInput+0x10c>
	  KeyReg0[i] = KeyReg1[i];
 8000518:	4a44      	ldr	r2, [pc, #272]	; (800062c <getKeyInput+0x120>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000520:	4943      	ldr	r1, [pc, #268]	; (8000630 <getKeyInput+0x124>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 8000528:	4a42      	ldr	r2, [pc, #264]	; (8000634 <getKeyInput+0x128>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000530:	493e      	ldr	r1, [pc, #248]	; (800062c <getKeyInput+0x120>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  if( i== 0){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10a      	bne.n	8000554 <getKeyInput+0x48>
	  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	483d      	ldr	r0, [pc, #244]	; (8000638 <getKeyInput+0x12c>)
 8000542:	f001 fd01 	bl	8001f48 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	4619      	mov	r1, r3
 800054a:	4a3a      	ldr	r2, [pc, #232]	; (8000634 <getKeyInput+0x128>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000552:	e01c      	b.n	800058e <getKeyInput+0x82>
	  }
	  else if(i==1){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10b      	bne.n	8000572 <getKeyInput+0x66>
		  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4836      	ldr	r0, [pc, #216]	; (8000638 <getKeyInput+0x12c>)
 8000560:	f001 fcf2 	bl	8001f48 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	4a32      	ldr	r2, [pc, #200]	; (8000634 <getKeyInput+0x128>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000570:	e00d      	b.n	800058e <getKeyInput+0x82>
	  }
	  else if(i==2){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d10a      	bne.n	800058e <getKeyInput+0x82>
		  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	482e      	ldr	r0, [pc, #184]	; (8000638 <getKeyInput+0x12c>)
 800057e:	f001 fce3 	bl	8001f48 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	4619      	mov	r1, r3
 8000586:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <getKeyInput+0x128>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800058e:	4a27      	ldr	r2, [pc, #156]	; (800062c <getKeyInput+0x120>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000596:	4926      	ldr	r1, [pc, #152]	; (8000630 <getKeyInput+0x124>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d137      	bne.n	8000612 <getKeyInput+0x106>
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <getKeyInput+0x120>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005aa:	4922      	ldr	r1, [pc, #136]	; (8000634 <getKeyInput+0x128>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d12d      	bne.n	8000612 <getKeyInput+0x106>
		  if (KeyReg2[i] != KeyReg3[i]){
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <getKeyInput+0x128>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005be:	491f      	ldr	r1, [pc, #124]	; (800063c <getKeyInput+0x130>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d015      	beq.n	80005f6 <getKeyInput+0xea>
			  KeyReg3[i] = KeyReg2[i];
 80005ca:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <getKeyInput+0x128>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d2:	491a      	ldr	r1, [pc, #104]	; (800063c <getKeyInput+0x130>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <getKeyInput+0x128>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d115      	bne.n	8000612 <getKeyInput+0x106>
				TimeOutForKeyPress = 3000;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <getKeyInput+0x134>)
 80005e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005ec:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ff68 	bl	80004c4 <subKeyProcess>
 80005f4:	e00d      	b.n	8000612 <getKeyInput+0x106>
			  }
		}else{
		   TimeOutForKeyPress --;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <getKeyInput+0x134>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <getKeyInput+0x134>)
 80005fe:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0){
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <getKeyInput+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d104      	bne.n	8000612 <getKeyInput+0x106>
			  KeyReg3[i] = NORMAL_STATE;
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <getKeyInput+0x130>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2101      	movs	r1, #1
 800060e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<3;i++){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b02      	cmp	r3, #2
 800061c:	f77f af7c 	ble.w	8000518 <getKeyInput+0xc>
			}
		}
	  }
	}
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000000 	.word	0x20000000
 8000634:	20000018 	.word	0x20000018
 8000638:	40010c00 	.word	0x40010c00
 800063c:	20000024 	.word	0x20000024
 8000640:	20000030 	.word	0x20000030

08000644 <display>:
 */
#include "display.h"
// Use four 7segment (led1, led2, led3, led4) to display the time of road 1 when mode is normal
// Use two 7segment (led1, led2) to display time duration value
// Use two 7segment (led3, led4) to display the mode
void display(int led){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3b01      	subs	r3, #1
 8000650:	2b03      	cmp	r3, #3
 8000652:	f200 831c 	bhi.w	8000c8e <display+0x64a>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <display+0x18>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	0800066d 	.word	0x0800066d
 8000660:	080007cb 	.word	0x080007cb
 8000664:	0800094f 	.word	0x0800094f
 8000668:	08000abb 	.word	0x08000abb
		switch(led){
		case 1:
			switch (status){
 800066c:	4bca      	ldr	r3, [pc, #808]	; (8000998 <display+0x354>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	3b01      	subs	r3, #1
 8000672:	2b0d      	cmp	r3, #13
 8000674:	f200 80a7 	bhi.w	80007c6 <display+0x182>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <display+0x3c>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006b9 	.word	0x080006b9
 8000684:	080006fd 	.word	0x080006fd
 8000688:	08000741 	.word	0x08000741
 800068c:	080007c7 	.word	0x080007c7
 8000690:	080007c7 	.word	0x080007c7
 8000694:	080007c7 	.word	0x080007c7
 8000698:	080007c7 	.word	0x080007c7
 800069c:	080007c7 	.word	0x080007c7
 80006a0:	080007c7 	.word	0x080007c7
 80006a4:	080007c7 	.word	0x080007c7
 80006a8:	080007c7 	.word	0x080007c7
 80006ac:	08000785 	.word	0x08000785
 80006b0:	08000785 	.word	0x08000785
 80006b4:	08000785 	.word	0x08000785
				// when mode is normal, use led1 to display time of road 1
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	48b7      	ldr	r0, [pc, #732]	; (800099c <display+0x358>)
 80006be:	f001 fc5a 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c8:	48b4      	ldr	r0, [pc, #720]	; (800099c <display+0x358>)
 80006ca:	f001 fc54 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d4:	48b1      	ldr	r0, [pc, #708]	; (800099c <display+0x358>)
 80006d6:	f001 fc4e 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	48af      	ldr	r0, [pc, #700]	; (800099c <display+0x358>)
 80006e0:	f001 fc49 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timerred_counter/10);
 80006e4:	4bae      	ldr	r3, [pc, #696]	; (80009a0 <display+0x35c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4aae      	ldr	r2, [pc, #696]	; (80009a4 <display+0x360>)
 80006ea:	fb82 1203 	smull	r1, r2, r2, r3
 80006ee:	1092      	asrs	r2, r2, #2
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fd29 	bl	800014c <display7SEG>
					break;
 80006fa:	e065      	b.n	80007c8 <display+0x184>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	48a6      	ldr	r0, [pc, #664]	; (800099c <display+0x358>)
 8000704:	f001 fc37 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070e:	48a3      	ldr	r0, [pc, #652]	; (800099c <display+0x358>)
 8000710:	f001 fc31 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000714:	2201      	movs	r2, #1
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	48a0      	ldr	r0, [pc, #640]	; (800099c <display+0x358>)
 800071a:	f001 fc2c 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 800071e:	2200      	movs	r2, #0
 8000720:	2140      	movs	r1, #64	; 0x40
 8000722:	489e      	ldr	r0, [pc, #632]	; (800099c <display+0x358>)
 8000724:	f001 fc27 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timeryellow_counter/10);
 8000728:	4b9f      	ldr	r3, [pc, #636]	; (80009a8 <display+0x364>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a9d      	ldr	r2, [pc, #628]	; (80009a4 <display+0x360>)
 800072e:	fb82 1203 	smull	r1, r2, r2, r3
 8000732:	1092      	asrs	r2, r2, #2
 8000734:	17db      	asrs	r3, r3, #31
 8000736:	1ad3      	subs	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd07 	bl	800014c <display7SEG>
					break;
 800073e:	e043      	b.n	80007c8 <display+0x184>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	4895      	ldr	r0, [pc, #596]	; (800099c <display+0x358>)
 8000748:	f001 fc15 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000752:	4892      	ldr	r0, [pc, #584]	; (800099c <display+0x358>)
 8000754:	f001 fc0f 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000758:	2201      	movs	r2, #1
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	488f      	ldr	r0, [pc, #572]	; (800099c <display+0x358>)
 800075e:	f001 fc0a 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	488d      	ldr	r0, [pc, #564]	; (800099c <display+0x358>)
 8000768:	f001 fc05 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timergreen_counter/10);
 800076c:	4b8f      	ldr	r3, [pc, #572]	; (80009ac <display+0x368>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a8c      	ldr	r2, [pc, #560]	; (80009a4 <display+0x360>)
 8000772:	fb82 1203 	smull	r1, r2, r2, r3
 8000776:	1092      	asrs	r2, r2, #2
 8000778:	17db      	asrs	r3, r3, #31
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fce5 	bl	800014c <display7SEG>
					break;
 8000782:	e021      	b.n	80007c8 <display+0x184>
				// when mode is modify-time, use led1 to display time duration value
				case MAN_RED:
				case MAN_GREEN:
				case MAN_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	4884      	ldr	r0, [pc, #528]	; (800099c <display+0x358>)
 800078a:	f001 fbf4 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000794:	4881      	ldr	r0, [pc, #516]	; (800099c <display+0x358>)
 8000796:	f001 fbee 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a0:	487e      	ldr	r0, [pc, #504]	; (800099c <display+0x358>)
 80007a2:	f001 fbe8 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	487c      	ldr	r0, [pc, #496]	; (800099c <display+0x358>)
 80007ac:	f001 fbe3 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(set_timer/10);
 80007b0:	4b7f      	ldr	r3, [pc, #508]	; (80009b0 <display+0x36c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a7b      	ldr	r2, [pc, #492]	; (80009a4 <display+0x360>)
 80007b6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ba:	1092      	asrs	r2, r2, #2
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fcc3 	bl	800014c <display7SEG>
				default:
					break;
 80007c6:	bf00      	nop
			}
			break;
 80007c8:	e262      	b.n	8000c90 <display+0x64c>
		case 2:
			switch(status){
 80007ca:	4b73      	ldr	r3, [pc, #460]	; (8000998 <display+0x354>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	2b0d      	cmp	r3, #13
 80007d2:	f200 80ba 	bhi.w	800094a <display+0x306>
 80007d6:	a201      	add	r2, pc, #4	; (adr r2, 80007dc <display+0x198>)
 80007d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007dc:	08000815 	.word	0x08000815
 80007e0:	08000863 	.word	0x08000863
 80007e4:	080008b1 	.word	0x080008b1
 80007e8:	0800094b 	.word	0x0800094b
 80007ec:	0800094b 	.word	0x0800094b
 80007f0:	0800094b 	.word	0x0800094b
 80007f4:	0800094b 	.word	0x0800094b
 80007f8:	0800094b 	.word	0x0800094b
 80007fc:	0800094b 	.word	0x0800094b
 8000800:	0800094b 	.word	0x0800094b
 8000804:	0800094b 	.word	0x0800094b
 8000808:	080008ff 	.word	0x080008ff
 800080c:	080008ff 	.word	0x080008ff
 8000810:	080008ff 	.word	0x080008ff
				// when mode is normal, use led1 to display time of road 1
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000814:	2201      	movs	r2, #1
 8000816:	2140      	movs	r1, #64	; 0x40
 8000818:	4860      	ldr	r0, [pc, #384]	; (800099c <display+0x358>)
 800081a:	f001 fbac 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	485d      	ldr	r0, [pc, #372]	; (800099c <display+0x358>)
 8000826:	f001 fba6 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000830:	485a      	ldr	r0, [pc, #360]	; (800099c <display+0x358>)
 8000832:	f001 fba0 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000836:	2200      	movs	r2, #0
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	4858      	ldr	r0, [pc, #352]	; (800099c <display+0x358>)
 800083c:	f001 fb9b 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timerred_counter%10);
 8000840:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <display+0x35c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <display+0x360>)
 8000846:	fb83 1302 	smull	r1, r3, r3, r2
 800084a:	1099      	asrs	r1, r3, #2
 800084c:	17d3      	asrs	r3, r2, #31
 800084e:	1ac9      	subs	r1, r1, r3
 8000850:	460b      	mov	r3, r1
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	440b      	add	r3, r1
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	1ad1      	subs	r1, r2, r3
 800085a:	4608      	mov	r0, r1
 800085c:	f7ff fc76 	bl	800014c <display7SEG>
					break;
 8000860:	e074      	b.n	800094c <display+0x308>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	484c      	ldr	r0, [pc, #304]	; (800099c <display+0x358>)
 800086a:	f001 fb84 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	4849      	ldr	r0, [pc, #292]	; (800099c <display+0x358>)
 8000876:	f001 fb7e 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 800087a:	2201      	movs	r2, #1
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4847      	ldr	r0, [pc, #284]	; (800099c <display+0x358>)
 8000880:	f001 fb79 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000884:	2200      	movs	r2, #0
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4844      	ldr	r0, [pc, #272]	; (800099c <display+0x358>)
 800088a:	f001 fb74 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timeryellow_counter%10);
 800088e:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <display+0x364>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <display+0x360>)
 8000894:	fb83 1302 	smull	r1, r3, r3, r2
 8000898:	1099      	asrs	r1, r3, #2
 800089a:	17d3      	asrs	r3, r2, #31
 800089c:	1ac9      	subs	r1, r1, r3
 800089e:	460b      	mov	r3, r1
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	440b      	add	r3, r1
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	1ad1      	subs	r1, r2, r3
 80008a8:	4608      	mov	r0, r1
 80008aa:	f7ff fc4f 	bl	800014c <display7SEG>
					break;
 80008ae:	e04d      	b.n	800094c <display+0x308>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b6:	4839      	ldr	r0, [pc, #228]	; (800099c <display+0x358>)
 80008b8:	f001 fb5d 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4836      	ldr	r0, [pc, #216]	; (800099c <display+0x358>)
 80008c4:	f001 fb57 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2140      	movs	r1, #64	; 0x40
 80008cc:	4833      	ldr	r0, [pc, #204]	; (800099c <display+0x358>)
 80008ce:	f001 fb52 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4831      	ldr	r0, [pc, #196]	; (800099c <display+0x358>)
 80008d8:	f001 fb4d 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timergreen_counter%10);
 80008dc:	4b33      	ldr	r3, [pc, #204]	; (80009ac <display+0x368>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <display+0x360>)
 80008e2:	fb83 1302 	smull	r1, r3, r3, r2
 80008e6:	1099      	asrs	r1, r3, #2
 80008e8:	17d3      	asrs	r3, r2, #31
 80008ea:	1ac9      	subs	r1, r1, r3
 80008ec:	460b      	mov	r3, r1
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	440b      	add	r3, r1
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	1ad1      	subs	r1, r2, r3
 80008f6:	4608      	mov	r0, r1
 80008f8:	f7ff fc28 	bl	800014c <display7SEG>
					break;
 80008fc:	e026      	b.n	800094c <display+0x308>
					// when mode is modify-time, use led2 to display time duration value
				case MAN_RED:
				case MAN_GREEN:
				case MAN_YELLOW:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000904:	4825      	ldr	r0, [pc, #148]	; (800099c <display+0x358>)
 8000906:	f001 fb36 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <display+0x358>)
 8000912:	f001 fb30 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000916:	2201      	movs	r2, #1
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4820      	ldr	r0, [pc, #128]	; (800099c <display+0x358>)
 800091c:	f001 fb2b 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000920:	2200      	movs	r2, #0
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	481d      	ldr	r0, [pc, #116]	; (800099c <display+0x358>)
 8000926:	f001 fb26 	bl	8001f76 <HAL_GPIO_WritePin>
					display7SEG(set_timer%10);
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <display+0x36c>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <display+0x360>)
 8000930:	fb83 1302 	smull	r1, r3, r3, r2
 8000934:	1099      	asrs	r1, r3, #2
 8000936:	17d3      	asrs	r3, r2, #31
 8000938:	1ac9      	subs	r1, r1, r3
 800093a:	460b      	mov	r3, r1
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	1ad1      	subs	r1, r2, r3
 8000944:	4608      	mov	r0, r1
 8000946:	f7ff fc01 	bl	800014c <display7SEG>
				default:
					break;
 800094a:	bf00      	nop
			}
			break;
 800094c:	e1a0      	b.n	8000c90 <display+0x64c>
		case 3:
			switch(status2){
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <display+0x370>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3b01      	subs	r3, #1
 8000954:	2b0d      	cmp	r3, #13
 8000956:	f200 80ae 	bhi.w	8000ab6 <display+0x472>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <display+0x31c>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	080009b9 	.word	0x080009b9
 8000964:	080009fd 	.word	0x080009fd
 8000968:	08000a41 	.word	0x08000a41
 800096c:	08000ab7 	.word	0x08000ab7
 8000970:	08000ab7 	.word	0x08000ab7
 8000974:	08000ab7 	.word	0x08000ab7
 8000978:	08000ab7 	.word	0x08000ab7
 800097c:	08000ab7 	.word	0x08000ab7
 8000980:	08000ab7 	.word	0x08000ab7
 8000984:	08000ab7 	.word	0x08000ab7
 8000988:	08000ab7 	.word	0x08000ab7
 800098c:	08000a85 	.word	0x08000a85
 8000990:	08000a85 	.word	0x08000a85
 8000994:	08000a85 	.word	0x08000a85
 8000998:	200000c0 	.word	0x200000c0
 800099c:	40010800 	.word	0x40010800
 80009a0:	20000040 	.word	0x20000040
 80009a4:	66666667 	.word	0x66666667
 80009a8:	20000044 	.word	0x20000044
 80009ac:	20000048 	.word	0x20000048
 80009b0:	20000090 	.word	0x20000090
 80009b4:	200000bc 	.word	0x200000bc
			// when mode is normal, use led3 to display time of road 1
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	48b6      	ldr	r0, [pc, #728]	; (8000c98 <display+0x654>)
 80009be:	f001 fada 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c8:	48b3      	ldr	r0, [pc, #716]	; (8000c98 <display+0x654>)
 80009ca:	f001 fad4 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80009ce:	2201      	movs	r2, #1
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	48b0      	ldr	r0, [pc, #704]	; (8000c98 <display+0x654>)
 80009d6:	f001 face 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80009da:	2201      	movs	r2, #1
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	48ae      	ldr	r0, [pc, #696]	; (8000c98 <display+0x654>)
 80009e0:	f001 fac9 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timerred2_counter/10);
 80009e4:	4bad      	ldr	r3, [pc, #692]	; (8000c9c <display+0x658>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4aad      	ldr	r2, [pc, #692]	; (8000ca0 <display+0x65c>)
 80009ea:	fb82 1203 	smull	r1, r2, r2, r3
 80009ee:	1092      	asrs	r2, r2, #2
 80009f0:	17db      	asrs	r3, r3, #31
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fba9 	bl	800014c <display7SEG>
					break;
 80009fa:	e05d      	b.n	8000ab8 <display+0x474>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a02:	48a5      	ldr	r0, [pc, #660]	; (8000c98 <display+0x654>)
 8000a04:	f001 fab7 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	48a2      	ldr	r0, [pc, #648]	; (8000c98 <display+0x654>)
 8000a10:	f001 fab1 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	489f      	ldr	r0, [pc, #636]	; (8000c98 <display+0x654>)
 8000a1a:	f001 faac 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	489d      	ldr	r0, [pc, #628]	; (8000c98 <display+0x654>)
 8000a24:	f001 faa7 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timeryellow2_counter/10);
 8000a28:	4b9e      	ldr	r3, [pc, #632]	; (8000ca4 <display+0x660>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a9c      	ldr	r2, [pc, #624]	; (8000ca0 <display+0x65c>)
 8000a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a32:	1092      	asrs	r2, r2, #2
 8000a34:	17db      	asrs	r3, r3, #31
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fb87 	bl	800014c <display7SEG>
					break;
 8000a3e:	e03b      	b.n	8000ab8 <display+0x474>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a46:	4894      	ldr	r0, [pc, #592]	; (8000c98 <display+0x654>)
 8000a48:	f001 fa95 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a52:	4891      	ldr	r0, [pc, #580]	; (8000c98 <display+0x654>)
 8000a54:	f001 fa8f 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	488e      	ldr	r0, [pc, #568]	; (8000c98 <display+0x654>)
 8000a5e:	f001 fa8a 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2140      	movs	r1, #64	; 0x40
 8000a66:	488c      	ldr	r0, [pc, #560]	; (8000c98 <display+0x654>)
 8000a68:	f001 fa85 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timergreen2_counter/10);
 8000a6c:	4b8e      	ldr	r3, [pc, #568]	; (8000ca8 <display+0x664>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a8b      	ldr	r2, [pc, #556]	; (8000ca0 <display+0x65c>)
 8000a72:	fb82 1203 	smull	r1, r2, r2, r3
 8000a76:	1092      	asrs	r2, r2, #2
 8000a78:	17db      	asrs	r3, r3, #31
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fb65 	bl	800014c <display7SEG>
					break;
 8000a82:	e019      	b.n	8000ab8 <display+0x474>
				// when mode is modify-time, use led3 to display the mode
				case MAN_RED:
				case MAN_GREEN:
				case MAN_YELLOW:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8a:	4883      	ldr	r0, [pc, #524]	; (8000c98 <display+0x654>)
 8000a8c:	f001 fa73 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a96:	4880      	ldr	r0, [pc, #512]	; (8000c98 <display+0x654>)
 8000a98:	f001 fa6d 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2180      	movs	r1, #128	; 0x80
 8000aa0:	487d      	ldr	r0, [pc, #500]	; (8000c98 <display+0x654>)
 8000aa2:	f001 fa68 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	487b      	ldr	r0, [pc, #492]	; (8000c98 <display+0x654>)
 8000aac:	f001 fa63 	bl	8001f76 <HAL_GPIO_WritePin>
					display7SEG(0);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fb4b 	bl	800014c <display7SEG>
				default:
					break;
 8000ab6:	bf00      	nop
			}
			break;
 8000ab8:	e0ea      	b.n	8000c90 <display+0x64c>
		case 4:
			switch(status2){
 8000aba:	4b7c      	ldr	r3, [pc, #496]	; (8000cac <display+0x668>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	2b0d      	cmp	r3, #13
 8000ac2:	f200 80e2 	bhi.w	8000c8a <display+0x646>
 8000ac6:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <display+0x488>)
 8000ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000acc:	08000b05 	.word	0x08000b05
 8000ad0:	08000b53 	.word	0x08000b53
 8000ad4:	08000ba1 	.word	0x08000ba1
 8000ad8:	08000c8b 	.word	0x08000c8b
 8000adc:	08000c8b 	.word	0x08000c8b
 8000ae0:	08000c8b 	.word	0x08000c8b
 8000ae4:	08000c8b 	.word	0x08000c8b
 8000ae8:	08000c8b 	.word	0x08000c8b
 8000aec:	08000c8b 	.word	0x08000c8b
 8000af0:	08000c8b 	.word	0x08000c8b
 8000af4:	08000c8b 	.word	0x08000c8b
 8000af8:	08000bef 	.word	0x08000bef
 8000afc:	08000c57 	.word	0x08000c57
 8000b00:	08000c23 	.word	0x08000c23
			// when mode is normal, use led4 to display time of road 1
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2140      	movs	r1, #64	; 0x40
 8000b08:	4863      	ldr	r0, [pc, #396]	; (8000c98 <display+0x654>)
 8000b0a:	f001 fa34 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b14:	4860      	ldr	r0, [pc, #384]	; (8000c98 <display+0x654>)
 8000b16:	f001 fa2e 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b20:	485d      	ldr	r0, [pc, #372]	; (8000c98 <display+0x654>)
 8000b22:	f001 fa28 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	485b      	ldr	r0, [pc, #364]	; (8000c98 <display+0x654>)
 8000b2c:	f001 fa23 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timerred2_counter%10);
 8000b30:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <display+0x658>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b5a      	ldr	r3, [pc, #360]	; (8000ca0 <display+0x65c>)
 8000b36:	fb83 1302 	smull	r1, r3, r3, r2
 8000b3a:	1099      	asrs	r1, r3, #2
 8000b3c:	17d3      	asrs	r3, r2, #31
 8000b3e:	1ac9      	subs	r1, r1, r3
 8000b40:	460b      	mov	r3, r1
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	440b      	add	r3, r1
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	1ad1      	subs	r1, r2, r3
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	f7ff fafe 	bl	800014c <display7SEG>
					break;
 8000b50:	e09c      	b.n	8000c8c <display+0x648>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b58:	484f      	ldr	r0, [pc, #316]	; (8000c98 <display+0x654>)
 8000b5a:	f001 fa0c 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b64:	484c      	ldr	r0, [pc, #304]	; (8000c98 <display+0x654>)
 8000b66:	f001 fa06 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	484a      	ldr	r0, [pc, #296]	; (8000c98 <display+0x654>)
 8000b70:	f001 fa01 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	4847      	ldr	r0, [pc, #284]	; (8000c98 <display+0x654>)
 8000b7a:	f001 f9fc 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timeryellow2_counter%10);
 8000b7e:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <display+0x660>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <display+0x65c>)
 8000b84:	fb83 1302 	smull	r1, r3, r3, r2
 8000b88:	1099      	asrs	r1, r3, #2
 8000b8a:	17d3      	asrs	r3, r2, #31
 8000b8c:	1ac9      	subs	r1, r1, r3
 8000b8e:	460b      	mov	r3, r1
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	1ad1      	subs	r1, r2, r3
 8000b98:	4608      	mov	r0, r1
 8000b9a:	f7ff fad7 	bl	800014c <display7SEG>
					break;
 8000b9e:	e075      	b.n	8000c8c <display+0x648>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	483c      	ldr	r0, [pc, #240]	; (8000c98 <display+0x654>)
 8000ba8:	f001 f9e5 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb2:	4839      	ldr	r0, [pc, #228]	; (8000c98 <display+0x654>)
 8000bb4:	f001 f9df 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	4836      	ldr	r0, [pc, #216]	; (8000c98 <display+0x654>)
 8000bbe:	f001 f9da 	bl	8001f76 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	4834      	ldr	r0, [pc, #208]	; (8000c98 <display+0x654>)
 8000bc8:	f001 f9d5 	bl	8001f76 <HAL_GPIO_WritePin>
						display7SEG(timergreen2_counter%10);
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <display+0x664>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <display+0x65c>)
 8000bd2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bd6:	1099      	asrs	r1, r3, #2
 8000bd8:	17d3      	asrs	r3, r2, #31
 8000bda:	1ac9      	subs	r1, r1, r3
 8000bdc:	460b      	mov	r3, r1
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	440b      	add	r3, r1
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	1ad1      	subs	r1, r2, r3
 8000be6:	4608      	mov	r0, r1
 8000be8:	f7ff fab0 	bl	800014c <display7SEG>
					break;
 8000bec:	e04e      	b.n	8000c8c <display+0x648>
					// when mode is modify-time, use led4 to display the mode
				case MAN_RED:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf4:	4828      	ldr	r0, [pc, #160]	; (8000c98 <display+0x654>)
 8000bf6:	f001 f9be 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c00:	4825      	ldr	r0, [pc, #148]	; (8000c98 <display+0x654>)
 8000c02:	f001 f9b8 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2180      	movs	r1, #128	; 0x80
 8000c0a:	4823      	ldr	r0, [pc, #140]	; (8000c98 <display+0x654>)
 8000c0c:	f001 f9b3 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4820      	ldr	r0, [pc, #128]	; (8000c98 <display+0x654>)
 8000c16:	f001 f9ae 	bl	8001f76 <HAL_GPIO_WritePin>
					display7SEG(2);
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff fa96 	bl	800014c <display7SEG>
					break;
 8000c20:	e034      	b.n	8000c8c <display+0x648>
				case MAN_YELLOW:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c28:	481b      	ldr	r0, [pc, #108]	; (8000c98 <display+0x654>)
 8000c2a:	f001 f9a4 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <display+0x654>)
 8000c36:	f001 f99e 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <display+0x654>)
 8000c40:	f001 f999 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2140      	movs	r1, #64	; 0x40
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <display+0x654>)
 8000c4a:	f001 f994 	bl	8001f76 <HAL_GPIO_WritePin>
					display7SEG(3);
 8000c4e:	2003      	movs	r0, #3
 8000c50:	f7ff fa7c 	bl	800014c <display7SEG>
					break;
 8000c54:	e01a      	b.n	8000c8c <display+0x648>
				case MAN_GREEN:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	480e      	ldr	r0, [pc, #56]	; (8000c98 <display+0x654>)
 8000c5e:	f001 f98a 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <display+0x654>)
 8000c6a:	f001 f984 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <display+0x654>)
 8000c74:	f001 f97f 	bl	8001f76 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2140      	movs	r1, #64	; 0x40
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <display+0x654>)
 8000c7e:	f001 f97a 	bl	8001f76 <HAL_GPIO_WritePin>
					display7SEG(4);
 8000c82:	2004      	movs	r0, #4
 8000c84:	f7ff fa62 	bl	800014c <display7SEG>
					break;
 8000c88:	e000      	b.n	8000c8c <display+0x648>
				default:
					break;
 8000c8a:	bf00      	nop
			}
			break;
 8000c8c:	e000      	b.n	8000c90 <display+0x64c>
			default:
				break;
 8000c8e:	bf00      	nop
		}
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	2000004c 	.word	0x2000004c
 8000ca0:	66666667 	.word	0x66666667
 8000ca4:	20000050 	.word	0x20000050
 8000ca8:	20000054 	.word	0x20000054
 8000cac:	200000bc 	.word	0x200000bc

08000cb0 <fsm_automatic_run>:
// setTimer2:
// 			- every second timer counter of all led subtract 1 of road 1
//			- set timer for led blinky when button1 is pressed
// setTimer4: set timer for red, yellow, green led of road 2
// setTimer5: every second timer counter of all led subtract 1 of road 2
void fsm_automatic_run(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	switch(status){
 8000cb4:	4bb8      	ldr	r3, [pc, #736]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	f200 8133 	bhi.w	8000f24 <fsm_automatic_run+0x274>
 8000cbe:	a201      	add	r2, pc, #4	; (adr r2, 8000cc4 <fsm_automatic_run+0x14>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000cd5 	.word	0x08000cd5
 8000cc8:	08000d21 	.word	0x08000d21
 8000ccc:	08000dcb 	.word	0x08000dcb
 8000cd0:	08000e73 	.word	0x08000e73
		case INIT:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	48b0      	ldr	r0, [pc, #704]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000cda:	f001 f94c 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	48ae      	ldr	r0, [pc, #696]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000ce4:	f001 f947 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2120      	movs	r1, #32
 8000cec:	48ab      	ldr	r0, [pc, #684]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000cee:	f001 f942 	bl	8001f76 <HAL_GPIO_WritePin>
			status = AUTO_RED;
 8000cf2:	4ba9      	ldr	r3, [pc, #676]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
			setTimer2(1000);
 8000cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfc:	f000 fcb4 	bl	8001668 <setTimer2>
			timerred_counter = timer_red/1000;
 8000d00:	4ba7      	ldr	r3, [pc, #668]	; (8000fa0 <fsm_automatic_run+0x2f0>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4aa7      	ldr	r2, [pc, #668]	; (8000fa4 <fsm_automatic_run+0x2f4>)
 8000d06:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0a:	1192      	asrs	r2, r2, #6
 8000d0c:	17db      	asrs	r3, r3, #31
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4aa5      	ldr	r2, [pc, #660]	; (8000fa8 <fsm_automatic_run+0x2f8>)
 8000d12:	6013      	str	r3, [r2, #0]
			setTimer(timer_red);
 8000d14:	4ba2      	ldr	r3, [pc, #648]	; (8000fa0 <fsm_automatic_run+0x2f0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fc8b 	bl	8001634 <setTimer>
			break;
 8000d1e:	e101      	b.n	8000f24 <fsm_automatic_run+0x274>
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2108      	movs	r1, #8
 8000d24:	489d      	ldr	r0, [pc, #628]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000d26:	f001 f926 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	489b      	ldr	r0, [pc, #620]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000d30:	f001 f921 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2120      	movs	r1, #32
 8000d38:	4898      	ldr	r0, [pc, #608]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000d3a:	f001 f91c 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000d3e:	4b9b      	ldr	r3, [pc, #620]	; (8000fac <fsm_automatic_run+0x2fc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d108      	bne.n	8000d58 <fsm_automatic_run+0xa8>
				// each second timer red counter subtract 1
				setTimer2(1000);
 8000d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4a:	f000 fc8d 	bl	8001668 <setTimer2>
				timerred_counter--;
 8000d4e:	4b96      	ldr	r3, [pc, #600]	; (8000fa8 <fsm_automatic_run+0x2f8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a94      	ldr	r2, [pc, #592]	; (8000fa8 <fsm_automatic_run+0x2f8>)
 8000d56:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000d58:	4b95      	ldr	r3, [pc, #596]	; (8000fb0 <fsm_automatic_run+0x300>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d115      	bne.n	8000d8c <fsm_automatic_run+0xdc>
				// if timer red = 0, status is AUTO_GREEN
				setTimer2(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f000 fc80 	bl	8001668 <setTimer2>
				timergreen_counter = timer_green/1000;
 8000d68:	4b92      	ldr	r3, [pc, #584]	; (8000fb4 <fsm_automatic_run+0x304>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a8d      	ldr	r2, [pc, #564]	; (8000fa4 <fsm_automatic_run+0x2f4>)
 8000d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d72:	1192      	asrs	r2, r2, #6
 8000d74:	17db      	asrs	r3, r3, #31
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	4a8f      	ldr	r2, [pc, #572]	; (8000fb8 <fsm_automatic_run+0x308>)
 8000d7a:	6013      	str	r3, [r2, #0]
				setTimer(timer_green);
 8000d7c:	4b8d      	ldr	r3, [pc, #564]	; (8000fb4 <fsm_automatic_run+0x304>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fc57 	bl	8001634 <setTimer>
				// set timer for green led
				status = AUTO_GREEN;
 8000d86:	4b84      	ldr	r3, [pc, #528]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000d88:	2203      	movs	r2, #3
 8000d8a:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1){
 8000d8c:	f7ff fb64 	bl	8000458 <isButton1Pressed>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	f040 80c1 	bne.w	8000f1a <fsm_automatic_run+0x26a>
				// if button is pressed, mode is changed to mode 2 ( modify time for red led)
				status = MAN_RED;
 8000d98:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000d9e:	4b87      	ldr	r3, [pc, #540]	; (8000fbc <fsm_automatic_run+0x30c>)
 8000da0:	220c      	movs	r2, #12
 8000da2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2108      	movs	r1, #8
 8000da8:	487c      	ldr	r0, [pc, #496]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000daa:	f001 f8e4 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db4:	4879      	ldr	r0, [pc, #484]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000db6:	f001 f8de 	bl	8001f76 <HAL_GPIO_WritePin>
				// turn off two led red
				set_timer = 1;
 8000dba:	4b81      	ldr	r3, [pc, #516]	; (8000fc0 <fsm_automatic_run+0x310>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
				// value of time duration is in a range of 1 - 99
				setTimer2(500);
 8000dc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc4:	f000 fc50 	bl	8001668 <setTimer2>
				// set timer for led blinky
			}
			break;
 8000dc8:	e0a7      	b.n	8000f1a <fsm_automatic_run+0x26a>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2108      	movs	r1, #8
 8000dce:	4873      	ldr	r0, [pc, #460]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000dd0:	f001 f8d1 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	4870      	ldr	r0, [pc, #448]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000dda:	f001 f8cc 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2120      	movs	r1, #32
 8000de2:	486e      	ldr	r0, [pc, #440]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000de4:	f001 f8c7 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000de8:	4b70      	ldr	r3, [pc, #448]	; (8000fac <fsm_automatic_run+0x2fc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <fsm_automatic_run+0x152>
				// each second timer yellow counter subtract 1
				setTimer2(1000);
 8000df0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df4:	f000 fc38 	bl	8001668 <setTimer2>
				timeryellow_counter--;
 8000df8:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <fsm_automatic_run+0x314>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <fsm_automatic_run+0x314>)
 8000e00:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000e02:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <fsm_automatic_run+0x300>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d115      	bne.n	8000e36 <fsm_automatic_run+0x186>
				// if timer yellow = 0, status is AUTO_RED
				status = AUTO_RED;
 8000e0a:	4b63      	ldr	r3, [pc, #396]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e14:	f000 fc28 	bl	8001668 <setTimer2>
				timerred_counter = timer_red/1000;
 8000e18:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <fsm_automatic_run+0x2f0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a61      	ldr	r2, [pc, #388]	; (8000fa4 <fsm_automatic_run+0x2f4>)
 8000e1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e22:	1192      	asrs	r2, r2, #6
 8000e24:	17db      	asrs	r3, r3, #31
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	4a5f      	ldr	r2, [pc, #380]	; (8000fa8 <fsm_automatic_run+0x2f8>)
 8000e2a:	6013      	str	r3, [r2, #0]
				setTimer(timer_red);
 8000e2c:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <fsm_automatic_run+0x2f0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 fbff 	bl	8001634 <setTimer>
				// set timer for red led
			}
			if(isButton1Pressed() == 1){
 8000e36:	f7ff fb0f 	bl	8000458 <isButton1Pressed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d16e      	bne.n	8000f1e <fsm_automatic_run+0x26e>
				// if button is pressed, mode is changed to mode 2 ( modify time for red led)
				status = MAN_RED;
 8000e40:	4b55      	ldr	r3, [pc, #340]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <fsm_automatic_run+0x30c>)
 8000e48:	220c      	movs	r2, #12
 8000e4a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2108      	movs	r1, #8
 8000e50:	4852      	ldr	r0, [pc, #328]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000e52:	f001 f890 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5c:	484f      	ldr	r0, [pc, #316]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000e5e:	f001 f88a 	bl	8001f76 <HAL_GPIO_WritePin>
				// turn off two led red
				set_timer = 1;
 8000e62:	4b57      	ldr	r3, [pc, #348]	; (8000fc0 <fsm_automatic_run+0x310>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000e68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e6c:	f000 fbfc 	bl	8001668 <setTimer2>
				// set timer for led blinky
			}
			break;
 8000e70:	e055      	b.n	8000f1e <fsm_automatic_run+0x26e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2108      	movs	r1, #8
 8000e76:	4849      	ldr	r0, [pc, #292]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000e78:	f001 f87d 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2110      	movs	r1, #16
 8000e80:	4846      	ldr	r0, [pc, #280]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000e82:	f001 f878 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4844      	ldr	r0, [pc, #272]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000e8c:	f001 f873 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <fsm_automatic_run+0x2fc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d108      	bne.n	8000eaa <fsm_automatic_run+0x1fa>
				// each second timer green counter subtract 1
				setTimer2(1000);
 8000e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e9c:	f000 fbe4 	bl	8001668 <setTimer2>
				timergreen_counter--;
 8000ea0:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <fsm_automatic_run+0x308>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <fsm_automatic_run+0x308>)
 8000ea8:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <fsm_automatic_run+0x300>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d115      	bne.n	8000ede <fsm_automatic_run+0x22e>
				// if timer green = 0, status is AUTO_YELLOW
				status = AUTO_YELLOW;
 8000eb2:	4b39      	ldr	r3, [pc, #228]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebc:	f000 fbd4 	bl	8001668 <setTimer2>
				timeryellow_counter = timer_yellow/1000;
 8000ec0:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <fsm_automatic_run+0x318>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a37      	ldr	r2, [pc, #220]	; (8000fa4 <fsm_automatic_run+0x2f4>)
 8000ec6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eca:	1192      	asrs	r2, r2, #6
 8000ecc:	17db      	asrs	r3, r3, #31
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	4a3c      	ldr	r2, [pc, #240]	; (8000fc4 <fsm_automatic_run+0x314>)
 8000ed2:	6013      	str	r3, [r2, #0]
				setTimer(timer_yellow);
 8000ed4:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <fsm_automatic_run+0x318>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 fbab 	bl	8001634 <setTimer>
				// set timer for red yellow
			}
			if(isButton1Pressed() == 1){
 8000ede:	f7ff fabb 	bl	8000458 <isButton1Pressed>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d11c      	bne.n	8000f22 <fsm_automatic_run+0x272>
				// if button is pressed, mode is changed to mode 2 ( modify time for red led)
				status = MAN_RED;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <fsm_automatic_run+0x2e8>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <fsm_automatic_run+0x30c>)
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4828      	ldr	r0, [pc, #160]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000efa:	f001 f83c 	bl	8001f76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000efe:	220a      	movs	r2, #10
 8000f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f04:	4825      	ldr	r0, [pc, #148]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000f06:	f001 f836 	bl	8001f76 <HAL_GPIO_WritePin>
				// turn off two led red
				set_timer = 1;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <fsm_automatic_run+0x310>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f14:	f000 fba8 	bl	8001668 <setTimer2>
				// set timer for led blinky
			}
			break;
 8000f18:	e003      	b.n	8000f22 <fsm_automatic_run+0x272>
			break;
 8000f1a:	bf00      	nop
 8000f1c:	e002      	b.n	8000f24 <fsm_automatic_run+0x274>
			break;
 8000f1e:	bf00      	nop
 8000f20:	e000      	b.n	8000f24 <fsm_automatic_run+0x274>
			break;
 8000f22:	bf00      	nop
	}
	switch(status2){
 8000f24:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <fsm_automatic_run+0x30c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	f200 8105 	bhi.w	8001138 <fsm_automatic_run+0x488>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <fsm_automatic_run+0x284>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000fd1 	.word	0x08000fd1
 8000f3c:	08001047 	.word	0x08001047
 8000f40:	080010bb 	.word	0x080010bb
		case INIT:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f4a:	4814      	ldr	r0, [pc, #80]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000f4c:	f001 f813 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f56:	4811      	ldr	r0, [pc, #68]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000f58:	f001 f80d 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <fsm_automatic_run+0x2ec>)
 8000f64:	f001 f807 	bl	8001f76 <HAL_GPIO_WritePin>
			status2 = AUTO_GREEN;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <fsm_automatic_run+0x30c>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	601a      	str	r2, [r3, #0]
			setTimer5(1000);
 8000f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f72:	f000 fbc7 	bl	8001704 <setTimer5>
			timergreen2_counter = timer_green/1000;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <fsm_automatic_run+0x304>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <fsm_automatic_run+0x2f4>)
 8000f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f80:	1192      	asrs	r2, r2, #6
 8000f82:	17db      	asrs	r3, r3, #31
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <fsm_automatic_run+0x31c>)
 8000f88:	6013      	str	r3, [r2, #0]
			setTimer4(timer_green);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <fsm_automatic_run+0x304>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fb9e 	bl	80016d0 <setTimer4>
			break;
 8000f94:	e0d0      	b.n	8001138 <fsm_automatic_run+0x488>
 8000f96:	bf00      	nop
 8000f98:	200000c0 	.word	0x200000c0
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	20000034 	.word	0x20000034
 8000fa4:	10624dd3 	.word	0x10624dd3
 8000fa8:	20000040 	.word	0x20000040
 8000fac:	200000ac 	.word	0x200000ac
 8000fb0:	200000a8 	.word	0x200000a8
 8000fb4:	2000003c 	.word	0x2000003c
 8000fb8:	20000048 	.word	0x20000048
 8000fbc:	200000bc 	.word	0x200000bc
 8000fc0:	20000090 	.word	0x20000090
 8000fc4:	20000044 	.word	0x20000044
 8000fc8:	20000038 	.word	0x20000038
 8000fcc:	20000054 	.word	0x20000054
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd6:	4859      	ldr	r0, [pc, #356]	; (800113c <fsm_automatic_run+0x48c>)
 8000fd8:	f000 ffcd 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe2:	4856      	ldr	r0, [pc, #344]	; (800113c <fsm_automatic_run+0x48c>)
 8000fe4:	f000 ffc7 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fee:	4853      	ldr	r0, [pc, #332]	; (800113c <fsm_automatic_run+0x48c>)
 8000ff0:	f000 ffc1 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <fsm_automatic_run+0x490>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d108      	bne.n	800100e <fsm_automatic_run+0x35e>
				// each second timer red counter subtract 1
				setTimer5(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f000 fb80 	bl	8001704 <setTimer5>
				timerred2_counter--;
 8001004:	4b4f      	ldr	r3, [pc, #316]	; (8001144 <fsm_automatic_run+0x494>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a4e      	ldr	r2, [pc, #312]	; (8001144 <fsm_automatic_run+0x494>)
 800100c:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 800100e:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <fsm_automatic_run+0x498>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	f040 808b 	bne.w	800112e <fsm_automatic_run+0x47e>
				// if timer red = 0, status is AUTO_GREEN
				setTimer5(1000);
 8001018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101c:	f000 fb72 	bl	8001704 <setTimer5>
				timergreen2_counter = timer_green/1000;
 8001020:	4b4a      	ldr	r3, [pc, #296]	; (800114c <fsm_automatic_run+0x49c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a4a      	ldr	r2, [pc, #296]	; (8001150 <fsm_automatic_run+0x4a0>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	1192      	asrs	r2, r2, #6
 800102c:	17db      	asrs	r3, r3, #31
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <fsm_automatic_run+0x4a4>)
 8001032:	6013      	str	r3, [r2, #0]
				setTimer4(timer_green);
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <fsm_automatic_run+0x49c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f000 fb49 	bl	80016d0 <setTimer4>
				// set timer for green led
				status2 = AUTO_GREEN;
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <fsm_automatic_run+0x4a8>)
 8001040:	2203      	movs	r2, #3
 8001042:	601a      	str	r2, [r3, #0]
			}
			break;
 8001044:	e073      	b.n	800112e <fsm_automatic_run+0x47e>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800104c:	483b      	ldr	r0, [pc, #236]	; (800113c <fsm_automatic_run+0x48c>)
 800104e:	f000 ff92 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,0);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001058:	4838      	ldr	r0, [pc, #224]	; (800113c <fsm_automatic_run+0x48c>)
 800105a:	f000 ff8c 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001064:	4835      	ldr	r0, [pc, #212]	; (800113c <fsm_automatic_run+0x48c>)
 8001066:	f000 ff86 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <fsm_automatic_run+0x490>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <fsm_automatic_run+0x3d4>
				// each second timer yellow counter subtract 1
				setTimer5(1000);
 8001072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001076:	f000 fb45 	bl	8001704 <setTimer5>
				timeryellow2_counter--;
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <fsm_automatic_run+0x4ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3b01      	subs	r3, #1
 8001080:	4a36      	ldr	r2, [pc, #216]	; (800115c <fsm_automatic_run+0x4ac>)
 8001082:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 8001084:	4b30      	ldr	r3, [pc, #192]	; (8001148 <fsm_automatic_run+0x498>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d152      	bne.n	8001132 <fsm_automatic_run+0x482>
				// if timer yellow = 0, status is AUTO_RED
				status2 = AUTO_RED;
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <fsm_automatic_run+0x4a8>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
				setTimer5(1000);
 8001092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001096:	f000 fb35 	bl	8001704 <setTimer5>
				timerred2_counter = timer_red/1000;
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <fsm_automatic_run+0x4b0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2c      	ldr	r2, [pc, #176]	; (8001150 <fsm_automatic_run+0x4a0>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1192      	asrs	r2, r2, #6
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <fsm_automatic_run+0x494>)
 80010ac:	6013      	str	r3, [r2, #0]
				setTimer4(timer_red);
 80010ae:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <fsm_automatic_run+0x4b0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fb0c 	bl	80016d0 <setTimer4>
				// set timer for red led
			}
			break;
 80010b8:	e03b      	b.n	8001132 <fsm_automatic_run+0x482>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c0:	481e      	ldr	r0, [pc, #120]	; (800113c <fsm_automatic_run+0x48c>)
 80010c2:	f000 ff58 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010cc:	481b      	ldr	r0, [pc, #108]	; (800113c <fsm_automatic_run+0x48c>)
 80010ce:	f000 ff52 	bl	8001f76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <fsm_automatic_run+0x48c>)
 80010da:	f000 ff4c 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <fsm_automatic_run+0x490>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d108      	bne.n	80010f8 <fsm_automatic_run+0x448>
				// each second timer green counter subtract 1
				setTimer5(1000);
 80010e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ea:	f000 fb0b 	bl	8001704 <setTimer5>
				timergreen2_counter--;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <fsm_automatic_run+0x4a4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	4a17      	ldr	r2, [pc, #92]	; (8001154 <fsm_automatic_run+0x4a4>)
 80010f6:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <fsm_automatic_run+0x498>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d11a      	bne.n	8001136 <fsm_automatic_run+0x486>
				// if timer green = 0, status is AUTO_YELLOW
				setTimer5(1000);
 8001100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001104:	f000 fafe 	bl	8001704 <setTimer5>
				status2 = AUTO_YELLOW;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <fsm_automatic_run+0x4a8>)
 800110a:	2202      	movs	r2, #2
 800110c:	601a      	str	r2, [r3, #0]
				timeryellow2_counter = timer_yellow/1000;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <fsm_automatic_run+0x4b4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <fsm_automatic_run+0x4a0>)
 8001114:	fb82 1203 	smull	r1, r2, r2, r3
 8001118:	1192      	asrs	r2, r2, #6
 800111a:	17db      	asrs	r3, r3, #31
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <fsm_automatic_run+0x4ac>)
 8001120:	6013      	str	r3, [r2, #0]
				setTimer4(timer_yellow);
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <fsm_automatic_run+0x4b4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fad2 	bl	80016d0 <setTimer4>
				// set timer for yelow led
			}
			break;
 800112c:	e003      	b.n	8001136 <fsm_automatic_run+0x486>
			break;
 800112e:	bf00      	nop
 8001130:	e002      	b.n	8001138 <fsm_automatic_run+0x488>
			break;
 8001132:	bf00      	nop
 8001134:	e000      	b.n	8001138 <fsm_automatic_run+0x488>
			break;
 8001136:	bf00      	nop
		}
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40010800 	.word	0x40010800
 8001140:	200000b8 	.word	0x200000b8
 8001144:	2000004c 	.word	0x2000004c
 8001148:	200000b4 	.word	0x200000b4
 800114c:	2000003c 	.word	0x2000003c
 8001150:	10624dd3 	.word	0x10624dd3
 8001154:	20000054 	.word	0x20000054
 8001158:	200000bc 	.word	0x200000bc
 800115c:	20000050 	.word	0x20000050
 8001160:	20000034 	.word	0x20000034
 8001164:	20000038 	.word	0x20000038

08001168 <fsm_manual_run>:
 *      Author: Hong Phat
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	switch(status){
 800116c:	4b8d      	ldr	r3, [pc, #564]	; (80013a4 <fsm_manual_run+0x23c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b0e      	cmp	r3, #14
 8001172:	d061      	beq.n	8001238 <fsm_manual_run+0xd0>
 8001174:	2b0e      	cmp	r3, #14
 8001176:	f300 810b 	bgt.w	8001390 <fsm_manual_run+0x228>
 800117a:	2b0c      	cmp	r3, #12
 800117c:	d003      	beq.n	8001186 <fsm_manual_run+0x1e>
 800117e:	2b0d      	cmp	r3, #13
 8001180:	f000 80b2 	beq.w	80012e8 <fsm_manual_run+0x180>
			// if button3 is pressed, set the value
			timer_green= set_timer*1000;
		}
		break;
	default:
		break;
 8001184:	e104      	b.n	8001390 <fsm_manual_run+0x228>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8001186:	2201      	movs	r2, #1
 8001188:	2110      	movs	r1, #16
 800118a:	4887      	ldr	r0, [pc, #540]	; (80013a8 <fsm_manual_run+0x240>)
 800118c:	f000 fef3 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001190:	2201      	movs	r2, #1
 8001192:	2120      	movs	r1, #32
 8001194:	4884      	ldr	r0, [pc, #528]	; (80013a8 <fsm_manual_run+0x240>)
 8001196:	f000 feee 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a0:	4881      	ldr	r0, [pc, #516]	; (80013a8 <fsm_manual_run+0x240>)
 80011a2:	f000 fee8 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ac:	487e      	ldr	r0, [pc, #504]	; (80013a8 <fsm_manual_run+0x240>)
 80011ae:	f000 fee2 	bl	8001f76 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 80011b2:	4b7e      	ldr	r3, [pc, #504]	; (80013ac <fsm_manual_run+0x244>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d10c      	bne.n	80011d4 <fsm_manual_run+0x6c>
			setTimer2(500);
 80011ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011be:	f000 fa53 	bl	8001668 <setTimer2>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 80011c2:	2108      	movs	r1, #8
 80011c4:	4878      	ldr	r0, [pc, #480]	; (80013a8 <fsm_manual_run+0x240>)
 80011c6:	f000 feee 	bl	8001fa6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_10);
 80011ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ce:	4876      	ldr	r0, [pc, #472]	; (80013a8 <fsm_manual_run+0x240>)
 80011d0:	f000 fee9 	bl	8001fa6 <HAL_GPIO_TogglePin>
		if(isButton1Pressed() == 1){
 80011d4:	f7ff f940 	bl	8000458 <isButton1Pressed>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10c      	bne.n	80011f8 <fsm_manual_run+0x90>
			setTimer2(500);
 80011de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e2:	f000 fa41 	bl	8001668 <setTimer2>
			set_timer = 0;
 80011e6:	4b72      	ldr	r3, [pc, #456]	; (80013b0 <fsm_manual_run+0x248>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
			status = MAN_YELLOW;
 80011ec:	4b6d      	ldr	r3, [pc, #436]	; (80013a4 <fsm_manual_run+0x23c>)
 80011ee:	220e      	movs	r2, #14
 80011f0:	601a      	str	r2, [r3, #0]
			status2 = MAN_YELLOW;
 80011f2:	4b70      	ldr	r3, [pc, #448]	; (80013b4 <fsm_manual_run+0x24c>)
 80011f4:	220e      	movs	r2, #14
 80011f6:	601a      	str	r2, [r3, #0]
		if(isButton2Pressed() == 1){
 80011f8:	f7ff f940 	bl	800047c <isButton2Pressed>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10b      	bne.n	800121a <fsm_manual_run+0xb2>
			set_timer++;
 8001202:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <fsm_manual_run+0x248>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a69      	ldr	r2, [pc, #420]	; (80013b0 <fsm_manual_run+0x248>)
 800120a:	6013      	str	r3, [r2, #0]
			if(set_timer > 99) set_timer = 0;
 800120c:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <fsm_manual_run+0x248>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b63      	cmp	r3, #99	; 0x63
 8001212:	dd02      	ble.n	800121a <fsm_manual_run+0xb2>
 8001214:	4b66      	ldr	r3, [pc, #408]	; (80013b0 <fsm_manual_run+0x248>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed() == 1){
 800121a:	f7ff f941 	bl	80004a0 <isButton3Pressed>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	f040 80b7 	bne.w	8001394 <fsm_manual_run+0x22c>
			timer_red = set_timer*1000;
 8001226:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <fsm_manual_run+0x248>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800122e:	fb02 f303 	mul.w	r3, r2, r3
 8001232:	4a61      	ldr	r2, [pc, #388]	; (80013b8 <fsm_manual_run+0x250>)
 8001234:	6013      	str	r3, [r2, #0]
		break;
 8001236:	e0ad      	b.n	8001394 <fsm_manual_run+0x22c>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8001238:	2201      	movs	r2, #1
 800123a:	2108      	movs	r1, #8
 800123c:	485a      	ldr	r0, [pc, #360]	; (80013a8 <fsm_manual_run+0x240>)
 800123e:	f000 fe9a 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001242:	2201      	movs	r2, #1
 8001244:	2120      	movs	r1, #32
 8001246:	4858      	ldr	r0, [pc, #352]	; (80013a8 <fsm_manual_run+0x240>)
 8001248:	f000 fe95 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 800124c:	2201      	movs	r2, #1
 800124e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001252:	4855      	ldr	r0, [pc, #340]	; (80013a8 <fsm_manual_run+0x240>)
 8001254:	f000 fe8f 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125e:	4852      	ldr	r0, [pc, #328]	; (80013a8 <fsm_manual_run+0x240>)
 8001260:	f000 fe89 	bl	8001f76 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001264:	4b51      	ldr	r3, [pc, #324]	; (80013ac <fsm_manual_run+0x244>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d10c      	bne.n	8001286 <fsm_manual_run+0x11e>
				setTimer2(500);
 800126c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001270:	f000 f9fa 	bl	8001668 <setTimer2>
				HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 8001274:	2110      	movs	r1, #16
 8001276:	484c      	ldr	r0, [pc, #304]	; (80013a8 <fsm_manual_run+0x240>)
 8001278:	f000 fe95 	bl	8001fa6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800127c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001280:	4849      	ldr	r0, [pc, #292]	; (80013a8 <fsm_manual_run+0x240>)
 8001282:	f000 fe90 	bl	8001fa6 <HAL_GPIO_TogglePin>
			if(isButton1Pressed() == 1){
 8001286:	f7ff f8e7 	bl	8000458 <isButton1Pressed>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	d10c      	bne.n	80012aa <fsm_manual_run+0x142>
				set_timer = 0;
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <fsm_manual_run+0x248>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8001296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129a:	f000 f9e5 	bl	8001668 <setTimer2>
				status = MAN_GREEN;
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <fsm_manual_run+0x23c>)
 80012a0:	220d      	movs	r2, #13
 80012a2:	601a      	str	r2, [r3, #0]
				status2 = MAN_GREEN;
 80012a4:	4b43      	ldr	r3, [pc, #268]	; (80013b4 <fsm_manual_run+0x24c>)
 80012a6:	220d      	movs	r2, #13
 80012a8:	601a      	str	r2, [r3, #0]
			if(isButton2Pressed() == 1){
 80012aa:	f7ff f8e7 	bl	800047c <isButton2Pressed>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d10b      	bne.n	80012cc <fsm_manual_run+0x164>
				set_timer++;
 80012b4:	4b3e      	ldr	r3, [pc, #248]	; (80013b0 <fsm_manual_run+0x248>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <fsm_manual_run+0x248>)
 80012bc:	6013      	str	r3, [r2, #0]
				if(set_timer > 99) set_timer = 0;
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <fsm_manual_run+0x248>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b63      	cmp	r3, #99	; 0x63
 80012c4:	dd02      	ble.n	80012cc <fsm_manual_run+0x164>
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <fsm_manual_run+0x248>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
			if(isButton3Pressed() == 1){
 80012cc:	f7ff f8e8 	bl	80004a0 <isButton3Pressed>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d160      	bne.n	8001398 <fsm_manual_run+0x230>
				timer_yellow = set_timer*1000;
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <fsm_manual_run+0x248>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a36      	ldr	r2, [pc, #216]	; (80013bc <fsm_manual_run+0x254>)
 80012e4:	6013      	str	r3, [r2, #0]
			break;
 80012e6:	e057      	b.n	8001398 <fsm_manual_run+0x230>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2108      	movs	r1, #8
 80012ec:	482e      	ldr	r0, [pc, #184]	; (80013a8 <fsm_manual_run+0x240>)
 80012ee:	f000 fe42 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2110      	movs	r1, #16
 80012f6:	482c      	ldr	r0, [pc, #176]	; (80013a8 <fsm_manual_run+0x240>)
 80012f8:	f000 fe3d 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	4829      	ldr	r0, [pc, #164]	; (80013a8 <fsm_manual_run+0x240>)
 8001304:	f000 fe37 	bl	8001f76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <fsm_manual_run+0x240>)
 8001310:	f000 fe31 	bl	8001f76 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8001314:	4b25      	ldr	r3, [pc, #148]	; (80013ac <fsm_manual_run+0x244>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d10c      	bne.n	8001336 <fsm_manual_run+0x1ce>
			setTimer2(500);
 800131c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001320:	f000 f9a2 	bl	8001668 <setTimer2>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001324:	2120      	movs	r1, #32
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <fsm_manual_run+0x240>)
 8001328:	f000 fe3d 	bl	8001fa6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	481d      	ldr	r0, [pc, #116]	; (80013a8 <fsm_manual_run+0x240>)
 8001332:	f000 fe38 	bl	8001fa6 <HAL_GPIO_TogglePin>
		if(isButton1Pressed() == 1){
 8001336:	f7ff f88f 	bl	8000458 <isButton1Pressed>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <fsm_manual_run+0x1ea>
			set_timer = 0;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <fsm_manual_run+0x248>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
			status = INIT;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <fsm_manual_run+0x23c>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <fsm_manual_run+0x24c>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
		if(isButton2Pressed() == 1){
 8001352:	f7ff f893 	bl	800047c <isButton2Pressed>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <fsm_manual_run+0x20c>
			set_timer++;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <fsm_manual_run+0x248>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a13      	ldr	r2, [pc, #76]	; (80013b0 <fsm_manual_run+0x248>)
 8001364:	6013      	str	r3, [r2, #0]
			if(set_timer > 99) set_timer = 0;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <fsm_manual_run+0x248>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b63      	cmp	r3, #99	; 0x63
 800136c:	dd02      	ble.n	8001374 <fsm_manual_run+0x20c>
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <fsm_manual_run+0x248>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
		if(isButton3Pressed() == 1){
 8001374:	f7ff f894 	bl	80004a0 <isButton3Pressed>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d10e      	bne.n	800139c <fsm_manual_run+0x234>
			timer_green= set_timer*1000;
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <fsm_manual_run+0x248>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <fsm_manual_run+0x258>)
 800138c:	6013      	str	r3, [r2, #0]
		break;
 800138e:	e005      	b.n	800139c <fsm_manual_run+0x234>
		break;
 8001390:	bf00      	nop
 8001392:	e004      	b.n	800139e <fsm_manual_run+0x236>
		break;
 8001394:	bf00      	nop
 8001396:	e002      	b.n	800139e <fsm_manual_run+0x236>
			break;
 8001398:	bf00      	nop
 800139a:	e000      	b.n	800139e <fsm_manual_run+0x236>
		break;
 800139c:	bf00      	nop
	}
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000c0 	.word	0x200000c0
 80013a8:	40010800 	.word	0x40010800
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	20000090 	.word	0x20000090
 80013b4:	200000bc 	.word	0x200000bc
 80013b8:	20000034 	.word	0x20000034
 80013bc:	20000038 	.word	0x20000038
 80013c0:	2000003c 	.word	0x2000003c

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f000 fad3 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f831 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d2:	f000 f8b7 	bl	8001544 <MX_GPIO_Init>
  MX_TIM2_Init();
 80013d6:	f000 f869 	bl	80014ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013da:	4812      	ldr	r0, [pc, #72]	; (8001424 <main+0x60>)
 80013dc:	f001 fa34 	bl	8002848 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;	// is status of road 1
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <main+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  status2 = INIT;	// is status of road 2
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <main+0x68>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
  setTimer3(50);	// set timer for each led 7segment
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f000 f955 	bl	800169c <setTimer3>
  int led = 1;		// led 7segment (1,2,3,4)
 80013f2:	2301      	movs	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(timer3_flag == 1){
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <main+0x6c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10d      	bne.n	800141a <main+0x56>
	  setTimer3(250);
 80013fe:	20fa      	movs	r0, #250	; 0xfa
 8001400:	f000 f94c 	bl	800169c <setTimer3>
	  display(led);	// display on 7segment
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff f91d 	bl	8000644 <display>
	  led++;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3301      	adds	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
	  if(led > 4) led = 1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b04      	cmp	r3, #4
 8001414:	dd01      	ble.n	800141a <main+0x56>
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
	  }
	  fsm_automatic_run();  // fsm of normal mode
 800141a:	f7ff fc49 	bl	8000cb0 <fsm_automatic_run>
	  fsm_manual_run();		// fsm of modify time mode
 800141e:	f7ff fea3 	bl	8001168 <fsm_manual_run>
	  if(timer3_flag == 1){
 8001422:	e7e8      	b.n	80013f6 <main+0x32>
 8001424:	200000c4 	.word	0x200000c4
 8001428:	200000c0 	.word	0x200000c0
 800142c:	200000bc 	.word	0x200000bc
 8001430:	200000b0 	.word	0x200000b0

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fdb8 	bl	8002fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145a:	2301      	movs	r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145e:	2310      	movs	r3, #16
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fdb4 	bl	8001fd8 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001476:	f000 f8d7 	bl	8001628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f001 f820 	bl	80024d8 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800149e:	f000 f8c3 	bl	8001628 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3740      	adds	r7, #64	; 0x40
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_TIM2_Init+0x94>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM2_Init+0x94>)
 80014e0:	2209      	movs	r2, #9
 80014e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM2_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_TIM2_Init+0x94>)
 80014f2:	f001 f959 	bl	80027a8 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014fc:	f000 f894 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM2_Init+0x94>)
 800150e:	f001 faef 	bl	8002af0 <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 f886 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_TIM2_Init+0x94>)
 800152a:	f001 fcb7 	bl	8002e9c <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 f878 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200000c4 	.word	0x200000c4

08001544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <MX_GPIO_Init+0xc0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <MX_GPIO_Init+0xc0>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a23      	ldr	r2, [pc, #140]	; (8001604 <MX_GPIO_Init+0xc0>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_GPIO_Init+0xc0>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2138      	movs	r1, #56	; 0x38
 800158c:	481e      	ldr	r0, [pc, #120]	; (8001608 <MX_GPIO_Init+0xc4>)
 800158e:	f000 fcf2 	bl	8001f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001598:	481b      	ldr	r0, [pc, #108]	; (8001608 <MX_GPIO_Init+0xc4>)
 800159a:	f000 fcec 	bl	8001f76 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800159e:	2200      	movs	r2, #0
 80015a0:	217f      	movs	r1, #127	; 0x7f
 80015a2:	481a      	ldr	r0, [pc, #104]	; (800160c <MX_GPIO_Init+0xc8>)
 80015a4:	f000 fce7 	bl	8001f76 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|EN0_Pin
 80015a8:	f641 73f8 	movw	r3, #8184	; 0x1ff8
 80015ac:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2302      	movs	r3, #2
 80015b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4619      	mov	r1, r3
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_GPIO_Init+0xc4>)
 80015c2:	f000 fb47 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015c6:	237f      	movs	r3, #127	; 0x7f
 80015c8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4619      	mov	r1, r3
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <MX_GPIO_Init+0xc8>)
 80015de:	f000 fb39 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80015e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80015e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4619      	mov	r1, r3
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_GPIO_Init+0xc8>)
 80015f8:	f000 fb2c 	bl	8001c54 <HAL_GPIO_Init>

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00

08001610 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	timerRun();
 8001618:	f000 f88e 	bl	8001738 <timerRun>
	getKeyInput();
 800161c:	f7fe ff76 	bl	800050c <getKeyInput>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>
	...

08001634 <setTimer>:
int timer2_flag = 0 ;
int timer3_flag = 0;
int timer4_flag = 0;
int timer5_flag = 0;
int TICK = 10;
void setTimer(int duration){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <setTimer+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	fb92 f3f3 	sdiv	r3, r2, r3
 8001646:	4a06      	ldr	r2, [pc, #24]	; (8001660 <setTimer+0x2c>)
 8001648:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <setTimer+0x30>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000058 	.word	0x20000058
 8001660:	20000094 	.word	0x20000094
 8001664:	200000a8 	.word	0x200000a8

08001668 <setTimer2>:
void setTimer2(int duration){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <setTimer2+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	fb92 f3f3 	sdiv	r3, r2, r3
 800167a:	4a06      	ldr	r2, [pc, #24]	; (8001694 <setTimer2+0x2c>)
 800167c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <setTimer2+0x30>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000058 	.word	0x20000058
 8001694:	20000098 	.word	0x20000098
 8001698:	200000ac 	.word	0x200000ac

0800169c <setTimer3>:
void setTimer3(int duration){
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <setTimer3+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <setTimer3+0x2c>)
 80016b0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <setTimer3+0x30>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000058 	.word	0x20000058
 80016c8:	2000009c 	.word	0x2000009c
 80016cc:	200000b0 	.word	0x200000b0

080016d0 <setTimer4>:
void setTimer4(int duration){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <setTimer4+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e2:	4a06      	ldr	r2, [pc, #24]	; (80016fc <setTimer4+0x2c>)
 80016e4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <setTimer4+0x30>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000058 	.word	0x20000058
 80016fc:	200000a0 	.word	0x200000a0
 8001700:	200000b4 	.word	0x200000b4

08001704 <setTimer5>:
void setTimer5(int duration){
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <setTimer5+0x28>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	fb92 f3f3 	sdiv	r3, r2, r3
 8001716:	4a06      	ldr	r2, [pc, #24]	; (8001730 <setTimer5+0x2c>)
 8001718:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <setTimer5+0x30>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000058 	.word	0x20000058
 8001730:	200000a4 	.word	0x200000a4
 8001734:	200000b8 	.word	0x200000b8

08001738 <timerRun>:
void timerRun(){
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 800173c:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <timerRun+0xac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd0b      	ble.n	800175c <timerRun+0x24>
		timer1_counter--;
 8001744:	4b27      	ldr	r3, [pc, #156]	; (80017e4 <timerRun+0xac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	4a26      	ldr	r2, [pc, #152]	; (80017e4 <timerRun+0xac>)
 800174c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <timerRun+0xac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dc02      	bgt.n	800175c <timerRun+0x24>
			timer1_flag = 1;
 8001756:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <timerRun+0xb0>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <timerRun+0xb4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd0b      	ble.n	800177c <timerRun+0x44>
		timer2_counter--;
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <timerRun+0xb4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	4a20      	ldr	r2, [pc, #128]	; (80017ec <timerRun+0xb4>)
 800176c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <timerRun+0xb4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	dc02      	bgt.n	800177c <timerRun+0x44>
			timer2_flag = 1;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <timerRun+0xb8>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <timerRun+0xbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	dd0b      	ble.n	800179c <timerRun+0x64>
		timer3_counter--;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <timerRun+0xbc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <timerRun+0xbc>)
 800178c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <timerRun+0xbc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	dc02      	bgt.n	800179c <timerRun+0x64>
			timer3_flag = 1;
 8001796:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <timerRun+0xc0>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter>0){
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <timerRun+0xc4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd0b      	ble.n	80017bc <timerRun+0x84>
		timer4_counter--;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <timerRun+0xc4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <timerRun+0xc4>)
 80017ac:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <timerRun+0xc4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	dc02      	bgt.n	80017bc <timerRun+0x84>
			timer4_flag = 1;
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <timerRun+0xc8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter>0){
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <timerRun+0xcc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dd0b      	ble.n	80017dc <timerRun+0xa4>
		timer5_counter--;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <timerRun+0xcc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <timerRun+0xcc>)
 80017cc:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <timerRun+0xcc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dc02      	bgt.n	80017dc <timerRun+0xa4>
			timer5_flag = 1;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <timerRun+0xd0>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000094 	.word	0x20000094
 80017e8:	200000a8 	.word	0x200000a8
 80017ec:	20000098 	.word	0x20000098
 80017f0:	200000ac 	.word	0x200000ac
 80017f4:	2000009c 	.word	0x2000009c
 80017f8:	200000b0 	.word	0x200000b0
 80017fc:	200000a0 	.word	0x200000a0
 8001800:	200000b4 	.word	0x200000b4
 8001804:	200000a4 	.word	0x200000a4
 8001808:	200000b8 	.word	0x200000b8

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_MspInit+0x5c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_MspInit+0x5c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_MspInit+0x60>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <HAL_MspInit+0x60>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d113      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <HAL_TIM_Base_MspInit+0x44>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	201c      	movs	r0, #28
 80018a0:	f000 f9a1 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a4:	201c      	movs	r0, #28
 80018a6:	f000 f9ba 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f87f 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM2_IRQHandler+0x10>)
 800190e:	f000 ffe7 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200000c4 	.word	0x200000c4

0800191c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800194e:	f7ff ffe5 	bl	800191c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001952:	f001 fb0d 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001956:	f7ff fd35 	bl	80013c4 <main>
  bx lr
 800195a:	4770      	bx	lr
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001964:	08003008 	.word	0x08003008
  ldr r2, =_sbss
 8001968:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800196c:	20000110 	.word	0x20000110

08001970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC1_2_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_Init+0x28>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_Init+0x28>)
 800197e:	f043 0310 	orr.w	r3, r3, #16
 8001982:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001984:	2003      	movs	r0, #3
 8001986:	f000 f923 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198a:	200f      	movs	r0, #15
 800198c:	f000 f808 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001990:	f7ff ff3c 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40022000 	.word	0x40022000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f93b 	bl	8001c3a <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f903 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000005c 	.word	0x2000005c
 80019f8:	20000064 	.word	0x20000064
 80019fc:	20000060 	.word	0x20000060

08001a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_IncTick+0x1c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x20>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_IncTick+0x20>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	20000064 	.word	0x20000064
 8001a20:	2000010c 	.word	0x2000010c

08001a24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_GetTick+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	2000010c 	.word	0x2000010c

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4906      	ldr	r1, [pc, #24]	; (8001ad0 <__NVIC_EnableIRQ+0x34>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff90 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff2d 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff42 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff90 	bl	8001b28 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5f 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff35 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b08b      	sub	sp, #44	; 0x2c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e148      	b.n	8001efa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8137 	bne.w	8001ef4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4aa3      	ldr	r2, [pc, #652]	; (8001f18 <HAL_GPIO_Init+0x2c4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05e      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c90:	4aa1      	ldr	r2, [pc, #644]	; (8001f18 <HAL_GPIO_Init+0x2c4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d875      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001c96:	4aa1      	ldr	r2, [pc, #644]	; (8001f1c <HAL_GPIO_Init+0x2c8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d058      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c9c:	4a9f      	ldr	r2, [pc, #636]	; (8001f1c <HAL_GPIO_Init+0x2c8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d86f      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a9f      	ldr	r2, [pc, #636]	; (8001f20 <HAL_GPIO_Init+0x2cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d052      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001ca8:	4a9d      	ldr	r2, [pc, #628]	; (8001f20 <HAL_GPIO_Init+0x2cc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d869      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cae:	4a9d      	ldr	r2, [pc, #628]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04c      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cb4:	4a9b      	ldr	r2, [pc, #620]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d863      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cba:	4a9b      	ldr	r2, [pc, #620]	; (8001f28 <HAL_GPIO_Init+0x2d4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d046      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cc0:	4a99      	ldr	r2, [pc, #612]	; (8001f28 <HAL_GPIO_Init+0x2d4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d85d      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d82a      	bhi.n	8001d20 <HAL_GPIO_Init+0xcc>
 8001cca:	2b12      	cmp	r3, #18
 8001ccc:	d859      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <HAL_GPIO_Init+0x80>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001d4f 	.word	0x08001d4f
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001d3b 	.word	0x08001d3b
 8001ce0:	08001d7d 	.word	0x08001d7d
 8001ce4:	08001d83 	.word	0x08001d83
 8001ce8:	08001d83 	.word	0x08001d83
 8001cec:	08001d83 	.word	0x08001d83
 8001cf0:	08001d83 	.word	0x08001d83
 8001cf4:	08001d83 	.word	0x08001d83
 8001cf8:	08001d83 	.word	0x08001d83
 8001cfc:	08001d83 	.word	0x08001d83
 8001d00:	08001d83 	.word	0x08001d83
 8001d04:	08001d83 	.word	0x08001d83
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d83 	.word	0x08001d83
 8001d10:	08001d83 	.word	0x08001d83
 8001d14:	08001d83 	.word	0x08001d83
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d45 	.word	0x08001d45
 8001d20:	4a82      	ldr	r2, [pc, #520]	; (8001f2c <HAL_GPIO_Init+0x2d8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d26:	e02c      	b.n	8001d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e029      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e024      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e01f      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e01a      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d56:	2304      	movs	r3, #4
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e013      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	611a      	str	r2, [r3, #16]
          break;
 8001d6e:	e009      	b.n	8001d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	615a      	str	r2, [r3, #20]
          break;
 8001d7a:	e003      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          break;
 8001d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	d801      	bhi.n	8001d8e <HAL_GPIO_Init+0x13a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_Init+0x13e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d802      	bhi.n	8001da0 <HAL_GPIO_Init+0x14c>
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x152>
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	3b08      	subs	r3, #8
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	210f      	movs	r1, #15
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8090 	beq.w	8001ef4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd4:	4b56      	ldr	r3, [pc, #344]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a55      	ldr	r2, [pc, #340]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_GPIO_Init+0x2dc>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_GPIO_Init+0x2e0>)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <HAL_GPIO_Init+0x2e4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00d      	beq.n	8001e34 <HAL_GPIO_Init+0x1e0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <HAL_GPIO_Init+0x2e8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <HAL_GPIO_Init+0x1dc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a47      	ldr	r2, [pc, #284]	; (8001f40 <HAL_GPIO_Init+0x2ec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_GPIO_Init+0x1d8>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e004      	b.n	8001e36 <HAL_GPIO_Init+0x1e2>
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e002      	b.n	8001e36 <HAL_GPIO_Init+0x1e2>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_GPIO_Init+0x1e2>
 8001e34:	2300      	movs	r3, #0
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	f002 0203 	and.w	r2, r2, #3
 8001e3c:	0092      	lsls	r2, r2, #2
 8001e3e:	4093      	lsls	r3, r2
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e46:	493b      	ldr	r1, [pc, #236]	; (8001f34 <HAL_GPIO_Init+0x2e0>)
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4937      	ldr	r1, [pc, #220]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4933      	ldr	r1, [pc, #204]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e88:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	492d      	ldr	r1, [pc, #180]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4929      	ldr	r1, [pc, #164]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4923      	ldr	r1, [pc, #140]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	491f      	ldr	r1, [pc, #124]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4919      	ldr	r1, [pc, #100]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60cb      	str	r3, [r1, #12]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4915      	ldr	r1, [pc, #84]	; (8001f44 <HAL_GPIO_Init+0x2f0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	fa22 f303 	lsr.w	r3, r2, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f47f aeaf 	bne.w	8001c68 <HAL_GPIO_Init+0x14>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	372c      	adds	r7, #44	; 0x2c
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	10320000 	.word	0x10320000
 8001f1c:	10310000 	.word	0x10310000
 8001f20:	10220000 	.word	0x10220000
 8001f24:	10210000 	.word	0x10210000
 8001f28:	10120000 	.word	0x10120000
 8001f2c:	10110000 	.word	0x10110000
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40010000 	.word	0x40010000
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	40011000 	.word	0x40011000
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e001      	b.n	8001f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr

08001f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	460b      	mov	r3, r1
 8001f80:	807b      	strh	r3, [r7, #2]
 8001f82:	4613      	mov	r3, r2
 8001f84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f86:	787b      	ldrb	r3, [r7, #1]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8c:	887a      	ldrh	r2, [r7, #2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f92:	e003      	b.n	8001f9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	041a      	lsls	r2, r3, #16
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	611a      	str	r2, [r3, #16]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fb8:	887a      	ldrh	r2, [r7, #2]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	041a      	lsls	r2, r3, #16
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	887b      	ldrh	r3, [r7, #2]
 8001fc6:	400b      	ands	r3, r1
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e26c      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8087 	beq.w	8002106 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff8:	4b92      	ldr	r3, [pc, #584]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b04      	cmp	r3, #4
 8002002:	d00c      	beq.n	800201e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002004:	4b8f      	ldr	r3, [pc, #572]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	2b08      	cmp	r3, #8
 800200e:	d112      	bne.n	8002036 <HAL_RCC_OscConfig+0x5e>
 8002010:	4b8c      	ldr	r3, [pc, #560]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d10b      	bne.n	8002036 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201e:	4b89      	ldr	r3, [pc, #548]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d06c      	beq.n	8002104 <HAL_RCC_OscConfig+0x12c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d168      	bne.n	8002104 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e246      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x76>
 8002040:	4b80      	ldr	r3, [pc, #512]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a7f      	ldr	r2, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e02e      	b.n	80020ac <HAL_RCC_OscConfig+0xd4>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x98>
 8002056:	4b7b      	ldr	r3, [pc, #492]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7a      	ldr	r2, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b78      	ldr	r3, [pc, #480]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a77      	ldr	r2, [pc, #476]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002068:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xd4>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0xbc>
 800207a:	4b72      	ldr	r3, [pc, #456]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a71      	ldr	r2, [pc, #452]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6e      	ldr	r2, [pc, #440]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xd4>
 8002094:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6a      	ldr	r2, [pc, #424]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b68      	ldr	r3, [pc, #416]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a67      	ldr	r2, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fcb6 	bl	8001a24 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff fcb2 	bl	8001a24 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1fa      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xe4>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fca2 	bl	8001a24 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7ff fc9e 	bl	8001a24 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	; 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1e6      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x10c>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d063      	beq.n	80021da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002112:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800211e:	4b49      	ldr	r3, [pc, #292]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b08      	cmp	r3, #8
 8002128:	d11c      	bne.n	8002164 <HAL_RCC_OscConfig+0x18c>
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d116      	bne.n	8002164 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002136:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_RCC_OscConfig+0x176>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d001      	beq.n	800214e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e1ba      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214e:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4939      	ldr	r1, [pc, #228]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	e03a      	b.n	80021da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002172:	f7ff fc57 	bl	8001a24 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217a:	f7ff fc53 	bl	8001a24 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e19b      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4927      	ldr	r1, [pc, #156]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <HAL_RCC_OscConfig+0x270>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff fc36 	bl	8001a24 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fc32 	bl	8001a24 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e17a      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ce:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d03a      	beq.n	800225c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d019      	beq.n	8002222 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_RCC_OscConfig+0x274>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7ff fc16 	bl	8001a24 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fc:	f7ff fc12 	bl	8001a24 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e15a      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220e:	4b0d      	ldr	r3, [pc, #52]	; (8002244 <HAL_RCC_OscConfig+0x26c>)
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800221a:	2001      	movs	r0, #1
 800221c:	f000 faa6 	bl	800276c <RCC_Delay>
 8002220:	e01c      	b.n	800225c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_RCC_OscConfig+0x274>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002228:	f7ff fbfc 	bl	8001a24 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222e:	e00f      	b.n	8002250 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002230:	f7ff fbf8 	bl	8001a24 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d908      	bls.n	8002250 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e140      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	42420000 	.word	0x42420000
 800224c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4b9e      	ldr	r3, [pc, #632]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e9      	bne.n	8002230 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a6 	beq.w	80023b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b97      	ldr	r3, [pc, #604]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10d      	bne.n	8002296 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	4b94      	ldr	r3, [pc, #592]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	4a93      	ldr	r2, [pc, #588]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	61d3      	str	r3, [r2, #28]
 8002286:	4b91      	ldr	r3, [pc, #580]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b8e      	ldr	r3, [pc, #568]	; (80024d0 <HAL_RCC_OscConfig+0x4f8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b8b      	ldr	r3, [pc, #556]	; (80024d0 <HAL_RCC_OscConfig+0x4f8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a8a      	ldr	r2, [pc, #552]	; (80024d0 <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fbb9 	bl	8001a24 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7ff fbb5 	bl	8001a24 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0fd      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x4f8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x312>
 80022dc:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a7a      	ldr	r2, [pc, #488]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e02d      	b.n	8002346 <HAL_RCC_OscConfig+0x36e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x334>
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a75      	ldr	r2, [pc, #468]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a72      	ldr	r2, [pc, #456]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	e01c      	b.n	8002346 <HAL_RCC_OscConfig+0x36e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x356>
 8002314:	4b6d      	ldr	r3, [pc, #436]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a6c      	ldr	r2, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	e00b      	b.n	8002346 <HAL_RCC_OscConfig+0x36e>
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a66      	ldr	r2, [pc, #408]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	4b64      	ldr	r3, [pc, #400]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a63      	ldr	r2, [pc, #396]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d015      	beq.n	800237a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234e:	f7ff fb69 	bl	8001a24 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7ff fb65 	bl	8001a24 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0ab      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCC_OscConfig+0x37e>
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7ff fb53 	bl	8001a24 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff fb4f 	bl	8001a24 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e095      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	4b4c      	ldr	r3, [pc, #304]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b48      	ldr	r3, [pc, #288]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a47      	ldr	r2, [pc, #284]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8081 	beq.w	80024c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d061      	beq.n	8002490 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d146      	bne.n	8002462 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_OscConfig+0x4fc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7ff fb23 	bl	8001a24 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e2:	f7ff fb1f 	bl	8001a24 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e067      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d108      	bne.n	800241c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	492d      	ldr	r1, [pc, #180]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a19      	ldr	r1, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	430b      	orrs	r3, r1
 800242e:	4927      	ldr	r1, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCC_OscConfig+0x4fc>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7ff faf3 	bl	8001a24 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff faef 	bl	8001a24 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e037      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x46a>
 8002460:	e02f      	b.n	80024c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <HAL_RCC_OscConfig+0x4fc>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff fadc 	bl	8001a24 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff fad8 	bl	8001a24 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e020      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x498>
 800248e:	e018      	b.n	80024c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e013      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_OscConfig+0x4f4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	42420060 	.word	0x42420060

080024d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0d0      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b6a      	ldr	r3, [pc, #424]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b67      	ldr	r3, [pc, #412]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	4965      	ldr	r1, [pc, #404]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b63      	ldr	r3, [pc, #396]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0b8      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a58      	ldr	r2, [pc, #352]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a52      	ldr	r2, [pc, #328]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002556:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	4b50      	ldr	r3, [pc, #320]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	494d      	ldr	r1, [pc, #308]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d040      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d115      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e07f      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e073      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4936      	ldr	r1, [pc, #216]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7ff fa2c 	bl	8001a24 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7ff fa28 	bl	8001a24 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	; 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e053      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b27      	ldr	r3, [pc, #156]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d210      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4922      	ldr	r1, [pc, #136]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b20      	ldr	r3, [pc, #128]	; (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e032      	b.n	800268e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	490e      	ldr	r1, [pc, #56]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002666:	f000 f821 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490a      	ldr	r1, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	4a09      	ldr	r2, [pc, #36]	; (80026a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f98a 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40022000 	.word	0x40022000
 800269c:	40021000 	.word	0x40021000
 80026a0:	08002ff0 	.word	0x08002ff0
 80026a4:	2000005c 	.word	0x2000005c
 80026a8:	20000060 	.word	0x20000060

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b490      	push	{r4, r7}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026b2:	4b2a      	ldr	r3, [pc, #168]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b4:	1d3c      	adds	r4, r7, #4
 80026b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026bc:	f240 2301 	movw	r3, #513	; 0x201
 80026c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x40>
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x46>
 80026ea:	e02d      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ee:	623b      	str	r3, [r7, #32]
      break;
 80026f0:	e02d      	b.n	800274e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	0c9b      	lsrs	r3, r3, #18
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026fe:	4413      	add	r3, r2
 8002700:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002704:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d013      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c5b      	lsrs	r3, r3, #17
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800271e:	4413      	add	r3, r2
 8002720:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002724:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb8>)
 800272a:	fb02 f203 	mul.w	r2, r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	e004      	b.n	8002742 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_RCC_GetSysClockFreq+0xbc>)
 800273c:	fb02 f303 	mul.w	r3, r2, r3
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	623b      	str	r3, [r7, #32]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetSysClockFreq+0xb8>)
 800274a:	623b      	str	r3, [r7, #32]
      break;
 800274c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274e:	6a3b      	ldr	r3, [r7, #32]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3728      	adds	r7, #40	; 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc90      	pop	{r4, r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	08002fe0 	.word	0x08002fe0
 8002760:	40021000 	.word	0x40021000
 8002764:	007a1200 	.word	0x007a1200
 8002768:	003d0900 	.word	0x003d0900

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	2000005c 	.word	0x2000005c
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff f84e 	bl	8001870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fa6a 	bl	8002cc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e035      	b.n	80028cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_Base_Start_IT+0x90>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d009      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x4e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d004      	beq.n	8002896 <HAL_TIM_Base_Start_IT+0x4e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_Base_Start_IT+0x94>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d111      	bne.n	80028ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d010      	beq.n	80028ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b8:	e007      	b.n	80028ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0201 	orr.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0202 	mvn.w	r2, #2
 800290c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9b1 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f9a4 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f9b3 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f987 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f97a 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f989 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0208 	mvn.w	r2, #8
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f95d 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f950 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f95f 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0210 	mvn.w	r2, #16
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f933 	bl	8002c8a <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f926 	bl	8002c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f935 	bl	8002c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe fdd6 	bl	8001610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b80      	cmp	r3, #128	; 0x80
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa67 	bl	8002f5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d10e      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d107      	bne.n	8002abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f8f9 	bl	8002cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d107      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0220 	mvn.w	r2, #32
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa32 	bl	8002f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_ConfigClockSource+0x18>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e0b3      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x180>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b40:	d03e      	beq.n	8002bc0 <HAL_TIM_ConfigClockSource+0xd0>
 8002b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b46:	f200 8087 	bhi.w	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4e:	f000 8085 	beq.w	8002c5c <HAL_TIM_ConfigClockSource+0x16c>
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b56:	d87f      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d01a      	beq.n	8002b92 <HAL_TIM_ConfigClockSource+0xa2>
 8002b5c:	2b70      	cmp	r3, #112	; 0x70
 8002b5e:	d87b      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d050      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x116>
 8002b64:	2b60      	cmp	r3, #96	; 0x60
 8002b66:	d877      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b68:	2b50      	cmp	r3, #80	; 0x50
 8002b6a:	d03c      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0xf6>
 8002b6c:	2b50      	cmp	r3, #80	; 0x50
 8002b6e:	d873      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d058      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x136>
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d86f      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	d064      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x156>
 8002b7c:	2b30      	cmp	r3, #48	; 0x30
 8002b7e:	d86b      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d060      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x156>
 8002b84:	2b20      	cmp	r3, #32
 8002b86:	d867      	bhi.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d05c      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x156>
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d05a      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b90:	e062      	b.n	8002c58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f000 f95c 	bl	8002e5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	609a      	str	r2, [r3, #8]
      break;
 8002bbe:	e04e      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f000 f945 	bl	8002e5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002be2:	609a      	str	r2, [r3, #8]
      break;
 8002be4:	e03b      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f8bc 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2150      	movs	r1, #80	; 0x50
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f913 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c04:	e02b      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 f8da 	bl	8002dcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2160      	movs	r1, #96	; 0x60
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f903 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c24:	e01b      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6859      	ldr	r1, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f000 f89c 	bl	8002d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2140      	movs	r1, #64	; 0x40
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f8f3 	bl	8002e2a <TIM_ITRx_SetConfig>
      break;
 8002c44:	e00b      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	f000 f8ea 	bl	8002e2a <TIM_ITRx_SetConfig>
        break;
 8002c56:	e002      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c58:	bf00      	nop
 8002c5a:	e000      	b.n	8002c5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0xa8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_Base_SetConfig+0x28>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0x28>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <TIM_Base_SetConfig+0xac>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d108      	bne.n	8002cfa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <TIM_Base_SetConfig+0xa8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d007      	beq.n	8002d12 <TIM_Base_SetConfig+0x52>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d08:	d003      	beq.n	8002d12 <TIM_Base_SetConfig+0x52>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <TIM_Base_SetConfig+0xac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <TIM_Base_SetConfig+0xa8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40000400 	.word	0x40000400

08002d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 030a 	bic.w	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 0210 	bic.w	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	031b      	lsls	r3, r3, #12
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	621a      	str	r2, [r3, #32]
}
 8002e20:	bf00      	nop
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f043 0307 	orr.w	r3, r3, #7
 8002e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	609a      	str	r2, [r3, #8]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e041      	b.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f00:	d004      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10c      	bne.n	8002f26 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400

08002f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	2600      	movs	r6, #0
 8002f74:	4d0c      	ldr	r5, [pc, #48]	; (8002fa8 <__libc_init_array+0x38>)
 8002f76:	4c0d      	ldr	r4, [pc, #52]	; (8002fac <__libc_init_array+0x3c>)
 8002f78:	1b64      	subs	r4, r4, r5
 8002f7a:	10a4      	asrs	r4, r4, #2
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	f000 f822 	bl	8002fc8 <_init>
 8002f84:	2600      	movs	r6, #0
 8002f86:	4d0a      	ldr	r5, [pc, #40]	; (8002fb0 <__libc_init_array+0x40>)
 8002f88:	4c0a      	ldr	r4, [pc, #40]	; (8002fb4 <__libc_init_array+0x44>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003000 	.word	0x08003000
 8002fac:	08003000 	.word	0x08003000
 8002fb0:	08003000 	.word	0x08003000
 8002fb4:	08003004 	.word	0x08003004

08002fb8 <memset>:
 8002fb8:	4603      	mov	r3, r0
 8002fba:	4402      	add	r2, r0
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d100      	bne.n	8002fc2 <memset+0xa>
 8002fc0:	4770      	bx	lr
 8002fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fc6:	e7f9      	b.n	8002fbc <memset+0x4>

08002fc8 <_init>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr

08002fd4 <_fini>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr
