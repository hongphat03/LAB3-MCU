
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d70  08002d70  00012d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d90  08002d90  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002d90  08002d90  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d90  08002d90  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000068  08002e00  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002e00  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098ac  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1b  00000000  00000000  0002993d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd4  00000000  00000000  0002c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf87  00000000  00000000  000436ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fac  00000000  00000000  0004f633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d15df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000d1634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d58 	.word	0x08002d58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002d58 	.word	0x08002d58

0800014c <display7SEG>:
 *  Created on: Nov 5, 2022
 *      Author: Hong Phat
 */
#include "7segment.h"

 void display7SEG(int counter){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

 	  	  if(counter == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d122      	bne.n	80001a0 <display7SEG+0x54>
 	  		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2101      	movs	r1, #1
 800015e:	48bd      	ldr	r0, [pc, #756]	; (8000454 <display7SEG+0x308>)
 8000160:	f001 fdd1 	bl	8001d06 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2102      	movs	r1, #2
 8000168:	48ba      	ldr	r0, [pc, #744]	; (8000454 <display7SEG+0x308>)
 800016a:	f001 fdcc 	bl	8001d06 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2104      	movs	r1, #4
 8000172:	48b8      	ldr	r0, [pc, #736]	; (8000454 <display7SEG+0x308>)
 8000174:	f001 fdc7 	bl	8001d06 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48b5      	ldr	r0, [pc, #724]	; (8000454 <display7SEG+0x308>)
 800017e:	f001 fdc2 	bl	8001d06 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	48b3      	ldr	r0, [pc, #716]	; (8000454 <display7SEG+0x308>)
 8000188:	f001 fdbd 	bl	8001d06 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2120      	movs	r1, #32
 8000190:	48b0      	ldr	r0, [pc, #704]	; (8000454 <display7SEG+0x308>)
 8000192:	f001 fdb8 	bl	8001d06 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	48ae      	ldr	r0, [pc, #696]	; (8000454 <display7SEG+0x308>)
 800019c:	f001 fdb3 	bl	8001d06 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==1){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d122      	bne.n	80001ec <display7SEG+0xa0>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2102      	movs	r1, #2
 80001aa:	48aa      	ldr	r0, [pc, #680]	; (8000454 <display7SEG+0x308>)
 80001ac:	f001 fdab 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2104      	movs	r1, #4
 80001b4:	48a7      	ldr	r0, [pc, #668]	; (8000454 <display7SEG+0x308>)
 80001b6:	f001 fda6 	bl	8001d06 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2101      	movs	r1, #1
 80001be:	48a5      	ldr	r0, [pc, #660]	; (8000454 <display7SEG+0x308>)
 80001c0:	f001 fda1 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2108      	movs	r1, #8
 80001c8:	48a2      	ldr	r0, [pc, #648]	; (8000454 <display7SEG+0x308>)
 80001ca:	f001 fd9c 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	48a0      	ldr	r0, [pc, #640]	; (8000454 <display7SEG+0x308>)
 80001d4:	f001 fd97 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	489d      	ldr	r0, [pc, #628]	; (8000454 <display7SEG+0x308>)
 80001de:	f001 fd92 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	489b      	ldr	r0, [pc, #620]	; (8000454 <display7SEG+0x308>)
 80001e8:	f001 fd8d 	bl	8001d06 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==2){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d122      	bne.n	8000238 <display7SEG+0xec>
 	 		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4897      	ldr	r0, [pc, #604]	; (8000454 <display7SEG+0x308>)
 80001f8:	f001 fd85 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	4894      	ldr	r0, [pc, #592]	; (8000454 <display7SEG+0x308>)
 8000202:	f001 fd80 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2108      	movs	r1, #8
 800020a:	4892      	ldr	r0, [pc, #584]	; (8000454 <display7SEG+0x308>)
 800020c:	f001 fd7b 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	488f      	ldr	r0, [pc, #572]	; (8000454 <display7SEG+0x308>)
 8000216:	f001 fd76 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	488d      	ldr	r0, [pc, #564]	; (8000454 <display7SEG+0x308>)
 8000220:	f001 fd71 	bl	8001d06 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2104      	movs	r1, #4
 8000228:	488a      	ldr	r0, [pc, #552]	; (8000454 <display7SEG+0x308>)
 800022a:	f001 fd6c 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800022e:	2201      	movs	r2, #1
 8000230:	2120      	movs	r1, #32
 8000232:	4888      	ldr	r0, [pc, #544]	; (8000454 <display7SEG+0x308>)
 8000234:	f001 fd67 	bl	8001d06 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==3){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d122      	bne.n	8000284 <display7SEG+0x138>
 	 		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2101      	movs	r1, #1
 8000242:	4884      	ldr	r0, [pc, #528]	; (8000454 <display7SEG+0x308>)
 8000244:	f001 fd5f 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2102      	movs	r1, #2
 800024c:	4881      	ldr	r0, [pc, #516]	; (8000454 <display7SEG+0x308>)
 800024e:	f001 fd5a 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2104      	movs	r1, #4
 8000256:	487f      	ldr	r0, [pc, #508]	; (8000454 <display7SEG+0x308>)
 8000258:	f001 fd55 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	487c      	ldr	r0, [pc, #496]	; (8000454 <display7SEG+0x308>)
 8000262:	f001 fd50 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	487a      	ldr	r0, [pc, #488]	; (8000454 <display7SEG+0x308>)
 800026c:	f001 fd4b 	bl	8001d06 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2110      	movs	r1, #16
 8000274:	4877      	ldr	r0, [pc, #476]	; (8000454 <display7SEG+0x308>)
 8000276:	f001 fd46 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2120      	movs	r1, #32
 800027e:	4875      	ldr	r0, [pc, #468]	; (8000454 <display7SEG+0x308>)
 8000280:	f001 fd41 	bl	8001d06 <HAL_GPIO_WritePin>

 	 	  }
 	 	 if(counter==4){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b04      	cmp	r3, #4
 8000288:	d122      	bne.n	80002d0 <display7SEG+0x184>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	4871      	ldr	r0, [pc, #452]	; (8000454 <display7SEG+0x308>)
 8000290:	f001 fd39 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2104      	movs	r1, #4
 8000298:	486e      	ldr	r0, [pc, #440]	; (8000454 <display7SEG+0x308>)
 800029a:	f001 fd34 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	486c      	ldr	r0, [pc, #432]	; (8000454 <display7SEG+0x308>)
 80002a4:	f001 fd2f 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2140      	movs	r1, #64	; 0x40
 80002ac:	4869      	ldr	r0, [pc, #420]	; (8000454 <display7SEG+0x308>)
 80002ae:	f001 fd2a 	bl	8001d06 <HAL_GPIO_WritePin>

 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2101      	movs	r1, #1
 80002b6:	4867      	ldr	r0, [pc, #412]	; (8000454 <display7SEG+0x308>)
 80002b8:	f001 fd25 	bl	8001d06 <HAL_GPIO_WritePin>
 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2108      	movs	r1, #8
 80002c0:	4864      	ldr	r0, [pc, #400]	; (8000454 <display7SEG+0x308>)
 80002c2:	f001 fd20 	bl	8001d06 <HAL_GPIO_WritePin>
 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2110      	movs	r1, #16
 80002ca:	4862      	ldr	r0, [pc, #392]	; (8000454 <display7SEG+0x308>)
 80002cc:	f001 fd1b 	bl	8001d06 <HAL_GPIO_WritePin>
 	 	 	  }
 	 	 if(counter==5){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d122      	bne.n	800031c <display7SEG+0x1d0>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2101      	movs	r1, #1
 80002da:	485e      	ldr	r0, [pc, #376]	; (8000454 <display7SEG+0x308>)
 80002dc:	f001 fd13 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2104      	movs	r1, #4
 80002e4:	485b      	ldr	r0, [pc, #364]	; (8000454 <display7SEG+0x308>)
 80002e6:	f001 fd0e 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2108      	movs	r1, #8
 80002ee:	4859      	ldr	r0, [pc, #356]	; (8000454 <display7SEG+0x308>)
 80002f0:	f001 fd09 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2120      	movs	r1, #32
 80002f8:	4856      	ldr	r0, [pc, #344]	; (8000454 <display7SEG+0x308>)
 80002fa:	f001 fd04 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	4854      	ldr	r0, [pc, #336]	; (8000454 <display7SEG+0x308>)
 8000304:	f001 fcff 	bl	8001d06 <HAL_GPIO_WritePin>

 	 			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2102      	movs	r1, #2
 800030c:	4851      	ldr	r0, [pc, #324]	; (8000454 <display7SEG+0x308>)
 800030e:	f001 fcfa 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	484f      	ldr	r0, [pc, #316]	; (8000454 <display7SEG+0x308>)
 8000318:	f001 fcf5 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==6){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b06      	cmp	r3, #6
 8000320:	d122      	bne.n	8000368 <display7SEG+0x21c>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2101      	movs	r1, #1
 8000326:	484b      	ldr	r0, [pc, #300]	; (8000454 <display7SEG+0x308>)
 8000328:	f001 fced 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	4848      	ldr	r0, [pc, #288]	; (8000454 <display7SEG+0x308>)
 8000332:	f001 fce8 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2108      	movs	r1, #8
 800033a:	4846      	ldr	r0, [pc, #280]	; (8000454 <display7SEG+0x308>)
 800033c:	f001 fce3 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2110      	movs	r1, #16
 8000344:	4843      	ldr	r0, [pc, #268]	; (8000454 <display7SEG+0x308>)
 8000346:	f001 fcde 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	4841      	ldr	r0, [pc, #260]	; (8000454 <display7SEG+0x308>)
 8000350:	f001 fcd9 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	483e      	ldr	r0, [pc, #248]	; (8000454 <display7SEG+0x308>)
 800035a:	f001 fcd4 	bl	8001d06 <HAL_GPIO_WritePin>

 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2102      	movs	r1, #2
 8000362:	483c      	ldr	r0, [pc, #240]	; (8000454 <display7SEG+0x308>)
 8000364:	f001 fccf 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==7){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d122      	bne.n	80003b4 <display7SEG+0x268>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4838      	ldr	r0, [pc, #224]	; (8000454 <display7SEG+0x308>)
 8000374:	f001 fcc7 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	4835      	ldr	r0, [pc, #212]	; (8000454 <display7SEG+0x308>)
 800037e:	f001 fcc2 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2104      	movs	r1, #4
 8000386:	4833      	ldr	r0, [pc, #204]	; (8000454 <display7SEG+0x308>)
 8000388:	f001 fcbd 	bl	8001d06 <HAL_GPIO_WritePin>


 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4830      	ldr	r0, [pc, #192]	; (8000454 <display7SEG+0x308>)
 8000392:	f001 fcb8 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2110      	movs	r1, #16
 800039a:	482e      	ldr	r0, [pc, #184]	; (8000454 <display7SEG+0x308>)
 800039c:	f001 fcb3 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	482b      	ldr	r0, [pc, #172]	; (8000454 <display7SEG+0x308>)
 80003a6:	f001 fcae 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2140      	movs	r1, #64	; 0x40
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <display7SEG+0x308>)
 80003b0:	f001 fca9 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter == 8){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b08      	cmp	r3, #8
 80003b8:	d122      	bne.n	8000400 <display7SEG+0x2b4>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	4825      	ldr	r0, [pc, #148]	; (8000454 <display7SEG+0x308>)
 80003c0:	f001 fca1 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4822      	ldr	r0, [pc, #136]	; (8000454 <display7SEG+0x308>)
 80003ca:	f001 fc9c 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2104      	movs	r1, #4
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <display7SEG+0x308>)
 80003d4:	f001 fc97 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <display7SEG+0x308>)
 80003de:	f001 fc92 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2110      	movs	r1, #16
 80003e6:	481b      	ldr	r0, [pc, #108]	; (8000454 <display7SEG+0x308>)
 80003e8:	f001 fc8d 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <display7SEG+0x308>)
 80003f2:	f001 fc88 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <display7SEG+0x308>)
 80003fc:	f001 fc83 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==9){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d122      	bne.n	800044c <display7SEG+0x300>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	4812      	ldr	r0, [pc, #72]	; (8000454 <display7SEG+0x308>)
 800040c:	f001 fc7b 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	480f      	ldr	r0, [pc, #60]	; (8000454 <display7SEG+0x308>)
 8000416:	f001 fc76 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <display7SEG+0x308>)
 8000420:	f001 fc71 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <display7SEG+0x308>)
 800042a:	f001 fc6c 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <display7SEG+0x308>)
 8000434:	f001 fc67 	bl	8001d06 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <display7SEG+0x308>)
 800043e:	f001 fc62 	bl	8001d06 <HAL_GPIO_WritePin>

 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2110      	movs	r1, #16
 8000446:	4803      	ldr	r0, [pc, #12]	; (8000454 <display7SEG+0x308>)
 8000448:	f001 fc5d 	bl	8001d06 <HAL_GPIO_WritePin>
 	 		   }
   }
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40010c00 	.word	0x40010c00

08000458 <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;


int isButton1Pressed(){
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <isButton1Pressed+0x20>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d104      	bne.n	800046e <isButton1Pressed+0x16>
		button1_flag = 0;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <isButton1Pressed+0x20>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
		return 1;
 800046a:	2301      	movs	r3, #1
 800046c:	e000      	b.n	8000470 <isButton1Pressed+0x18>
	}
	return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000084 	.word	0x20000084

0800047c <isButton2Pressed>:
int isButton2Pressed(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <isButton2Pressed+0x20>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d104      	bne.n	8000492 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <isButton2Pressed+0x20>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		return 1;
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <isButton2Pressed+0x18>
	}
	return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000088 	.word	0x20000088

080004a0 <isButton3Pressed>:
int isButton3Pressed(){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <isButton3Pressed+0x20>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d104      	bne.n	80004b6 <isButton3Pressed+0x16>
		button3_flag = 0;
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <isButton3Pressed+0x20>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
		return 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <isButton3Pressed+0x18>
	}
	return 0;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	2000008c 	.word	0x2000008c

080004c4 <subKeyProcess>:
void subKeyProcess(int i){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	//TODO
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	if(i==0){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d103      	bne.n	80004da <subKeyProcess+0x16>
	button1_flag = 1;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <subKeyProcess+0x3c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	601a      	str	r2, [r3, #0]
		button2_flag = 1;
	}
	else if(i == 2){
		button3_flag = 1;
	}
}
 80004d8:	e00c      	b.n	80004f4 <subKeyProcess+0x30>
	else if(i==1){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d103      	bne.n	80004e8 <subKeyProcess+0x24>
		button2_flag = 1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <subKeyProcess+0x40>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	e005      	b.n	80004f4 <subKeyProcess+0x30>
	else if(i == 2){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d102      	bne.n	80004f4 <subKeyProcess+0x30>
		button3_flag = 1;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <subKeyProcess+0x44>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000084 	.word	0x20000084
 8000504:	20000088 	.word	0x20000088
 8000508:	2000008c 	.word	0x2000008c

0800050c <getKeyInput>:

void getKeyInput(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  for(int i=0;i<3;i++){
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e07f      	b.n	8000618 <getKeyInput+0x10c>
	  KeyReg0[i] = KeyReg1[i];
 8000518:	4a44      	ldr	r2, [pc, #272]	; (800062c <getKeyInput+0x120>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000520:	4943      	ldr	r1, [pc, #268]	; (8000630 <getKeyInput+0x124>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 8000528:	4a42      	ldr	r2, [pc, #264]	; (8000634 <getKeyInput+0x128>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000530:	493e      	ldr	r1, [pc, #248]	; (800062c <getKeyInput+0x120>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  if( i== 0){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10a      	bne.n	8000554 <getKeyInput+0x48>
	  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	483d      	ldr	r0, [pc, #244]	; (8000638 <getKeyInput+0x12c>)
 8000542:	f001 fbc9 	bl	8001cd8 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	4619      	mov	r1, r3
 800054a:	4a3a      	ldr	r2, [pc, #232]	; (8000634 <getKeyInput+0x128>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000552:	e01c      	b.n	800058e <getKeyInput+0x82>
	  }
	  else if(i==1){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10b      	bne.n	8000572 <getKeyInput+0x66>
		  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4836      	ldr	r0, [pc, #216]	; (8000638 <getKeyInput+0x12c>)
 8000560:	f001 fbba 	bl	8001cd8 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	4a32      	ldr	r2, [pc, #200]	; (8000634 <getKeyInput+0x128>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000570:	e00d      	b.n	800058e <getKeyInput+0x82>
	  }
	  else if(i==2){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d10a      	bne.n	800058e <getKeyInput+0x82>
		  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	482e      	ldr	r0, [pc, #184]	; (8000638 <getKeyInput+0x12c>)
 800057e:	f001 fbab 	bl	8001cd8 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	4619      	mov	r1, r3
 8000586:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <getKeyInput+0x128>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800058e:	4a27      	ldr	r2, [pc, #156]	; (800062c <getKeyInput+0x120>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000596:	4926      	ldr	r1, [pc, #152]	; (8000630 <getKeyInput+0x124>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d137      	bne.n	8000612 <getKeyInput+0x106>
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <getKeyInput+0x120>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005aa:	4922      	ldr	r1, [pc, #136]	; (8000634 <getKeyInput+0x128>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d12d      	bne.n	8000612 <getKeyInput+0x106>
		  if (KeyReg2[i] != KeyReg3[i]){
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <getKeyInput+0x128>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005be:	491f      	ldr	r1, [pc, #124]	; (800063c <getKeyInput+0x130>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d015      	beq.n	80005f6 <getKeyInput+0xea>
			  KeyReg3[i] = KeyReg2[i];
 80005ca:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <getKeyInput+0x128>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d2:	491a      	ldr	r1, [pc, #104]	; (800063c <getKeyInput+0x130>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <getKeyInput+0x128>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d115      	bne.n	8000612 <getKeyInput+0x106>
				TimeOutForKeyPress = 3000;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <getKeyInput+0x134>)
 80005e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005ec:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ff68 	bl	80004c4 <subKeyProcess>
 80005f4:	e00d      	b.n	8000612 <getKeyInput+0x106>
			  }
		}else{
		   TimeOutForKeyPress --;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <getKeyInput+0x134>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <getKeyInput+0x134>)
 80005fe:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0){
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <getKeyInput+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d104      	bne.n	8000612 <getKeyInput+0x106>
			  KeyReg3[i] = NORMAL_STATE;
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <getKeyInput+0x130>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2101      	movs	r1, #1
 800060e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<3;i++){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b02      	cmp	r3, #2
 800061c:	f77f af7c 	ble.w	8000518 <getKeyInput+0xc>
			}
		}
	  }
	}
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000000 	.word	0x20000000
 8000634:	20000018 	.word	0x20000018
 8000638:	40010c00 	.word	0x40010c00
 800063c:	20000024 	.word	0x20000024
 8000640:	20000030 	.word	0x20000030

08000644 <display>:
 *
 *  Created on: Nov 9, 2022
 *      Author: Hong Phat
 */
#include "display.h"
void display(int mode){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3b01      	subs	r3, #1
 8000650:	2b03      	cmp	r3, #3
 8000652:	f200 820a 	bhi.w	8000a6a <display+0x426>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <display+0x18>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	0800066d 	.word	0x0800066d
 8000660:	08000753 	.word	0x08000753
 8000664:	08000857 	.word	0x08000857
 8000668:	0800093d 	.word	0x0800093d
	switch(mode){
	case 1:
		switch(status){
 800066c:	4bb9      	ldr	r3, [pc, #740]	; (8000954 <display+0x310>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d04a      	beq.n	800070a <display+0xc6>
 8000674:	2b03      	cmp	r3, #3
 8000676:	dc6a      	bgt.n	800074e <display+0x10a>
 8000678:	2b01      	cmp	r3, #1
 800067a:	d002      	beq.n	8000682 <display+0x3e>
 800067c:	2b02      	cmp	r3, #2
 800067e:	d022      	beq.n	80006c6 <display+0x82>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
					display7SEG(timergreen_counter/10);
				break;
			default:
				break;
 8000680:	e065      	b.n	800074e <display+0x10a>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000682:	2201      	movs	r2, #1
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	48b4      	ldr	r0, [pc, #720]	; (8000958 <display+0x314>)
 8000688:	f001 fb3d 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000692:	48b1      	ldr	r0, [pc, #708]	; (8000958 <display+0x314>)
 8000694:	f001 fb37 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	48ae      	ldr	r0, [pc, #696]	; (8000958 <display+0x314>)
 80006a0:	f001 fb31 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	48ab      	ldr	r0, [pc, #684]	; (8000958 <display+0x314>)
 80006aa:	f001 fb2c 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timerred_counter/10);
 80006ae:	4bab      	ldr	r3, [pc, #684]	; (800095c <display+0x318>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4aab      	ldr	r2, [pc, #684]	; (8000960 <display+0x31c>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1092      	asrs	r2, r2, #2
 80006ba:	17db      	asrs	r3, r3, #31
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fd44 	bl	800014c <display7SEG>
				break;
 80006c4:	e044      	b.n	8000750 <display+0x10c>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006cc:	48a2      	ldr	r0, [pc, #648]	; (8000958 <display+0x314>)
 80006ce:	f001 fb1a 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d8:	489f      	ldr	r0, [pc, #636]	; (8000958 <display+0x314>)
 80006da:	f001 fb14 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	489d      	ldr	r0, [pc, #628]	; (8000958 <display+0x314>)
 80006e4:	f001 fb0f 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	489a      	ldr	r0, [pc, #616]	; (8000958 <display+0x314>)
 80006ee:	f001 fb0a 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timeryellow_counter/10);
 80006f2:	4b9c      	ldr	r3, [pc, #624]	; (8000964 <display+0x320>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a9a      	ldr	r2, [pc, #616]	; (8000960 <display+0x31c>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	1092      	asrs	r2, r2, #2
 80006fe:	17db      	asrs	r3, r3, #31
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fd22 	bl	800014c <display7SEG>
				break;
 8000708:	e022      	b.n	8000750 <display+0x10c>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800070a:	2201      	movs	r2, #1
 800070c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000710:	4891      	ldr	r0, [pc, #580]	; (8000958 <display+0x314>)
 8000712:	f001 faf8 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071c:	488e      	ldr	r0, [pc, #568]	; (8000958 <display+0x314>)
 800071e:	f001 faf2 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000722:	2201      	movs	r2, #1
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	488c      	ldr	r0, [pc, #560]	; (8000958 <display+0x314>)
 8000728:	f001 faed 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	4889      	ldr	r0, [pc, #548]	; (8000958 <display+0x314>)
 8000732:	f001 fae8 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timergreen_counter/10);
 8000736:	4b8c      	ldr	r3, [pc, #560]	; (8000968 <display+0x324>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a89      	ldr	r2, [pc, #548]	; (8000960 <display+0x31c>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1092      	asrs	r2, r2, #2
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd00 	bl	800014c <display7SEG>
				break;
 800074c:	e000      	b.n	8000750 <display+0x10c>
				break;
 800074e:	bf00      	nop
		}
		break;
 8000750:	e18c      	b.n	8000a6c <display+0x428>
	case 2:
		switch(status){
 8000752:	4b80      	ldr	r3, [pc, #512]	; (8000954 <display+0x310>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d054      	beq.n	8000804 <display+0x1c0>
 800075a:	2b03      	cmp	r3, #3
 800075c:	dc79      	bgt.n	8000852 <display+0x20e>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d002      	beq.n	8000768 <display+0x124>
 8000762:	2b02      	cmp	r3, #2
 8000764:	d027      	beq.n	80007b6 <display+0x172>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
					display7SEG(timergreen_counter%10);
				break;
			default:
				break;
 8000766:	e074      	b.n	8000852 <display+0x20e>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000768:	2201      	movs	r2, #1
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	487a      	ldr	r0, [pc, #488]	; (8000958 <display+0x314>)
 800076e:	f001 faca 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000772:	2201      	movs	r2, #1
 8000774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000778:	4877      	ldr	r0, [pc, #476]	; (8000958 <display+0x314>)
 800077a:	f001 fac4 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000784:	4874      	ldr	r0, [pc, #464]	; (8000958 <display+0x314>)
 8000786:	f001 fabe 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	4872      	ldr	r0, [pc, #456]	; (8000958 <display+0x314>)
 8000790:	f001 fab9 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timerred_counter%10);
 8000794:	4b71      	ldr	r3, [pc, #452]	; (800095c <display+0x318>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4b71      	ldr	r3, [pc, #452]	; (8000960 <display+0x31c>)
 800079a:	fb83 1302 	smull	r1, r3, r3, r2
 800079e:	1099      	asrs	r1, r3, #2
 80007a0:	17d3      	asrs	r3, r2, #31
 80007a2:	1ac9      	subs	r1, r1, r3
 80007a4:	460b      	mov	r3, r1
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	440b      	add	r3, r1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	1ad1      	subs	r1, r2, r3
 80007ae:	4608      	mov	r0, r1
 80007b0:	f7ff fccc 	bl	800014c <display7SEG>
				break;
 80007b4:	e04e      	b.n	8000854 <display+0x210>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007bc:	4866      	ldr	r0, [pc, #408]	; (8000958 <display+0x314>)
 80007be:	f001 faa2 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	4863      	ldr	r0, [pc, #396]	; (8000958 <display+0x314>)
 80007ca:	f001 fa9c 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2140      	movs	r1, #64	; 0x40
 80007d2:	4861      	ldr	r0, [pc, #388]	; (8000958 <display+0x314>)
 80007d4:	f001 fa97 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2180      	movs	r1, #128	; 0x80
 80007dc:	485e      	ldr	r0, [pc, #376]	; (8000958 <display+0x314>)
 80007de:	f001 fa92 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timeryellow_counter%10);
 80007e2:	4b60      	ldr	r3, [pc, #384]	; (8000964 <display+0x320>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <display+0x31c>)
 80007e8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ec:	1099      	asrs	r1, r3, #2
 80007ee:	17d3      	asrs	r3, r2, #31
 80007f0:	1ac9      	subs	r1, r1, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	440b      	add	r3, r1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	1ad1      	subs	r1, r2, r3
 80007fc:	4608      	mov	r0, r1
 80007fe:	f7ff fca5 	bl	800014c <display7SEG>
				break;
 8000802:	e027      	b.n	8000854 <display+0x210>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	4853      	ldr	r0, [pc, #332]	; (8000958 <display+0x314>)
 800080c:	f001 fa7b 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000816:	4850      	ldr	r0, [pc, #320]	; (8000958 <display+0x314>)
 8000818:	f001 fa75 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 800081c:	2201      	movs	r2, #1
 800081e:	2140      	movs	r1, #64	; 0x40
 8000820:	484d      	ldr	r0, [pc, #308]	; (8000958 <display+0x314>)
 8000822:	f001 fa70 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000826:	2200      	movs	r2, #0
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	484b      	ldr	r0, [pc, #300]	; (8000958 <display+0x314>)
 800082c:	f001 fa6b 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timergreen_counter%10);
 8000830:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <display+0x324>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <display+0x31c>)
 8000836:	fb83 1302 	smull	r1, r3, r3, r2
 800083a:	1099      	asrs	r1, r3, #2
 800083c:	17d3      	asrs	r3, r2, #31
 800083e:	1ac9      	subs	r1, r1, r3
 8000840:	460b      	mov	r3, r1
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	440b      	add	r3, r1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	1ad1      	subs	r1, r2, r3
 800084a:	4608      	mov	r0, r1
 800084c:	f7ff fc7e 	bl	800014c <display7SEG>
				break;
 8000850:	e000      	b.n	8000854 <display+0x210>
				break;
 8000852:	bf00      	nop
		}
		break;
 8000854:	e10a      	b.n	8000a6c <display+0x428>
	case 3:
		switch(status2){
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <display+0x328>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d04a      	beq.n	80008f4 <display+0x2b0>
 800085e:	2b03      	cmp	r3, #3
 8000860:	dc6a      	bgt.n	8000938 <display+0x2f4>
 8000862:	2b01      	cmp	r3, #1
 8000864:	d002      	beq.n	800086c <display+0x228>
 8000866:	2b02      	cmp	r3, #2
 8000868:	d022      	beq.n	80008b0 <display+0x26c>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
					display7SEG(timergreen2_counter/10);
				break;
			default:
				break;
 800086a:	e065      	b.n	8000938 <display+0x2f4>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 800086c:	2201      	movs	r2, #1
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	4839      	ldr	r0, [pc, #228]	; (8000958 <display+0x314>)
 8000872:	f001 fa48 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087c:	4836      	ldr	r0, [pc, #216]	; (8000958 <display+0x314>)
 800087e:	f001 fa42 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000888:	4833      	ldr	r0, [pc, #204]	; (8000958 <display+0x314>)
 800088a:	f001 fa3c 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 800088e:	2201      	movs	r2, #1
 8000890:	2140      	movs	r1, #64	; 0x40
 8000892:	4831      	ldr	r0, [pc, #196]	; (8000958 <display+0x314>)
 8000894:	f001 fa37 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timerred2_counter/10);
 8000898:	4b35      	ldr	r3, [pc, #212]	; (8000970 <display+0x32c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a30      	ldr	r2, [pc, #192]	; (8000960 <display+0x31c>)
 800089e:	fb82 1203 	smull	r1, r2, r2, r3
 80008a2:	1092      	asrs	r2, r2, #2
 80008a4:	17db      	asrs	r3, r3, #31
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fc4f 	bl	800014c <display7SEG>
				break;
 80008ae:	e044      	b.n	800093a <display+0x2f6>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b6:	4828      	ldr	r0, [pc, #160]	; (8000958 <display+0x314>)
 80008b8:	f001 fa25 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4825      	ldr	r0, [pc, #148]	; (8000958 <display+0x314>)
 80008c4:	f001 fa1f 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2180      	movs	r1, #128	; 0x80
 80008cc:	4822      	ldr	r0, [pc, #136]	; (8000958 <display+0x314>)
 80008ce:	f001 fa1a 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <display+0x314>)
 80008d8:	f001 fa15 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timeryellow2_counter/10);
 80008dc:	4b25      	ldr	r3, [pc, #148]	; (8000974 <display+0x330>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a1f      	ldr	r2, [pc, #124]	; (8000960 <display+0x31c>)
 80008e2:	fb82 1203 	smull	r1, r2, r2, r3
 80008e6:	1092      	asrs	r2, r2, #2
 80008e8:	17db      	asrs	r3, r3, #31
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc2d 	bl	800014c <display7SEG>
				break;
 80008f2:	e022      	b.n	800093a <display+0x2f6>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <display+0x314>)
 80008fc:	f001 fa03 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <display+0x314>)
 8000908:	f001 f9fd 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 800090c:	2201      	movs	r2, #1
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <display+0x314>)
 8000912:	f001 f9f8 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000916:	2201      	movs	r2, #1
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <display+0x314>)
 800091c:	f001 f9f3 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timergreen2_counter/10);
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <display+0x334>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <display+0x31c>)
 8000926:	fb82 1203 	smull	r1, r2, r2, r3
 800092a:	1092      	asrs	r2, r2, #2
 800092c:	17db      	asrs	r3, r3, #31
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fc0b 	bl	800014c <display7SEG>
				break;
 8000936:	e000      	b.n	800093a <display+0x2f6>
				break;
 8000938:	bf00      	nop
		}
		break;
 800093a:	e097      	b.n	8000a6c <display+0x428>
	case 4:
		switch(status2){
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <display+0x328>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d069      	beq.n	8000a18 <display+0x3d4>
 8000944:	2b03      	cmp	r3, #3
 8000946:	f300 808e 	bgt.w	8000a66 <display+0x422>
 800094a:	2b01      	cmp	r3, #1
 800094c:	d016      	beq.n	800097c <display+0x338>
 800094e:	2b02      	cmp	r3, #2
 8000950:	d03b      	beq.n	80009ca <display+0x386>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
					display7SEG(timergreen2_counter%10);
				break;
			default:
				break;
 8000952:	e088      	b.n	8000a66 <display+0x422>
 8000954:	200000c0 	.word	0x200000c0
 8000958:	40010800 	.word	0x40010800
 800095c:	20000040 	.word	0x20000040
 8000960:	66666667 	.word	0x66666667
 8000964:	20000044 	.word	0x20000044
 8000968:	20000048 	.word	0x20000048
 800096c:	200000bc 	.word	0x200000bc
 8000970:	2000004c 	.word	0x2000004c
 8000974:	20000050 	.word	0x20000050
 8000978:	20000054 	.word	0x20000054
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	483c      	ldr	r0, [pc, #240]	; (8000a74 <display+0x430>)
 8000982:	f001 f9c0 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098c:	4839      	ldr	r0, [pc, #228]	; (8000a74 <display+0x430>)
 800098e:	f001 f9ba 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	4836      	ldr	r0, [pc, #216]	; (8000a74 <display+0x430>)
 800099a:	f001 f9b4 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 800099e:	2201      	movs	r2, #1
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	4834      	ldr	r0, [pc, #208]	; (8000a74 <display+0x430>)
 80009a4:	f001 f9af 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timerred2_counter%10);
 80009a8:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <display+0x434>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b33      	ldr	r3, [pc, #204]	; (8000a7c <display+0x438>)
 80009ae:	fb83 1302 	smull	r1, r3, r3, r2
 80009b2:	1099      	asrs	r1, r3, #2
 80009b4:	17d3      	asrs	r3, r2, #31
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	1ad1      	subs	r1, r2, r3
 80009c2:	4608      	mov	r0, r1
 80009c4:	f7ff fbc2 	bl	800014c <display7SEG>
				break;
 80009c8:	e04e      	b.n	8000a68 <display+0x424>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80009ca:	2201      	movs	r2, #1
 80009cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d0:	4828      	ldr	r0, [pc, #160]	; (8000a74 <display+0x430>)
 80009d2:	f001 f998 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	4825      	ldr	r0, [pc, #148]	; (8000a74 <display+0x430>)
 80009de:	f001 f992 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4823      	ldr	r0, [pc, #140]	; (8000a74 <display+0x430>)
 80009e8:	f001 f98d 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4820      	ldr	r0, [pc, #128]	; (8000a74 <display+0x430>)
 80009f2:	f001 f988 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timeryellow2_counter%10);
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <display+0x43c>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <display+0x438>)
 80009fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000a00:	1099      	asrs	r1, r3, #2
 8000a02:	17d3      	asrs	r3, r2, #31
 8000a04:	1ac9      	subs	r1, r1, r3
 8000a06:	460b      	mov	r3, r1
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	1ad1      	subs	r1, r2, r3
 8000a10:	4608      	mov	r0, r1
 8000a12:	f7ff fb9b 	bl	800014c <display7SEG>
				break;
 8000a16:	e027      	b.n	8000a68 <display+0x424>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <display+0x430>)
 8000a20:	f001 f971 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <display+0x430>)
 8000a2c:	f001 f96b 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	480f      	ldr	r0, [pc, #60]	; (8000a74 <display+0x430>)
 8000a36:	f001 f966 	bl	8001d06 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <display+0x430>)
 8000a40:	f001 f961 	bl	8001d06 <HAL_GPIO_WritePin>
					display7SEG(timergreen2_counter%10);
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <display+0x440>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <display+0x438>)
 8000a4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000a4e:	1099      	asrs	r1, r3, #2
 8000a50:	17d3      	asrs	r3, r2, #31
 8000a52:	1ac9      	subs	r1, r1, r3
 8000a54:	460b      	mov	r3, r1
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	440b      	add	r3, r1
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	1ad1      	subs	r1, r2, r3
 8000a5e:	4608      	mov	r0, r1
 8000a60:	f7ff fb74 	bl	800014c <display7SEG>
				break;
 8000a64:	e000      	b.n	8000a68 <display+0x424>
				break;
 8000a66:	bf00      	nop
		}
		break;
 8000a68:	e000      	b.n	8000a6c <display+0x428>
		default:
			break;
 8000a6a:	bf00      	nop
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40010800 	.word	0x40010800
 8000a78:	2000004c 	.word	0x2000004c
 8000a7c:	66666667 	.word	0x66666667
 8000a80:	20000050 	.word	0x20000050
 8000a84:	20000054 	.word	0x20000054

08000a88 <fsm_automatic_run>:
//			break;
//
//		}
//
//}
void fsm_automatic_run(){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	switch(status){
 8000a8c:	4bb4      	ldr	r3, [pc, #720]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	f200 812a 	bhi.w	8000cea <fsm_automatic_run+0x262>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <fsm_automatic_run+0x14>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000aad 	.word	0x08000aad
 8000aa0:	08000af9 	.word	0x08000af9
 8000aa4:	08000b9d 	.word	0x08000b9d
 8000aa8:	08000c3f 	.word	0x08000c3f
		case INIT:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2108      	movs	r1, #8
 8000ab0:	48ac      	ldr	r0, [pc, #688]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000ab2:	f001 f928 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2110      	movs	r1, #16
 8000aba:	48aa      	ldr	r0, [pc, #680]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000abc:	f001 f923 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	48a7      	ldr	r0, [pc, #668]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000ac6:	f001 f91e 	bl	8001d06 <HAL_GPIO_WritePin>
			status = AUTO_RED;
 8000aca:	4ba5      	ldr	r3, [pc, #660]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]
			setTimer2(1000);
 8000ad0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad4:	f000 fc90 	bl	80013f8 <setTimer2>
			timerred_counter = timer_red/1000;
 8000ad8:	4ba3      	ldr	r3, [pc, #652]	; (8000d68 <fsm_automatic_run+0x2e0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4aa3      	ldr	r2, [pc, #652]	; (8000d6c <fsm_automatic_run+0x2e4>)
 8000ade:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae2:	1192      	asrs	r2, r2, #6
 8000ae4:	17db      	asrs	r3, r3, #31
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4aa1      	ldr	r2, [pc, #644]	; (8000d70 <fsm_automatic_run+0x2e8>)
 8000aea:	6013      	str	r3, [r2, #0]
			setTimer(timer_red);
 8000aec:	4b9e      	ldr	r3, [pc, #632]	; (8000d68 <fsm_automatic_run+0x2e0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fc67 	bl	80013c4 <setTimer>
			break;
 8000af6:	e0f8      	b.n	8000cea <fsm_automatic_run+0x262>
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2108      	movs	r1, #8
 8000afc:	4899      	ldr	r0, [pc, #612]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000afe:	f001 f902 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2110      	movs	r1, #16
 8000b06:	4897      	ldr	r0, [pc, #604]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000b08:	f001 f8fd 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2120      	movs	r1, #32
 8000b10:	4894      	ldr	r0, [pc, #592]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000b12:	f001 f8f8 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000b16:	4b97      	ldr	r3, [pc, #604]	; (8000d74 <fsm_automatic_run+0x2ec>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d108      	bne.n	8000b30 <fsm_automatic_run+0xa8>
				setTimer2(1000);
 8000b1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b22:	f000 fc69 	bl	80013f8 <setTimer2>
				timerred_counter--;
 8000b26:	4b92      	ldr	r3, [pc, #584]	; (8000d70 <fsm_automatic_run+0x2e8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	4a90      	ldr	r2, [pc, #576]	; (8000d70 <fsm_automatic_run+0x2e8>)
 8000b2e:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000b30:	4b91      	ldr	r3, [pc, #580]	; (8000d78 <fsm_automatic_run+0x2f0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d115      	bne.n	8000b64 <fsm_automatic_run+0xdc>
				setTimer2(1000);
 8000b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3c:	f000 fc5c 	bl	80013f8 <setTimer2>
				timergreen_counter = timer_green/1000;
 8000b40:	4b8e      	ldr	r3, [pc, #568]	; (8000d7c <fsm_automatic_run+0x2f4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a89      	ldr	r2, [pc, #548]	; (8000d6c <fsm_automatic_run+0x2e4>)
 8000b46:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4a:	1192      	asrs	r2, r2, #6
 8000b4c:	17db      	asrs	r3, r3, #31
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	4a8b      	ldr	r2, [pc, #556]	; (8000d80 <fsm_automatic_run+0x2f8>)
 8000b52:	6013      	str	r3, [r2, #0]
				setTimer(timer_green);
 8000b54:	4b89      	ldr	r3, [pc, #548]	; (8000d7c <fsm_automatic_run+0x2f4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fc33 	bl	80013c4 <setTimer>
				status = AUTO_GREEN;
 8000b5e:	4b80      	ldr	r3, [pc, #512]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1){
 8000b64:	f7ff fc78 	bl	8000458 <isButton1Pressed>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	f040 80b8 	bne.w	8000ce0 <fsm_automatic_run+0x258>
				status = MAN_RED;
 8000b70:	4b7b      	ldr	r3, [pc, #492]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <fsm_automatic_run+0x2fc>)
 8000b78:	220c      	movs	r2, #12
 8000b7a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4878      	ldr	r0, [pc, #480]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000b82:	f001 f8c0 	bl	8001d06 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000b86:	220a      	movs	r2, #10
 8000b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8c:	4875      	ldr	r0, [pc, #468]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000b8e:	f001 f8ba 	bl	8001d06 <HAL_GPIO_WritePin>
				setTimer2(500);
 8000b92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b96:	f000 fc2f 	bl	80013f8 <setTimer2>
			}
			break;
 8000b9a:	e0a1      	b.n	8000ce0 <fsm_automatic_run+0x258>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	4870      	ldr	r0, [pc, #448]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000ba2:	f001 f8b0 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	486e      	ldr	r0, [pc, #440]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000bac:	f001 f8ab 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	486b      	ldr	r0, [pc, #428]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000bb6:	f001 f8a6 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000bba:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <fsm_automatic_run+0x2ec>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d108      	bne.n	8000bd4 <fsm_automatic_run+0x14c>
				setTimer2(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc6:	f000 fc17 	bl	80013f8 <setTimer2>
				timeryellow_counter--;
 8000bca:	4b6f      	ldr	r3, [pc, #444]	; (8000d88 <fsm_automatic_run+0x300>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4a6d      	ldr	r2, [pc, #436]	; (8000d88 <fsm_automatic_run+0x300>)
 8000bd2:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000bd4:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <fsm_automatic_run+0x2f0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d115      	bne.n	8000c08 <fsm_automatic_run+0x180>
				status = AUTO_RED;
 8000bdc:	4b60      	ldr	r3, [pc, #384]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be6:	f000 fc07 	bl	80013f8 <setTimer2>
				timerred_counter = timer_red/1000;
 8000bea:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <fsm_automatic_run+0x2e0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a5f      	ldr	r2, [pc, #380]	; (8000d6c <fsm_automatic_run+0x2e4>)
 8000bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf4:	1192      	asrs	r2, r2, #6
 8000bf6:	17db      	asrs	r3, r3, #31
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	4a5d      	ldr	r2, [pc, #372]	; (8000d70 <fsm_automatic_run+0x2e8>)
 8000bfc:	6013      	str	r3, [r2, #0]
				setTimer(timer_red);
 8000bfe:	4b5a      	ldr	r3, [pc, #360]	; (8000d68 <fsm_automatic_run+0x2e0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 fbde 	bl	80013c4 <setTimer>
			}
			if(isButton1Pressed() == 1){
 8000c08:	f7ff fc26 	bl	8000458 <isButton1Pressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d168      	bne.n	8000ce4 <fsm_automatic_run+0x25c>
				status = MAN_RED;
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000c14:	220c      	movs	r2, #12
 8000c16:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000c18:	4b5a      	ldr	r3, [pc, #360]	; (8000d84 <fsm_automatic_run+0x2fc>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2108      	movs	r1, #8
 8000c22:	4850      	ldr	r0, [pc, #320]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000c24:	f001 f86f 	bl	8001d06 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000c28:	220a      	movs	r2, #10
 8000c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2e:	484d      	ldr	r0, [pc, #308]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000c30:	f001 f869 	bl	8001d06 <HAL_GPIO_WritePin>
				setTimer2(500);
 8000c34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c38:	f000 fbde 	bl	80013f8 <setTimer2>
			}
			break;
 8000c3c:	e052      	b.n	8000ce4 <fsm_automatic_run+0x25c>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2108      	movs	r1, #8
 8000c42:	4848      	ldr	r0, [pc, #288]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000c44:	f001 f85f 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4845      	ldr	r0, [pc, #276]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000c4e:	f001 f85a 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2120      	movs	r1, #32
 8000c56:	4843      	ldr	r0, [pc, #268]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000c58:	f001 f855 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000c5c:	4b45      	ldr	r3, [pc, #276]	; (8000d74 <fsm_automatic_run+0x2ec>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d108      	bne.n	8000c76 <fsm_automatic_run+0x1ee>
				setTimer2(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f000 fbc6 	bl	80013f8 <setTimer2>
				timergreen_counter--;
 8000c6c:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <fsm_automatic_run+0x2f8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a43      	ldr	r2, [pc, #268]	; (8000d80 <fsm_automatic_run+0x2f8>)
 8000c74:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000c76:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <fsm_automatic_run+0x2f0>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d115      	bne.n	8000caa <fsm_automatic_run+0x222>
				status = AUTO_YELLOW;
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c88:	f000 fbb6 	bl	80013f8 <setTimer2>
				timeryellow_counter = timer_yellow/1000;
 8000c8c:	4b3f      	ldr	r3, [pc, #252]	; (8000d8c <fsm_automatic_run+0x304>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a36      	ldr	r2, [pc, #216]	; (8000d6c <fsm_automatic_run+0x2e4>)
 8000c92:	fb82 1203 	smull	r1, r2, r2, r3
 8000c96:	1192      	asrs	r2, r2, #6
 8000c98:	17db      	asrs	r3, r3, #31
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4a3a      	ldr	r2, [pc, #232]	; (8000d88 <fsm_automatic_run+0x300>)
 8000c9e:	6013      	str	r3, [r2, #0]
				setTimer(timer_yellow);
 8000ca0:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <fsm_automatic_run+0x304>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fb8d 	bl	80013c4 <setTimer>
			}
			if(isButton1Pressed() == 1){
 8000caa:	f7ff fbd5 	bl	8000458 <isButton1Pressed>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d119      	bne.n	8000ce8 <fsm_automatic_run+0x260>
				status = MAN_RED;
 8000cb4:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <fsm_automatic_run+0x2d8>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <fsm_automatic_run+0x2fc>)
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2108      	movs	r1, #8
 8000cc4:	4827      	ldr	r0, [pc, #156]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000cc6:	f001 f81e 	bl	8001d06 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000cca:	220a      	movs	r2, #10
 8000ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd0:	4824      	ldr	r0, [pc, #144]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000cd2:	f001 f818 	bl	8001d06 <HAL_GPIO_WritePin>
				setTimer2(500);
 8000cd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cda:	f000 fb8d 	bl	80013f8 <setTimer2>
			}
			break;
 8000cde:	e003      	b.n	8000ce8 <fsm_automatic_run+0x260>
			break;
 8000ce0:	bf00      	nop
 8000ce2:	e002      	b.n	8000cea <fsm_automatic_run+0x262>
			break;
 8000ce4:	bf00      	nop
 8000ce6:	e000      	b.n	8000cea <fsm_automatic_run+0x262>
			break;
 8000ce8:	bf00      	nop
	}
	switch(status2){
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <fsm_automatic_run+0x2fc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	f200 8104 	bhi.w	8000efc <fsm_automatic_run+0x474>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <fsm_automatic_run+0x274>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d95 	.word	0x08000d95
 8000d04:	08000e0b 	.word	0x08000e0b
 8000d08:	08000e7f 	.word	0x08000e7f
		case INIT:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000d14:	f000 fff7 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1e:	4811      	ldr	r0, [pc, #68]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000d20:	f000 fff1 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <fsm_automatic_run+0x2dc>)
 8000d2c:	f000 ffeb 	bl	8001d06 <HAL_GPIO_WritePin>
			status2 = AUTO_GREEN;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <fsm_automatic_run+0x2fc>)
 8000d32:	2203      	movs	r2, #3
 8000d34:	601a      	str	r2, [r3, #0]
			setTimer5(1000);
 8000d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3a:	f000 fbab 	bl	8001494 <setTimer5>
			timergreen2_counter = timer_green/1000;
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <fsm_automatic_run+0x2f4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <fsm_automatic_run+0x2e4>)
 8000d44:	fb82 1203 	smull	r1, r2, r2, r3
 8000d48:	1192      	asrs	r2, r2, #6
 8000d4a:	17db      	asrs	r3, r3, #31
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <fsm_automatic_run+0x308>)
 8000d50:	6013      	str	r3, [r2, #0]
			setTimer4(timer_green);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <fsm_automatic_run+0x2f4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fb82 	bl	8001460 <setTimer4>
			break;
 8000d5c:	e0ce      	b.n	8000efc <fsm_automatic_run+0x474>
 8000d5e:	bf00      	nop
 8000d60:	200000c0 	.word	0x200000c0
 8000d64:	40010800 	.word	0x40010800
 8000d68:	20000034 	.word	0x20000034
 8000d6c:	10624dd3 	.word	0x10624dd3
 8000d70:	20000040 	.word	0x20000040
 8000d74:	200000ac 	.word	0x200000ac
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	2000003c 	.word	0x2000003c
 8000d80:	20000048 	.word	0x20000048
 8000d84:	200000bc 	.word	0x200000bc
 8000d88:	20000044 	.word	0x20000044
 8000d8c:	20000038 	.word	0x20000038
 8000d90:	20000054 	.word	0x20000054
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9a:	4859      	ldr	r0, [pc, #356]	; (8000f00 <fsm_automatic_run+0x478>)
 8000d9c:	f000 ffb3 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da6:	4856      	ldr	r0, [pc, #344]	; (8000f00 <fsm_automatic_run+0x478>)
 8000da8:	f000 ffad 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <fsm_automatic_run+0x478>)
 8000db4:	f000 ffa7 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 8000db8:	4b52      	ldr	r3, [pc, #328]	; (8000f04 <fsm_automatic_run+0x47c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d108      	bne.n	8000dd2 <fsm_automatic_run+0x34a>
				setTimer5(1000);
 8000dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc4:	f000 fb66 	bl	8001494 <setTimer5>
				timerred2_counter--;
 8000dc8:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <fsm_automatic_run+0x480>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	4a4e      	ldr	r2, [pc, #312]	; (8000f08 <fsm_automatic_run+0x480>)
 8000dd0:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <fsm_automatic_run+0x484>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	f040 808b 	bne.w	8000ef2 <fsm_automatic_run+0x46a>
				setTimer5(1000);
 8000ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de0:	f000 fb58 	bl	8001494 <setTimer5>
				timergreen2_counter = timer_green/1000;
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <fsm_automatic_run+0x488>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <fsm_automatic_run+0x48c>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1192      	asrs	r2, r2, #6
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	4a48      	ldr	r2, [pc, #288]	; (8000f18 <fsm_automatic_run+0x490>)
 8000df6:	6013      	str	r3, [r2, #0]
				setTimer4(timer_green);
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <fsm_automatic_run+0x488>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 fb2f 	bl	8001460 <setTimer4>
				status2 = AUTO_GREEN;
 8000e02:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <fsm_automatic_run+0x494>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	601a      	str	r2, [r3, #0]
//			if(isButton1Pressed() == 1){
//				status2 = MAN_RED;
//				status = MAN_RED;
//				setTimer2(500);
//			}
			break;
 8000e08:	e073      	b.n	8000ef2 <fsm_automatic_run+0x46a>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e10:	483b      	ldr	r0, [pc, #236]	; (8000f00 <fsm_automatic_run+0x478>)
 8000e12:	f000 ff78 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e1c:	4838      	ldr	r0, [pc, #224]	; (8000f00 <fsm_automatic_run+0x478>)
 8000e1e:	f000 ff72 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	4835      	ldr	r0, [pc, #212]	; (8000f00 <fsm_automatic_run+0x478>)
 8000e2a:	f000 ff6c 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 8000e2e:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <fsm_automatic_run+0x47c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <fsm_automatic_run+0x3c0>
				setTimer5(1000);
 8000e36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3a:	f000 fb2b 	bl	8001494 <setTimer5>
				timeryellow2_counter--;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <fsm_automatic_run+0x498>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	4a36      	ldr	r2, [pc, #216]	; (8000f20 <fsm_automatic_run+0x498>)
 8000e46:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <fsm_automatic_run+0x484>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d152      	bne.n	8000ef6 <fsm_automatic_run+0x46e>
				status2 = AUTO_RED;
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <fsm_automatic_run+0x494>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	601a      	str	r2, [r3, #0]
				setTimer5(1000);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f000 fb1b 	bl	8001494 <setTimer5>
				timerred2_counter = timer_red/1000;
 8000e5e:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <fsm_automatic_run+0x49c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a2c      	ldr	r2, [pc, #176]	; (8000f14 <fsm_automatic_run+0x48c>)
 8000e64:	fb82 1203 	smull	r1, r2, r2, r3
 8000e68:	1192      	asrs	r2, r2, #6
 8000e6a:	17db      	asrs	r3, r3, #31
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <fsm_automatic_run+0x480>)
 8000e70:	6013      	str	r3, [r2, #0]
				setTimer4(timer_red);
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <fsm_automatic_run+0x49c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 faf2 	bl	8001460 <setTimer4>
			}
//			if(isButton1Pressed() == 1){
//				status2 = MAN_RED;
//				setTimer2(500);
//			}
			break;
 8000e7c:	e03b      	b.n	8000ef6 <fsm_automatic_run+0x46e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e84:	481e      	ldr	r0, [pc, #120]	; (8000f00 <fsm_automatic_run+0x478>)
 8000e86:	f000 ff3e 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e90:	481b      	ldr	r0, [pc, #108]	; (8000f00 <fsm_automatic_run+0x478>)
 8000e92:	f000 ff38 	bl	8001d06 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9c:	4818      	ldr	r0, [pc, #96]	; (8000f00 <fsm_automatic_run+0x478>)
 8000e9e:	f000 ff32 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <fsm_automatic_run+0x47c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <fsm_automatic_run+0x434>
				setTimer5(1000);
 8000eaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eae:	f000 faf1 	bl	8001494 <setTimer5>
				timergreen2_counter--;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <fsm_automatic_run+0x490>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <fsm_automatic_run+0x490>)
 8000eba:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <fsm_automatic_run+0x484>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d11a      	bne.n	8000efa <fsm_automatic_run+0x472>
				setTimer5(1000);
 8000ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec8:	f000 fae4 	bl	8001494 <setTimer5>
				status2 = AUTO_YELLOW;
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <fsm_automatic_run+0x494>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	601a      	str	r2, [r3, #0]
				timeryellow2_counter = timer_yellow/1000;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <fsm_automatic_run+0x4a0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <fsm_automatic_run+0x48c>)
 8000ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8000edc:	1192      	asrs	r2, r2, #6
 8000ede:	17db      	asrs	r3, r3, #31
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <fsm_automatic_run+0x498>)
 8000ee4:	6013      	str	r3, [r2, #0]
				setTimer4(timer_yellow);
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <fsm_automatic_run+0x4a0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fab8 	bl	8001460 <setTimer4>
			}
//			if(isButton1Pressed() == 1){
//				status2 = MAN_RED;
//				setTimer2(500);
//			}
			break;
 8000ef0:	e003      	b.n	8000efa <fsm_automatic_run+0x472>
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e002      	b.n	8000efc <fsm_automatic_run+0x474>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e000      	b.n	8000efc <fsm_automatic_run+0x474>
			break;
 8000efa:	bf00      	nop
		}
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40010800 	.word	0x40010800
 8000f04:	200000b8 	.word	0x200000b8
 8000f08:	2000004c 	.word	0x2000004c
 8000f0c:	200000b4 	.word	0x200000b4
 8000f10:	2000003c 	.word	0x2000003c
 8000f14:	10624dd3 	.word	0x10624dd3
 8000f18:	20000054 	.word	0x20000054
 8000f1c:	200000bc 	.word	0x200000bc
 8000f20:	20000050 	.word	0x20000050
 8000f24:	20000034 	.word	0x20000034
 8000f28:	20000038 	.word	0x20000038

08000f2c <fsm_manual_run>:
 *      Author: Hong Phat
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	switch(status){
 8000f30:	4b80      	ldr	r3, [pc, #512]	; (8001134 <fsm_manual_run+0x208>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b0e      	cmp	r3, #14
 8000f36:	d057      	beq.n	8000fe8 <fsm_manual_run+0xbc>
 8000f38:	2b0e      	cmp	r3, #14
 8000f3a:	f300 80f2 	bgt.w	8001122 <fsm_manual_run+0x1f6>
 8000f3e:	2b0c      	cmp	r3, #12
 8000f40:	d003      	beq.n	8000f4a <fsm_manual_run+0x1e>
 8000f42:	2b0d      	cmp	r3, #13
 8000f44:	f000 809e 	beq.w	8001084 <fsm_manual_run+0x158>
		if(isButton3Pressed() == 1){
			timer_green= set_timer*1000;
		}
		break;
	default:
		break;
 8000f48:	e0eb      	b.n	8001122 <fsm_manual_run+0x1f6>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	487a      	ldr	r0, [pc, #488]	; (8001138 <fsm_manual_run+0x20c>)
 8000f50:	f000 fed9 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2120      	movs	r1, #32
 8000f58:	4877      	ldr	r0, [pc, #476]	; (8001138 <fsm_manual_run+0x20c>)
 8000f5a:	f000 fed4 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f64:	4874      	ldr	r0, [pc, #464]	; (8001138 <fsm_manual_run+0x20c>)
 8000f66:	f000 fece 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f70:	4871      	ldr	r0, [pc, #452]	; (8001138 <fsm_manual_run+0x20c>)
 8000f72:	f000 fec8 	bl	8001d06 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8000f76:	4b71      	ldr	r3, [pc, #452]	; (800113c <fsm_manual_run+0x210>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d10c      	bne.n	8000f98 <fsm_manual_run+0x6c>
			setTimer2(500);
 8000f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f82:	f000 fa39 	bl	80013f8 <setTimer2>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 8000f86:	2108      	movs	r1, #8
 8000f88:	486b      	ldr	r0, [pc, #428]	; (8001138 <fsm_manual_run+0x20c>)
 8000f8a:	f000 fed4 	bl	8001d36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_10);
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4869      	ldr	r0, [pc, #420]	; (8001138 <fsm_manual_run+0x20c>)
 8000f94:	f000 fecf 	bl	8001d36 <HAL_GPIO_TogglePin>
		if(isButton1Pressed() == 1){
 8000f98:	f7ff fa5e 	bl	8000458 <isButton1Pressed>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d109      	bne.n	8000fb6 <fsm_manual_run+0x8a>
			setTimer2(500);
 8000fa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa6:	f000 fa27 	bl	80013f8 <setTimer2>
			set_timer = 0;
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <fsm_manual_run+0x214>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
			status = MAN_YELLOW;
 8000fb0:	4b60      	ldr	r3, [pc, #384]	; (8001134 <fsm_manual_run+0x208>)
 8000fb2:	220e      	movs	r2, #14
 8000fb4:	601a      	str	r2, [r3, #0]
		if(isButton2Pressed() == 1){
 8000fb6:	f7ff fa61 	bl	800047c <isButton2Pressed>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d104      	bne.n	8000fca <fsm_manual_run+0x9e>
			set_timer++;
 8000fc0:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <fsm_manual_run+0x214>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a5e      	ldr	r2, [pc, #376]	; (8001140 <fsm_manual_run+0x214>)
 8000fc8:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 8000fca:	f7ff fa69 	bl	80004a0 <isButton3Pressed>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	f040 80a8 	bne.w	8001126 <fsm_manual_run+0x1fa>
			timer_red = set_timer*1000;
 8000fd6:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <fsm_manual_run+0x214>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	4a58      	ldr	r2, [pc, #352]	; (8001144 <fsm_manual_run+0x218>)
 8000fe4:	6013      	str	r3, [r2, #0]
		break;
 8000fe6:	e09e      	b.n	8001126 <fsm_manual_run+0x1fa>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2108      	movs	r1, #8
 8000fec:	4852      	ldr	r0, [pc, #328]	; (8001138 <fsm_manual_run+0x20c>)
 8000fee:	f000 fe8a 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	4850      	ldr	r0, [pc, #320]	; (8001138 <fsm_manual_run+0x20c>)
 8000ff8:	f000 fe85 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001002:	484d      	ldr	r0, [pc, #308]	; (8001138 <fsm_manual_run+0x20c>)
 8001004:	f000 fe7f 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100e:	484a      	ldr	r0, [pc, #296]	; (8001138 <fsm_manual_run+0x20c>)
 8001010:	f000 fe79 	bl	8001d06 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <fsm_manual_run+0x210>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d10c      	bne.n	8001036 <fsm_manual_run+0x10a>
				setTimer2(5000);
 800101c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001020:	f000 f9ea 	bl	80013f8 <setTimer2>
				HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 8001024:	2110      	movs	r1, #16
 8001026:	4844      	ldr	r0, [pc, #272]	; (8001138 <fsm_manual_run+0x20c>)
 8001028:	f000 fe85 	bl	8001d36 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800102c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001030:	4841      	ldr	r0, [pc, #260]	; (8001138 <fsm_manual_run+0x20c>)
 8001032:	f000 fe80 	bl	8001d36 <HAL_GPIO_TogglePin>
			if(isButton1Pressed() == 1){
 8001036:	f7ff fa0f 	bl	8000458 <isButton1Pressed>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d109      	bne.n	8001054 <fsm_manual_run+0x128>
				set_timer = 0;
 8001040:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <fsm_manual_run+0x214>)
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8001046:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104a:	f000 f9d5 	bl	80013f8 <setTimer2>
				status = MAN_GREEN;
 800104e:	4b39      	ldr	r3, [pc, #228]	; (8001134 <fsm_manual_run+0x208>)
 8001050:	220d      	movs	r2, #13
 8001052:	601a      	str	r2, [r3, #0]
			if(isButton2Pressed() == 1){
 8001054:	f7ff fa12 	bl	800047c <isButton2Pressed>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d104      	bne.n	8001068 <fsm_manual_run+0x13c>
				set_timer++;
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <fsm_manual_run+0x214>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a36      	ldr	r2, [pc, #216]	; (8001140 <fsm_manual_run+0x214>)
 8001066:	6013      	str	r3, [r2, #0]
			if(isButton3Pressed() == 1){
 8001068:	f7ff fa1a 	bl	80004a0 <isButton3Pressed>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d15b      	bne.n	800112a <fsm_manual_run+0x1fe>
				timer_yellow = set_timer*1000;
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <fsm_manual_run+0x214>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800107a:	fb02 f303 	mul.w	r3, r2, r3
 800107e:	4a32      	ldr	r2, [pc, #200]	; (8001148 <fsm_manual_run+0x21c>)
 8001080:	6013      	str	r3, [r2, #0]
			break;
 8001082:	e052      	b.n	800112a <fsm_manual_run+0x1fe>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8001084:	2201      	movs	r2, #1
 8001086:	2108      	movs	r1, #8
 8001088:	482b      	ldr	r0, [pc, #172]	; (8001138 <fsm_manual_run+0x20c>)
 800108a:	f000 fe3c 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 800108e:	2201      	movs	r2, #1
 8001090:	2110      	movs	r1, #16
 8001092:	4829      	ldr	r0, [pc, #164]	; (8001138 <fsm_manual_run+0x20c>)
 8001094:	f000 fe37 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	4826      	ldr	r0, [pc, #152]	; (8001138 <fsm_manual_run+0x20c>)
 80010a0:	f000 fe31 	bl	8001d06 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010aa:	4823      	ldr	r0, [pc, #140]	; (8001138 <fsm_manual_run+0x20c>)
 80010ac:	f000 fe2b 	bl	8001d06 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <fsm_manual_run+0x210>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10c      	bne.n	80010d2 <fsm_manual_run+0x1a6>
			setTimer2(5000);
 80010b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80010bc:	f000 f99c 	bl	80013f8 <setTimer2>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80010c0:	2120      	movs	r1, #32
 80010c2:	481d      	ldr	r0, [pc, #116]	; (8001138 <fsm_manual_run+0x20c>)
 80010c4:	f000 fe37 	bl	8001d36 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	481a      	ldr	r0, [pc, #104]	; (8001138 <fsm_manual_run+0x20c>)
 80010ce:	f000 fe32 	bl	8001d36 <HAL_GPIO_TogglePin>
		if(isButton1Pressed() == 1){
 80010d2:	f7ff f9c1 	bl	8000458 <isButton1Pressed>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10a      	bne.n	80010f2 <fsm_manual_run+0x1c6>
			set_timer = 0;
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <fsm_manual_run+0x214>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
			status = AUTO_RED;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <fsm_manual_run+0x208>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
			setTimer(timer_red);
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <fsm_manual_run+0x218>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f969 	bl	80013c4 <setTimer>
		if(isButton2Pressed() == 1){
 80010f2:	f7ff f9c3 	bl	800047c <isButton2Pressed>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d104      	bne.n	8001106 <fsm_manual_run+0x1da>
			set_timer++;
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <fsm_manual_run+0x214>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <fsm_manual_run+0x214>)
 8001104:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 8001106:	f7ff f9cb 	bl	80004a0 <isButton3Pressed>
 800110a:	4603      	mov	r3, r0
 800110c:	2b01      	cmp	r3, #1
 800110e:	d10e      	bne.n	800112e <fsm_manual_run+0x202>
			timer_green= set_timer*1000;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <fsm_manual_run+0x214>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001118:	fb02 f303 	mul.w	r3, r2, r3
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <fsm_manual_run+0x220>)
 800111e:	6013      	str	r3, [r2, #0]
		break;
 8001120:	e005      	b.n	800112e <fsm_manual_run+0x202>
		break;
 8001122:	bf00      	nop
 8001124:	e004      	b.n	8001130 <fsm_manual_run+0x204>
		break;
 8001126:	bf00      	nop
 8001128:	e002      	b.n	8001130 <fsm_manual_run+0x204>
			break;
 800112a:	bf00      	nop
 800112c:	e000      	b.n	8001130 <fsm_manual_run+0x204>
		break;
 800112e:	bf00      	nop
	}
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000c0 	.word	0x200000c0
 8001138:	40010800 	.word	0x40010800
 800113c:	200000ac 	.word	0x200000ac
 8001140:	20000090 	.word	0x20000090
 8001144:	20000034 	.word	0x20000034
 8001148:	20000038 	.word	0x20000038
 800114c:	2000003c 	.word	0x2000003c

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001156:	f000 fad5 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f831 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f8b7 	bl	80012d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001162:	f000 f869 	bl	8001238 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <main+0x60>)
 8001168:	f001 fa36 	bl	80025d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <main+0x64>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <main+0x68>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
  setTimer3(50);
 8001178:	2032      	movs	r0, #50	; 0x32
 800117a:	f000 f957 	bl	800142c <setTimer3>
  int mode = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
// status2 = INIT;
// setTimer2(5000);
  while (1)
  {

	  if(timer3_flag == 1){
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <main+0x6c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10d      	bne.n	80011a6 <main+0x56>
	  setTimer3(250);
 800118a:	20fa      	movs	r0, #250	; 0xfa
 800118c:	f000 f94e 	bl	800142c <setTimer3>
	  display(mode++);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fa54 	bl	8000644 <display>
	  if(mode > 4) mode = 1;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	dd01      	ble.n	80011a6 <main+0x56>
 80011a2:	2301      	movs	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
	  }
	  fsm_automatic_run();
 80011a6:	f7ff fc6f 	bl	8000a88 <fsm_automatic_run>
	  fsm_manual_run();
 80011aa:	f7ff febf 	bl	8000f2c <fsm_manual_run>
	  if(timer3_flag == 1){
 80011ae:	e7e8      	b.n	8001182 <main+0x32>
 80011b0:	200000c4 	.word	0x200000c4
 80011b4:	200000c0 	.word	0x200000c0
 80011b8:	200000bc 	.word	0x200000bc
 80011bc:	200000b0 	.word	0x200000b0

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b090      	sub	sp, #64	; 0x40
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	2228      	movs	r2, #40	; 0x28
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fdba 	bl	8002d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e6:	2301      	movs	r3, #1
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ea:	2310      	movs	r3, #16
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fdb6 	bl	8001d68 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001202:	f000 f8d9 	bl	80013b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f001 f822 	bl	8002268 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800122a:	f000 f8c5 	bl	80013b8 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <MX_TIM2_Init+0x94>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <MX_TIM2_Init+0x94>)
 800125e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_TIM2_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <MX_TIM2_Init+0x94>)
 800126c:	2209      	movs	r2, #9
 800126e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_TIM2_Init+0x94>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM2_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127c:	4813      	ldr	r0, [pc, #76]	; (80012cc <MX_TIM2_Init+0x94>)
 800127e:	f001 f95b 	bl	8002538 <HAL_TIM_Base_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001288:	f000 f896 	bl	80013b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001290:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4619      	mov	r1, r3
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_TIM2_Init+0x94>)
 800129a:	f001 faf1 	bl	8002880 <HAL_TIM_ConfigClockSource>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012a4:	f000 f888 	bl	80013b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b0:	463b      	mov	r3, r7
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_TIM2_Init+0x94>)
 80012b6:	f001 fcb9 	bl	8002c2c <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012c0:	f000 f87a 	bl	80013b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000c4 	.word	0x200000c4

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a2a      	ldr	r2, [pc, #168]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <MX_GPIO_Init+0xc4>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <MX_GPIO_Init+0xc4>)
 8001302:	f043 0308 	orr.w	r3, r3, #8
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_GPIO_Init+0xc4>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2138      	movs	r1, #56	; 0x38
 8001318:	481f      	ldr	r0, [pc, #124]	; (8001398 <MX_GPIO_Init+0xc8>)
 800131a:	f000 fcf4 	bl	8001d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
 8001324:	481c      	ldr	r0, [pc, #112]	; (8001398 <MX_GPIO_Init+0xc8>)
 8001326:	f000 fcee 	bl	8001d06 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800132a:	2200      	movs	r2, #0
 800132c:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 8001330:	481a      	ldr	r0, [pc, #104]	; (800139c <MX_GPIO_Init+0xcc>)
 8001332:	f000 fce8 	bl	8001d06 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin PA10
                           PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|EN0_Pin
 8001336:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 800133a:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2302      	movs	r3, #2
 8001346:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4619      	mov	r1, r3
 800134e:	4812      	ldr	r0, [pc, #72]	; (8001398 <MX_GPIO_Init+0xc8>)
 8001350:	f000 fb48 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001354:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8001358:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2302      	movs	r3, #2
 8001364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0308 	add.w	r3, r7, #8
 800136a:	4619      	mov	r1, r3
 800136c:	480b      	ldr	r0, [pc, #44]	; (800139c <MX_GPIO_Init+0xcc>)
 800136e:	f000 fb39 	bl	80019e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 8001372:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137c:	2301      	movs	r3, #1
 800137e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4619      	mov	r1, r3
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_GPIO_Init+0xcc>)
 8001388:	f000 fb2c 	bl	80019e4 <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00

080013a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	timerRun();
 80013a8:	f000 f88e 	bl	80014c8 <timerRun>
	getKeyInput();
 80013ac:	f7ff f8ae 	bl	800050c <getKeyInput>
}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013bc:	b672      	cpsid	i
}
 80013be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <Error_Handler+0x8>
	...

080013c4 <setTimer>:
int timer2_flag = 0 ;
int timer3_flag = 0;
int timer4_flag = 0;
int timer5_flag = 0;
int TICK = 10;
void setTimer(int duration){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <setTimer+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <setTimer+0x2c>)
 80013d8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <setTimer+0x30>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000058 	.word	0x20000058
 80013f0:	20000094 	.word	0x20000094
 80013f4:	200000a8 	.word	0x200000a8

080013f8 <setTimer2>:
void setTimer2(int duration){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <setTimer2+0x28>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	fb92 f3f3 	sdiv	r3, r2, r3
 800140a:	4a06      	ldr	r2, [pc, #24]	; (8001424 <setTimer2+0x2c>)
 800140c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <setTimer2+0x30>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000058 	.word	0x20000058
 8001424:	20000098 	.word	0x20000098
 8001428:	200000ac 	.word	0x200000ac

0800142c <setTimer3>:
void setTimer3(int duration){
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <setTimer3+0x28>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	fb92 f3f3 	sdiv	r3, r2, r3
 800143e:	4a06      	ldr	r2, [pc, #24]	; (8001458 <setTimer3+0x2c>)
 8001440:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <setTimer3+0x30>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000058 	.word	0x20000058
 8001458:	2000009c 	.word	0x2000009c
 800145c:	200000b0 	.word	0x200000b0

08001460 <setTimer4>:
void setTimer4(int duration){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <setTimer4+0x28>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <setTimer4+0x2c>)
 8001474:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <setTimer4+0x30>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000058 	.word	0x20000058
 800148c:	200000a0 	.word	0x200000a0
 8001490:	200000b4 	.word	0x200000b4

08001494 <setTimer5>:
void setTimer5(int duration){
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <setTimer5+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014a6:	4a06      	ldr	r2, [pc, #24]	; (80014c0 <setTimer5+0x2c>)
 80014a8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <setTimer5+0x30>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000058 	.word	0x20000058
 80014c0:	200000a4 	.word	0x200000a4
 80014c4:	200000b8 	.word	0x200000b8

080014c8 <timerRun>:
void timerRun(){
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <timerRun+0xac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	dd0b      	ble.n	80014ec <timerRun+0x24>
		timer1_counter--;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <timerRun+0xac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a26      	ldr	r2, [pc, #152]	; (8001574 <timerRun+0xac>)
 80014dc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <timerRun+0xac>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	dc02      	bgt.n	80014ec <timerRun+0x24>
			timer1_flag = 1;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <timerRun+0xb0>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <timerRun+0xb4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	dd0b      	ble.n	800150c <timerRun+0x44>
		timer2_counter--;
 80014f4:	4b21      	ldr	r3, [pc, #132]	; (800157c <timerRun+0xb4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	4a20      	ldr	r2, [pc, #128]	; (800157c <timerRun+0xb4>)
 80014fc:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <timerRun+0xb4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	dc02      	bgt.n	800150c <timerRun+0x44>
			timer2_flag = 1;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <timerRun+0xb8>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <timerRun+0xbc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	dd0b      	ble.n	800152c <timerRun+0x64>
		timer3_counter--;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <timerRun+0xbc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <timerRun+0xbc>)
 800151c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <timerRun+0xbc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	dc02      	bgt.n	800152c <timerRun+0x64>
			timer3_flag = 1;
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <timerRun+0xc0>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter>0){
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <timerRun+0xc4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dd0b      	ble.n	800154c <timerRun+0x84>
		timer4_counter--;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <timerRun+0xc4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <timerRun+0xc4>)
 800153c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <timerRun+0xc4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dc02      	bgt.n	800154c <timerRun+0x84>
			timer4_flag = 1;
 8001546:	4b12      	ldr	r3, [pc, #72]	; (8001590 <timerRun+0xc8>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter>0){
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <timerRun+0xcc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd0b      	ble.n	800156c <timerRun+0xa4>
		timer5_counter--;
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <timerRun+0xcc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <timerRun+0xcc>)
 800155c:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <timerRun+0xcc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	dc02      	bgt.n	800156c <timerRun+0xa4>
			timer5_flag = 1;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <timerRun+0xd0>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000094 	.word	0x20000094
 8001578:	200000a8 	.word	0x200000a8
 800157c:	20000098 	.word	0x20000098
 8001580:	200000ac 	.word	0x200000ac
 8001584:	2000009c 	.word	0x2000009c
 8001588:	200000b0 	.word	0x200000b0
 800158c:	200000a0 	.word	0x200000a0
 8001590:	200000b4 	.word	0x200000b4
 8001594:	200000a4 	.word	0x200000a4
 8001598:	200000b8 	.word	0x200000b8

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_MspInit+0x5c>)
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <HAL_MspInit+0x5c>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_MspInit+0x5c>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x5c>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x5c>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x5c>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_MspInit+0x60>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	4a04      	ldr	r2, [pc, #16]	; (80015fc <HAL_MspInit+0x60>)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010000 	.word	0x40010000

08001600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001610:	d113      	bne.n	800163a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x44>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201c      	movs	r0, #28
 8001630:	f000 f9a1 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001634:	201c      	movs	r0, #28
 8001636:	f000 f9ba 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168e:	f000 f87f 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM2_IRQHandler+0x10>)
 800169e:	f000 ffe7 	bl	8002670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000c4 	.word	0x200000c4

080016ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	; (80016f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	; (80016fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016de:	f7ff ffe5 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f001 fb0d 	bl	8002d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e6:	f7ff fd33 	bl	8001150 <main>
  bx lr
 80016ea:	4770      	bx	lr
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016f4:	08002d98 	.word	0x08002d98
  ldr r2, =_sbss
 80016f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016fc:	20000110 	.word	0x20000110

08001700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	; (800172c <HAL_Init+0x28>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_Init+0x28>)
 800170e:	f043 0310 	orr.w	r3, r3, #16
 8001712:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f923 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	200f      	movs	r0, #15
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff ff3c 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40022000 	.word	0x40022000

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f93b 	bl	80019ca <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f000 f903 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	; (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000005c 	.word	0x2000005c
 8001788:	20000064 	.word	0x20000064
 800178c:	20000060 	.word	0x20000060

08001790 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <HAL_IncTick+0x1c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_IncTick+0x20>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <HAL_IncTick+0x20>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	20000064 	.word	0x20000064
 80017b0:	2000010c 	.word	0x2000010c

080017b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_GetTick+0x10>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	2000010c 	.word	0x2000010c

080017c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	60d3      	str	r3, [r2, #12]
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4906      	ldr	r1, [pc, #24]	; (8001860 <__NVIC_EnableIRQ+0x34>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff90 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	; (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff2d 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff42 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff90 	bl	80018b8 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5f 	bl	8001864 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff35 	bl	800182c <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b08b      	sub	sp, #44	; 0x2c
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e148      	b.n	8001c8a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019f8:	2201      	movs	r2, #1
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8137 	bne.w	8001c84 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4aa3      	ldr	r2, [pc, #652]	; (8001ca8 <HAL_GPIO_Init+0x2c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d05e      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a20:	4aa1      	ldr	r2, [pc, #644]	; (8001ca8 <HAL_GPIO_Init+0x2c4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d875      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a26:	4aa1      	ldr	r2, [pc, #644]	; (8001cac <HAL_GPIO_Init+0x2c8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d058      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a2c:	4a9f      	ldr	r2, [pc, #636]	; (8001cac <HAL_GPIO_Init+0x2c8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d86f      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a32:	4a9f      	ldr	r2, [pc, #636]	; (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d052      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a38:	4a9d      	ldr	r2, [pc, #628]	; (8001cb0 <HAL_GPIO_Init+0x2cc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d869      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a3e:	4a9d      	ldr	r2, [pc, #628]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d04c      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a44:	4a9b      	ldr	r2, [pc, #620]	; (8001cb4 <HAL_GPIO_Init+0x2d0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d863      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a4a:	4a9b      	ldr	r2, [pc, #620]	; (8001cb8 <HAL_GPIO_Init+0x2d4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d046      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
 8001a50:	4a99      	ldr	r2, [pc, #612]	; (8001cb8 <HAL_GPIO_Init+0x2d4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d85d      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a56:	2b12      	cmp	r3, #18
 8001a58:	d82a      	bhi.n	8001ab0 <HAL_GPIO_Init+0xcc>
 8001a5a:	2b12      	cmp	r3, #18
 8001a5c:	d859      	bhi.n	8001b12 <HAL_GPIO_Init+0x12e>
 8001a5e:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <HAL_GPIO_Init+0x80>)
 8001a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a64:	08001adf 	.word	0x08001adf
 8001a68:	08001ab9 	.word	0x08001ab9
 8001a6c:	08001acb 	.word	0x08001acb
 8001a70:	08001b0d 	.word	0x08001b0d
 8001a74:	08001b13 	.word	0x08001b13
 8001a78:	08001b13 	.word	0x08001b13
 8001a7c:	08001b13 	.word	0x08001b13
 8001a80:	08001b13 	.word	0x08001b13
 8001a84:	08001b13 	.word	0x08001b13
 8001a88:	08001b13 	.word	0x08001b13
 8001a8c:	08001b13 	.word	0x08001b13
 8001a90:	08001b13 	.word	0x08001b13
 8001a94:	08001b13 	.word	0x08001b13
 8001a98:	08001b13 	.word	0x08001b13
 8001a9c:	08001b13 	.word	0x08001b13
 8001aa0:	08001b13 	.word	0x08001b13
 8001aa4:	08001b13 	.word	0x08001b13
 8001aa8:	08001ac1 	.word	0x08001ac1
 8001aac:	08001ad5 	.word	0x08001ad5
 8001ab0:	4a82      	ldr	r2, [pc, #520]	; (8001cbc <HAL_GPIO_Init+0x2d8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ab6:	e02c      	b.n	8001b12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e029      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	623b      	str	r3, [r7, #32]
          break;
 8001ac8:	e024      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e01f      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	330c      	adds	r3, #12
 8001ada:	623b      	str	r3, [r7, #32]
          break;
 8001adc:	e01a      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	623b      	str	r3, [r7, #32]
          break;
 8001aea:	e013      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001af4:	2308      	movs	r3, #8
 8001af6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	611a      	str	r2, [r3, #16]
          break;
 8001afe:	e009      	b.n	8001b14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	615a      	str	r2, [r3, #20]
          break;
 8001b0a:	e003      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
          break;
 8001b10:	e000      	b.n	8001b14 <HAL_GPIO_Init+0x130>
          break;
 8001b12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2bff      	cmp	r3, #255	; 0xff
 8001b18:	d801      	bhi.n	8001b1e <HAL_GPIO_Init+0x13a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	e001      	b.n	8001b22 <HAL_GPIO_Init+0x13e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3304      	adds	r3, #4
 8001b22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2bff      	cmp	r3, #255	; 0xff
 8001b28:	d802      	bhi.n	8001b30 <HAL_GPIO_Init+0x14c>
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0x152>
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3b08      	subs	r3, #8
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	401a      	ands	r2, r3
 8001b48:	6a39      	ldr	r1, [r7, #32]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8090 	beq.w	8001c84 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b64:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_GPIO_Init+0x2dc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <HAL_GPIO_Init+0x2dc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_GPIO_Init+0x2dc>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <HAL_GPIO_Init+0x2e4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_GPIO_Init+0x1e0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_GPIO_Init+0x2e8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d007      	beq.n	8001bc0 <HAL_GPIO_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_GPIO_Init+0x2ec>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_GPIO_Init+0x1d8>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e004      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_GPIO_Init+0x1e2>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc8:	f002 0203 	and.w	r2, r2, #3
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	4093      	lsls	r3, r2
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bd6:	493b      	ldr	r1, [pc, #236]	; (8001cc4 <HAL_GPIO_Init+0x2e0>)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4937      	ldr	r1, [pc, #220]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	600b      	str	r3, [r1, #0]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	4933      	ldr	r1, [pc, #204]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c18:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	492d      	ldr	r1, [pc, #180]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d006      	beq.n	8001c4e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	4923      	ldr	r1, [pc, #140]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	491f      	ldr	r1, [pc, #124]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c58:	4013      	ands	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4919      	ldr	r1, [pc, #100]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4915      	ldr	r1, [pc, #84]	; (8001cd4 <HAL_GPIO_Init+0x2f0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3301      	adds	r3, #1
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f aeaf 	bne.w	80019f8 <HAL_GPIO_Init+0x14>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	372c      	adds	r7, #44	; 0x2c
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	10320000 	.word	0x10320000
 8001cac:	10310000 	.word	0x10310000
 8001cb0:	10220000 	.word	0x10220000
 8001cb4:	10210000 	.word	0x10210000
 8001cb8:	10120000 	.word	0x10120000
 8001cbc:	10110000 	.word	0x10110000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	40011000 	.word	0x40011000
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e001      	b.n	8001cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]
 8001d12:	4613      	mov	r3, r2
 8001d14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d16:	787b      	ldrb	r3, [r7, #1]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d22:	e003      	b.n	8001d2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d24:	887b      	ldrh	r3, [r7, #2]
 8001d26:	041a      	lsls	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr

08001d36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b085      	sub	sp, #20
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d48:	887a      	ldrh	r2, [r7, #2]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	041a      	lsls	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	400b      	ands	r3, r1
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e26c      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8087 	beq.w	8001e96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d88:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d00c      	beq.n	8001dae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d94:	4b8f      	ldr	r3, [pc, #572]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d112      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5e>
 8001da0:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d10b      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dae:	4b89      	ldr	r3, [pc, #548]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d06c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x12c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d168      	bne.n	8001e94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e246      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x76>
 8001dd0:	4b80      	ldr	r3, [pc, #512]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a7f      	ldr	r2, [pc, #508]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	e02e      	b.n	8001e3c <HAL_RCC_OscConfig+0xd4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x98>
 8001de6:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a77      	ldr	r2, [pc, #476]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e01d      	b.n	8001e3c <HAL_RCC_OscConfig+0xd4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0xbc>
 8001e0a:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a71      	ldr	r2, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e00b      	b.n	8001e3c <HAL_RCC_OscConfig+0xd4>
 8001e24:	4b6b      	ldr	r3, [pc, #428]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a6a      	ldr	r2, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a67      	ldr	r2, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7ff fcb6 	bl	80017b4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fcb2 	bl	80017b4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e1fa      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0xe4>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fca2 	bl	80017b4 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fc9e 	bl	80017b4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1e6      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x10c>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d063      	beq.n	8001f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d11c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x18c>
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d116      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x176>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e1ba      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4939      	ldr	r1, [pc, #228]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef2:	e03a      	b.n	8001f6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d020      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_RCC_OscConfig+0x270>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fc57 	bl	80017b4 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fc53 	bl	80017b4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e19b      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4927      	ldr	r1, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	600b      	str	r3, [r1, #0]
 8001f3c:	e015      	b.n	8001f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_OscConfig+0x270>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fc36 	bl	80017b4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fc32 	bl	80017b4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e17a      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03a      	beq.n	8001fec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d019      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_RCC_OscConfig+0x274>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7ff fc16 	bl	80017b4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8c:	f7ff fc12 	bl	80017b4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e15a      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f000 faa6 	bl	80024fc <RCC_Delay>
 8001fb0:	e01c      	b.n	8001fec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fbfc 	bl	80017b4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fbe:	e00f      	b.n	8001fe0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fbf8 	bl	80017b4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d908      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e140      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
 8001fd2:	bf00      	nop
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	42420000 	.word	0x42420000
 8001fdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b9e      	ldr	r3, [pc, #632]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e9      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a6 	beq.w	8002146 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffe:	4b97      	ldr	r3, [pc, #604]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10d      	bne.n	8002026 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b94      	ldr	r3, [pc, #592]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a93      	ldr	r2, [pc, #588]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002014:	61d3      	str	r3, [r2, #28]
 8002016:	4b91      	ldr	r3, [pc, #580]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002022:	2301      	movs	r3, #1
 8002024:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b8e      	ldr	r3, [pc, #568]	; (8002260 <HAL_RCC_OscConfig+0x4f8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d118      	bne.n	8002064 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002032:	4b8b      	ldr	r3, [pc, #556]	; (8002260 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a8a      	ldr	r2, [pc, #552]	; (8002260 <HAL_RCC_OscConfig+0x4f8>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203e:	f7ff fbb9 	bl	80017b4 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002046:	f7ff fbb5 	bl	80017b4 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0fd      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	4b81      	ldr	r3, [pc, #516]	; (8002260 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0x312>
 800206c:	4b7b      	ldr	r3, [pc, #492]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a7a      	ldr	r2, [pc, #488]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e02d      	b.n	80020d6 <HAL_RCC_OscConfig+0x36e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x334>
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a75      	ldr	r2, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b73      	ldr	r3, [pc, #460]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a72      	ldr	r2, [pc, #456]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	e01c      	b.n	80020d6 <HAL_RCC_OscConfig+0x36e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d10c      	bne.n	80020be <HAL_RCC_OscConfig+0x356>
 80020a4:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	4a6c      	ldr	r2, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6213      	str	r3, [r2, #32]
 80020b0:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6213      	str	r3, [r2, #32]
 80020bc:	e00b      	b.n	80020d6 <HAL_RCC_OscConfig+0x36e>
 80020be:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	4a66      	ldr	r2, [pc, #408]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6213      	str	r3, [r2, #32]
 80020ca:	4b64      	ldr	r3, [pc, #400]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a63      	ldr	r2, [pc, #396]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d015      	beq.n	800210a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff fb69 	bl	80017b4 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff fb65 	bl	80017b4 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0ab      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fc:	4b57      	ldr	r3, [pc, #348]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ee      	beq.n	80020e6 <HAL_RCC_OscConfig+0x37e>
 8002108:	e014      	b.n	8002134 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff fb53 	bl	80017b4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff fb4f 	bl	80017b4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e095      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1ee      	bne.n	8002112 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002134:	7dfb      	ldrb	r3, [r7, #23]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d105      	bne.n	8002146 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b48      	ldr	r3, [pc, #288]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a47      	ldr	r2, [pc, #284]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002144:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8081 	beq.w	8002252 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002150:	4b42      	ldr	r3, [pc, #264]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d061      	beq.n	8002220 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d146      	bne.n	80021f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002164:	4b3f      	ldr	r3, [pc, #252]	; (8002264 <HAL_RCC_OscConfig+0x4fc>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7ff fb23 	bl	80017b4 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff fb1f 	bl	80017b4 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e067      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	492d      	ldr	r1, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a19      	ldr	r1, [r3, #32]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	430b      	orrs	r3, r1
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x4fc>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff faf3 	bl	80017b4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7ff faef 	bl	80017b4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e037      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x46a>
 80021f0:	e02f      	b.n	8002252 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <HAL_RCC_OscConfig+0x4fc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fadc 	bl	80017b4 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff fad8 	bl	80017b4 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e020      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x498>
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e013      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x4f4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	429a      	cmp	r2, r3
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	40007000 	.word	0x40007000
 8002264:	42420060 	.word	0x42420060

08002268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0d0      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b6a      	ldr	r3, [pc, #424]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d910      	bls.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b67      	ldr	r3, [pc, #412]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 0207 	bic.w	r2, r3, #7
 8002292:	4965      	ldr	r1, [pc, #404]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b63      	ldr	r3, [pc, #396]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0b8      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d020      	beq.n	80022fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	4a58      	ldr	r2, [pc, #352]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022dc:	4b53      	ldr	r3, [pc, #332]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a52      	ldr	r2, [pc, #328]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b50      	ldr	r3, [pc, #320]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	494d      	ldr	r1, [pc, #308]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d040      	beq.n	8002388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d115      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e07f      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d107      	bne.n	8002336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e073      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e06b      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4936      	ldr	r1, [pc, #216]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002358:	f7ff fa2c 	bl	80017b4 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7ff fa28 	bl	80017b4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e053      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d210      	bcs.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b24      	ldr	r3, [pc, #144]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4922      	ldr	r1, [pc, #136]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e032      	b.n	800241e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c4:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	4916      	ldr	r1, [pc, #88]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f6:	f000 f821 	bl	800243c <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490a      	ldr	r1, [pc, #40]	; (8002430 <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	fa22 f303 	lsr.w	r3, r2, r3
 800240e:	4a09      	ldr	r2, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1cc>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1d0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff f98a 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	08002d80 	.word	0x08002d80
 8002434:	2000005c 	.word	0x2000005c
 8002438:	20000060 	.word	0x20000060

0800243c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800243c:	b490      	push	{r4, r7}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002444:	1d3c      	adds	r4, r7, #4
 8002446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800244c:	f240 2301 	movw	r3, #513	; 0x201
 8002450:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b04      	cmp	r3, #4
 8002474:	d002      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x40>
 8002476:	2b08      	cmp	r3, #8
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x46>
 800247a:	e02d      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247e:	623b      	str	r3, [r7, #32]
      break;
 8002480:	e02d      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	0c9b      	lsrs	r3, r3, #18
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800248e:	4413      	add	r3, r2
 8002490:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002494:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c5b      	lsrs	r3, r3, #17
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024ae:	4413      	add	r3, r2
 80024b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ba:	fb02 f203 	mul.w	r2, r2, r3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
 80024c6:	e004      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	623b      	str	r3, [r7, #32]
      break;
 80024d6:	e002      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024da:	623b      	str	r3, [r7, #32]
      break;
 80024dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024de:	6a3b      	ldr	r3, [r7, #32]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3728      	adds	r7, #40	; 0x28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc90      	pop	{r4, r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	08002d70 	.word	0x08002d70
 80024f0:	40021000 	.word	0x40021000
 80024f4:	007a1200 	.word	0x007a1200
 80024f8:	003d0900 	.word	0x003d0900

080024fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <RCC_Delay+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <RCC_Delay+0x38>)
 800250a:	fba2 2303 	umull	r2, r3, r2, r3
 800250e:	0a5b      	lsrs	r3, r3, #9
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002518:	bf00      	nop
  }
  while (Delay --);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1e5a      	subs	r2, r3, #1
 800251e:	60fa      	str	r2, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <RCC_Delay+0x1c>
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	2000005c 	.word	0x2000005c
 8002534:	10624dd3 	.word	0x10624dd3

08002538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff f84e 	bl	8001600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fa6a 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d001      	beq.n	80025f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e035      	b.n	800265c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_TIM_Base_Start_IT+0x90>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d009      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0x4e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261a:	d004      	beq.n	8002626 <HAL_TIM_Base_Start_IT+0x4e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <HAL_TIM_Base_Start_IT+0x94>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d010      	beq.n	800265a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002648:	e007      	b.n	800265a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400

08002670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0202 	mvn.w	r2, #2
 800269c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f9b1 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f9a4 	bl	8002a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f9b3 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0204 	mvn.w	r2, #4
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f987 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f97a 	bl	8002a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f989 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b08      	cmp	r3, #8
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b08      	cmp	r3, #8
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0208 	mvn.w	r2, #8
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f95d 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f950 	bl	8002a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f95f 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b10      	cmp	r3, #16
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b10      	cmp	r3, #16
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0210 	mvn.w	r2, #16
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2208      	movs	r2, #8
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f933 	bl	8002a1a <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f926 	bl	8002a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f935 	bl	8002a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0201 	mvn.w	r2, #1
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fdd6 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b80      	cmp	r3, #128	; 0x80
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d107      	bne.n	8002820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fa67 	bl	8002cee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d10e      	bne.n	800284c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d107      	bne.n	800284c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f8f9 	bl	8002a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b20      	cmp	r3, #32
 8002858:	d10e      	bne.n	8002878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b20      	cmp	r3, #32
 8002866:	d107      	bne.n	8002878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0220 	mvn.w	r2, #32
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa32 	bl	8002cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_TIM_ConfigClockSource+0x18>
 8002894:	2302      	movs	r3, #2
 8002896:	e0b3      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x180>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d0:	d03e      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xd0>
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	f200 8087 	bhi.w	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	f000 8085 	beq.w	80029ec <HAL_TIM_ConfigClockSource+0x16c>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e6:	d87f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 80028e8:	2b70      	cmp	r3, #112	; 0x70
 80028ea:	d01a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xa2>
 80028ec:	2b70      	cmp	r3, #112	; 0x70
 80028ee:	d87b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 80028f0:	2b60      	cmp	r3, #96	; 0x60
 80028f2:	d050      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x116>
 80028f4:	2b60      	cmp	r3, #96	; 0x60
 80028f6:	d877      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 80028f8:	2b50      	cmp	r3, #80	; 0x50
 80028fa:	d03c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xf6>
 80028fc:	2b50      	cmp	r3, #80	; 0x50
 80028fe:	d873      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d058      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x136>
 8002904:	2b40      	cmp	r3, #64	; 0x40
 8002906:	d86f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 8002908:	2b30      	cmp	r3, #48	; 0x30
 800290a:	d064      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x156>
 800290c:	2b30      	cmp	r3, #48	; 0x30
 800290e:	d86b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d060      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x156>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d867      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x156>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d05a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002920:	e062      	b.n	80029e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f000 f95c 	bl	8002bee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002944:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	609a      	str	r2, [r3, #8]
      break;
 800294e:	e04e      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f000 f945 	bl	8002bee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002972:	609a      	str	r2, [r3, #8]
      break;
 8002974:	e03b      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 f8bc 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2150      	movs	r1, #80	; 0x50
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f913 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 8002994:	e02b      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 f8da 	bl	8002b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2160      	movs	r1, #96	; 0x60
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f903 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 80029b4:	e01b      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 f89c 	bl	8002b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2140      	movs	r1, #64	; 0x40
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f8f3 	bl	8002bba <TIM_ITRx_SetConfig>
      break;
 80029d4:	e00b      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 f8ea 	bl	8002bba <TIM_ITRx_SetConfig>
        break;
 80029e6:	e002      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <TIM_Base_SetConfig+0xa8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <TIM_Base_SetConfig+0x28>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d003      	beq.n	8002a78 <TIM_Base_SetConfig+0x28>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a22      	ldr	r2, [pc, #136]	; (8002afc <TIM_Base_SetConfig+0xac>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d108      	bne.n	8002a8a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <TIM_Base_SetConfig+0xa8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <TIM_Base_SetConfig+0x52>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a98:	d003      	beq.n	8002aa2 <TIM_Base_SetConfig+0x52>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a17      	ldr	r2, [pc, #92]	; (8002afc <TIM_Base_SetConfig+0xac>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d108      	bne.n	8002ab4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <TIM_Base_SetConfig+0xa8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d103      	bne.n	8002ae8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	615a      	str	r2, [r3, #20]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40000400 	.word	0x40000400

08002b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 030a 	bic.w	r3, r3, #10
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	621a      	str	r2, [r3, #32]
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f023 0210 	bic.w	r2, r3, #16
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	031b      	lsls	r3, r3, #12
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f043 0307 	orr.w	r3, r3, #7
 8002bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	609a      	str	r2, [r3, #8]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b087      	sub	sp, #28
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	609a      	str	r2, [r3, #8]
}
 8002c22:	bf00      	nop
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e041      	b.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a14      	ldr	r2, [pc, #80]	; (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d009      	beq.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d004      	beq.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a10      	ldr	r2, [pc, #64]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400

08002cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <__libc_init_array>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	2600      	movs	r6, #0
 8002d04:	4d0c      	ldr	r5, [pc, #48]	; (8002d38 <__libc_init_array+0x38>)
 8002d06:	4c0d      	ldr	r4, [pc, #52]	; (8002d3c <__libc_init_array+0x3c>)
 8002d08:	1b64      	subs	r4, r4, r5
 8002d0a:	10a4      	asrs	r4, r4, #2
 8002d0c:	42a6      	cmp	r6, r4
 8002d0e:	d109      	bne.n	8002d24 <__libc_init_array+0x24>
 8002d10:	f000 f822 	bl	8002d58 <_init>
 8002d14:	2600      	movs	r6, #0
 8002d16:	4d0a      	ldr	r5, [pc, #40]	; (8002d40 <__libc_init_array+0x40>)
 8002d18:	4c0a      	ldr	r4, [pc, #40]	; (8002d44 <__libc_init_array+0x44>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	42a6      	cmp	r6, r4
 8002d20:	d105      	bne.n	8002d2e <__libc_init_array+0x2e>
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
 8002d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d28:	4798      	blx	r3
 8002d2a:	3601      	adds	r6, #1
 8002d2c:	e7ee      	b.n	8002d0c <__libc_init_array+0xc>
 8002d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d32:	4798      	blx	r3
 8002d34:	3601      	adds	r6, #1
 8002d36:	e7f2      	b.n	8002d1e <__libc_init_array+0x1e>
 8002d38:	08002d90 	.word	0x08002d90
 8002d3c:	08002d90 	.word	0x08002d90
 8002d40:	08002d90 	.word	0x08002d90
 8002d44:	08002d94 	.word	0x08002d94

08002d48 <memset>:
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4402      	add	r2, r0
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d100      	bne.n	8002d52 <memset+0xa>
 8002d50:	4770      	bx	lr
 8002d52:	f803 1b01 	strb.w	r1, [r3], #1
 8002d56:	e7f9      	b.n	8002d4c <memset+0x4>

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
