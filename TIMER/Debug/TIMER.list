
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002fcc  08002fcc  00012fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fec  08002fec  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002fec  08002fec  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fec  08002fec  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000068  0800305c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800305c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098bb  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3d  00000000  00000000  0002994c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016dd4  00000000  00000000  0002c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfb2  00000000  00000000  000436e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fac  00000000  00000000  0004f696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000d1698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb4 	.word	0x08002fb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002fb4 	.word	0x08002fb4

0800014c <display7SEG>:
 *  Created on: Nov 5, 2022
 *      Author: Hong Phat
 */
#include "7segment.h"

 void display7SEG(int counter){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

 	  	  if(counter == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d122      	bne.n	80001a0 <display7SEG+0x54>
 	  		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2101      	movs	r1, #1
 800015e:	48bd      	ldr	r0, [pc, #756]	; (8000454 <display7SEG+0x308>)
 8000160:	f001 feff 	bl	8001f62 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000164:	2200      	movs	r2, #0
 8000166:	2102      	movs	r1, #2
 8000168:	48ba      	ldr	r0, [pc, #744]	; (8000454 <display7SEG+0x308>)
 800016a:	f001 fefa 	bl	8001f62 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800016e:	2200      	movs	r2, #0
 8000170:	2104      	movs	r1, #4
 8000172:	48b8      	ldr	r0, [pc, #736]	; (8000454 <display7SEG+0x308>)
 8000174:	f001 fef5 	bl	8001f62 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48b5      	ldr	r0, [pc, #724]	; (8000454 <display7SEG+0x308>)
 800017e:	f001 fef0 	bl	8001f62 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	48b3      	ldr	r0, [pc, #716]	; (8000454 <display7SEG+0x308>)
 8000188:	f001 feeb 	bl	8001f62 <HAL_GPIO_WritePin>
 	  		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2120      	movs	r1, #32
 8000190:	48b0      	ldr	r0, [pc, #704]	; (8000454 <display7SEG+0x308>)
 8000192:	f001 fee6 	bl	8001f62 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	48ae      	ldr	r0, [pc, #696]	; (8000454 <display7SEG+0x308>)
 800019c:	f001 fee1 	bl	8001f62 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==1){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d122      	bne.n	80001ec <display7SEG+0xa0>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2102      	movs	r1, #2
 80001aa:	48aa      	ldr	r0, [pc, #680]	; (8000454 <display7SEG+0x308>)
 80001ac:	f001 fed9 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	2104      	movs	r1, #4
 80001b4:	48a7      	ldr	r0, [pc, #668]	; (8000454 <display7SEG+0x308>)
 80001b6:	f001 fed4 	bl	8001f62 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2101      	movs	r1, #1
 80001be:	48a5      	ldr	r0, [pc, #660]	; (8000454 <display7SEG+0x308>)
 80001c0:	f001 fecf 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2108      	movs	r1, #8
 80001c8:	48a2      	ldr	r0, [pc, #648]	; (8000454 <display7SEG+0x308>)
 80001ca:	f001 feca 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	48a0      	ldr	r0, [pc, #640]	; (8000454 <display7SEG+0x308>)
 80001d4:	f001 fec5 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2120      	movs	r1, #32
 80001dc:	489d      	ldr	r0, [pc, #628]	; (8000454 <display7SEG+0x308>)
 80001de:	f001 fec0 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2140      	movs	r1, #64	; 0x40
 80001e6:	489b      	ldr	r0, [pc, #620]	; (8000454 <display7SEG+0x308>)
 80001e8:	f001 febb 	bl	8001f62 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==2){
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d122      	bne.n	8000238 <display7SEG+0xec>
 	 		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2101      	movs	r1, #1
 80001f6:	4897      	ldr	r0, [pc, #604]	; (8000454 <display7SEG+0x308>)
 80001f8:	f001 feb3 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2102      	movs	r1, #2
 8000200:	4894      	ldr	r0, [pc, #592]	; (8000454 <display7SEG+0x308>)
 8000202:	f001 feae 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	2108      	movs	r1, #8
 800020a:	4892      	ldr	r0, [pc, #584]	; (8000454 <display7SEG+0x308>)
 800020c:	f001 fea9 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	488f      	ldr	r0, [pc, #572]	; (8000454 <display7SEG+0x308>)
 8000216:	f001 fea4 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	488d      	ldr	r0, [pc, #564]	; (8000454 <display7SEG+0x308>)
 8000220:	f001 fe9f 	bl	8001f62 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	2104      	movs	r1, #4
 8000228:	488a      	ldr	r0, [pc, #552]	; (8000454 <display7SEG+0x308>)
 800022a:	f001 fe9a 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800022e:	2201      	movs	r2, #1
 8000230:	2120      	movs	r1, #32
 8000232:	4888      	ldr	r0, [pc, #544]	; (8000454 <display7SEG+0x308>)
 8000234:	f001 fe95 	bl	8001f62 <HAL_GPIO_WritePin>
 	 	  }
 	 	   if(counter==3){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2b03      	cmp	r3, #3
 800023c:	d122      	bne.n	8000284 <display7SEG+0x138>
 	 		 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	2101      	movs	r1, #1
 8000242:	4884      	ldr	r0, [pc, #528]	; (8000454 <display7SEG+0x308>)
 8000244:	f001 fe8d 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2102      	movs	r1, #2
 800024c:	4881      	ldr	r0, [pc, #516]	; (8000454 <display7SEG+0x308>)
 800024e:	f001 fe88 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2104      	movs	r1, #4
 8000256:	487f      	ldr	r0, [pc, #508]	; (8000454 <display7SEG+0x308>)
 8000258:	f001 fe83 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2108      	movs	r1, #8
 8000260:	487c      	ldr	r0, [pc, #496]	; (8000454 <display7SEG+0x308>)
 8000262:	f001 fe7e 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	487a      	ldr	r0, [pc, #488]	; (8000454 <display7SEG+0x308>)
 800026c:	f001 fe79 	bl	8001f62 <HAL_GPIO_WritePin>

 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	2110      	movs	r1, #16
 8000274:	4877      	ldr	r0, [pc, #476]	; (8000454 <display7SEG+0x308>)
 8000276:	f001 fe74 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2120      	movs	r1, #32
 800027e:	4875      	ldr	r0, [pc, #468]	; (8000454 <display7SEG+0x308>)
 8000280:	f001 fe6f 	bl	8001f62 <HAL_GPIO_WritePin>

 	 	  }
 	 	 if(counter==4){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2b04      	cmp	r3, #4
 8000288:	d122      	bne.n	80002d0 <display7SEG+0x184>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2102      	movs	r1, #2
 800028e:	4871      	ldr	r0, [pc, #452]	; (8000454 <display7SEG+0x308>)
 8000290:	f001 fe67 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000294:	2200      	movs	r2, #0
 8000296:	2104      	movs	r1, #4
 8000298:	486e      	ldr	r0, [pc, #440]	; (8000454 <display7SEG+0x308>)
 800029a:	f001 fe62 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2120      	movs	r1, #32
 80002a2:	486c      	ldr	r0, [pc, #432]	; (8000454 <display7SEG+0x308>)
 80002a4:	f001 fe5d 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80002a8:	2200      	movs	r2, #0
 80002aa:	2140      	movs	r1, #64	; 0x40
 80002ac:	4869      	ldr	r0, [pc, #420]	; (8000454 <display7SEG+0x308>)
 80002ae:	f001 fe58 	bl	8001f62 <HAL_GPIO_WritePin>

 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	2101      	movs	r1, #1
 80002b6:	4867      	ldr	r0, [pc, #412]	; (8000454 <display7SEG+0x308>)
 80002b8:	f001 fe53 	bl	8001f62 <HAL_GPIO_WritePin>
 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2108      	movs	r1, #8
 80002c0:	4864      	ldr	r0, [pc, #400]	; (8000454 <display7SEG+0x308>)
 80002c2:	f001 fe4e 	bl	8001f62 <HAL_GPIO_WritePin>
 	 	 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2110      	movs	r1, #16
 80002ca:	4862      	ldr	r0, [pc, #392]	; (8000454 <display7SEG+0x308>)
 80002cc:	f001 fe49 	bl	8001f62 <HAL_GPIO_WritePin>
 	 	 	  }
 	 	 if(counter==5){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2b05      	cmp	r3, #5
 80002d4:	d122      	bne.n	800031c <display7SEG+0x1d0>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2101      	movs	r1, #1
 80002da:	485e      	ldr	r0, [pc, #376]	; (8000454 <display7SEG+0x308>)
 80002dc:	f001 fe41 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2104      	movs	r1, #4
 80002e4:	485b      	ldr	r0, [pc, #364]	; (8000454 <display7SEG+0x308>)
 80002e6:	f001 fe3c 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2108      	movs	r1, #8
 80002ee:	4859      	ldr	r0, [pc, #356]	; (8000454 <display7SEG+0x308>)
 80002f0:	f001 fe37 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2120      	movs	r1, #32
 80002f8:	4856      	ldr	r0, [pc, #344]	; (8000454 <display7SEG+0x308>)
 80002fa:	f001 fe32 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		 	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	4854      	ldr	r0, [pc, #336]	; (8000454 <display7SEG+0x308>)
 8000304:	f001 fe2d 	bl	8001f62 <HAL_GPIO_WritePin>

 	 			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2102      	movs	r1, #2
 800030c:	4851      	ldr	r0, [pc, #324]	; (8000454 <display7SEG+0x308>)
 800030e:	f001 fe28 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2110      	movs	r1, #16
 8000316:	484f      	ldr	r0, [pc, #316]	; (8000454 <display7SEG+0x308>)
 8000318:	f001 fe23 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==6){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b06      	cmp	r3, #6
 8000320:	d122      	bne.n	8000368 <display7SEG+0x21c>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2101      	movs	r1, #1
 8000326:	484b      	ldr	r0, [pc, #300]	; (8000454 <display7SEG+0x308>)
 8000328:	f001 fe1b 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2104      	movs	r1, #4
 8000330:	4848      	ldr	r0, [pc, #288]	; (8000454 <display7SEG+0x308>)
 8000332:	f001 fe16 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2108      	movs	r1, #8
 800033a:	4846      	ldr	r0, [pc, #280]	; (8000454 <display7SEG+0x308>)
 800033c:	f001 fe11 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2110      	movs	r1, #16
 8000344:	4843      	ldr	r0, [pc, #268]	; (8000454 <display7SEG+0x308>)
 8000346:	f001 fe0c 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2120      	movs	r1, #32
 800034e:	4841      	ldr	r0, [pc, #260]	; (8000454 <display7SEG+0x308>)
 8000350:	f001 fe07 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000354:	2200      	movs	r2, #0
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	483e      	ldr	r0, [pc, #248]	; (8000454 <display7SEG+0x308>)
 800035a:	f001 fe02 	bl	8001f62 <HAL_GPIO_WritePin>

 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	2102      	movs	r1, #2
 8000362:	483c      	ldr	r0, [pc, #240]	; (8000454 <display7SEG+0x308>)
 8000364:	f001 fdfd 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==7){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b07      	cmp	r3, #7
 800036c:	d122      	bne.n	80003b4 <display7SEG+0x268>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2101      	movs	r1, #1
 8000372:	4838      	ldr	r0, [pc, #224]	; (8000454 <display7SEG+0x308>)
 8000374:	f001 fdf5 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	4835      	ldr	r0, [pc, #212]	; (8000454 <display7SEG+0x308>)
 800037e:	f001 fdf0 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2104      	movs	r1, #4
 8000386:	4833      	ldr	r0, [pc, #204]	; (8000454 <display7SEG+0x308>)
 8000388:	f001 fdeb 	bl	8001f62 <HAL_GPIO_WritePin>


 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4830      	ldr	r0, [pc, #192]	; (8000454 <display7SEG+0x308>)
 8000392:	f001 fde6 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2110      	movs	r1, #16
 800039a:	482e      	ldr	r0, [pc, #184]	; (8000454 <display7SEG+0x308>)
 800039c:	f001 fde1 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2120      	movs	r1, #32
 80003a4:	482b      	ldr	r0, [pc, #172]	; (8000454 <display7SEG+0x308>)
 80003a6:	f001 fddc 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2140      	movs	r1, #64	; 0x40
 80003ae:	4829      	ldr	r0, [pc, #164]	; (8000454 <display7SEG+0x308>)
 80003b0:	f001 fdd7 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter == 8){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b08      	cmp	r3, #8
 80003b8:	d122      	bne.n	8000400 <display7SEG+0x2b4>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	4825      	ldr	r0, [pc, #148]	; (8000454 <display7SEG+0x308>)
 80003c0:	f001 fdcf 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4822      	ldr	r0, [pc, #136]	; (8000454 <display7SEG+0x308>)
 80003ca:	f001 fdca 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2104      	movs	r1, #4
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <display7SEG+0x308>)
 80003d4:	f001 fdc5 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <display7SEG+0x308>)
 80003de:	f001 fdc0 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2110      	movs	r1, #16
 80003e6:	481b      	ldr	r0, [pc, #108]	; (8000454 <display7SEG+0x308>)
 80003e8:	f001 fdbb 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2120      	movs	r1, #32
 80003f0:	4818      	ldr	r0, [pc, #96]	; (8000454 <display7SEG+0x308>)
 80003f2:	f001 fdb6 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <display7SEG+0x308>)
 80003fc:	f001 fdb1 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		   }
 	 		   if(counter==9){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d122      	bne.n	800044c <display7SEG+0x300>
 	 			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	4812      	ldr	r0, [pc, #72]	; (8000454 <display7SEG+0x308>)
 800040c:	f001 fda9 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	480f      	ldr	r0, [pc, #60]	; (8000454 <display7SEG+0x308>)
 8000416:	f001 fda4 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <display7SEG+0x308>)
 8000420:	f001 fd9f 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	480a      	ldr	r0, [pc, #40]	; (8000454 <display7SEG+0x308>)
 800042a:	f001 fd9a 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <display7SEG+0x308>)
 8000434:	f001 fd95 	bl	8001f62 <HAL_GPIO_WritePin>
 	 			  	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <display7SEG+0x308>)
 800043e:	f001 fd90 	bl	8001f62 <HAL_GPIO_WritePin>

 	 			   HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2110      	movs	r1, #16
 8000446:	4803      	ldr	r0, [pc, #12]	; (8000454 <display7SEG+0x308>)
 8000448:	f001 fd8b 	bl	8001f62 <HAL_GPIO_WritePin>
 	 		   }
   }
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40010c00 	.word	0x40010c00

08000458 <isButton1Pressed>:
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;


int isButton1Pressed(){
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <isButton1Pressed+0x20>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d104      	bne.n	800046e <isButton1Pressed+0x16>
		button1_flag = 0;
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <isButton1Pressed+0x20>)
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
		return 1;
 800046a:	2301      	movs	r3, #1
 800046c:	e000      	b.n	8000470 <isButton1Pressed+0x18>
	}
	return 0;
 800046e:	2300      	movs	r3, #0
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000084 	.word	0x20000084

0800047c <isButton2Pressed>:
int isButton2Pressed(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <isButton2Pressed+0x20>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d104      	bne.n	8000492 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <isButton2Pressed+0x20>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		return 1;
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <isButton2Pressed+0x18>
	}
	return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000088 	.word	0x20000088

080004a0 <isButton3Pressed>:
int isButton3Pressed(){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <isButton3Pressed+0x20>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d104      	bne.n	80004b6 <isButton3Pressed+0x16>
		button3_flag = 0;
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <isButton3Pressed+0x20>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
		return 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	e000      	b.n	80004b8 <isButton3Pressed+0x18>
	}
	return 0;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	2000008c 	.word	0x2000008c

080004c4 <subKeyProcess>:
void subKeyProcess(int i){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	//TODO
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	if(i==0){
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d103      	bne.n	80004da <subKeyProcess+0x16>
	button1_flag = 1;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <subKeyProcess+0x3c>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	601a      	str	r2, [r3, #0]
		button2_flag = 1;
	}
	else if(i == 2){
		button3_flag = 1;
	}
}
 80004d8:	e00c      	b.n	80004f4 <subKeyProcess+0x30>
	else if(i==1){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d103      	bne.n	80004e8 <subKeyProcess+0x24>
		button2_flag = 1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <subKeyProcess+0x40>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
}
 80004e6:	e005      	b.n	80004f4 <subKeyProcess+0x30>
	else if(i == 2){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d102      	bne.n	80004f4 <subKeyProcess+0x30>
		button3_flag = 1;
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <subKeyProcess+0x44>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000084 	.word	0x20000084
 8000504:	20000088 	.word	0x20000088
 8000508:	2000008c 	.word	0x2000008c

0800050c <getKeyInput>:

void getKeyInput(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
  for(int i=0;i<3;i++){
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	e07f      	b.n	8000618 <getKeyInput+0x10c>
	  KeyReg0[i] = KeyReg1[i];
 8000518:	4a44      	ldr	r2, [pc, #272]	; (800062c <getKeyInput+0x120>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000520:	4943      	ldr	r1, [pc, #268]	; (8000630 <getKeyInput+0x124>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg2[i];
 8000528:	4a42      	ldr	r2, [pc, #264]	; (8000634 <getKeyInput+0x128>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000530:	493e      	ldr	r1, [pc, #248]	; (800062c <getKeyInput+0x120>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  if( i== 0){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d10a      	bne.n	8000554 <getKeyInput+0x48>
	  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	483d      	ldr	r0, [pc, #244]	; (8000638 <getKeyInput+0x12c>)
 8000542:	f001 fcf7 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	4619      	mov	r1, r3
 800054a:	4a3a      	ldr	r2, [pc, #232]	; (8000634 <getKeyInput+0x128>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000552:	e01c      	b.n	800058e <getKeyInput+0x82>
	  }
	  else if(i==1){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10b      	bne.n	8000572 <getKeyInput+0x66>
		  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4836      	ldr	r0, [pc, #216]	; (8000638 <getKeyInput+0x12c>)
 8000560:	f001 fce8 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000564:	4603      	mov	r3, r0
 8000566:	4619      	mov	r1, r3
 8000568:	4a32      	ldr	r2, [pc, #200]	; (8000634 <getKeyInput+0x128>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000570:	e00d      	b.n	800058e <getKeyInput+0x82>
	  }
	  else if(i==2){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d10a      	bne.n	800058e <getKeyInput+0x82>
		  KeyReg2[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	482e      	ldr	r0, [pc, #184]	; (8000638 <getKeyInput+0x12c>)
 800057e:	f001 fcd9 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	4619      	mov	r1, r3
 8000586:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <getKeyInput+0x128>)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }
	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800058e:	4a27      	ldr	r2, [pc, #156]	; (800062c <getKeyInput+0x120>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000596:	4926      	ldr	r1, [pc, #152]	; (8000630 <getKeyInput+0x124>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d137      	bne.n	8000612 <getKeyInput+0x106>
 80005a2:	4a22      	ldr	r2, [pc, #136]	; (800062c <getKeyInput+0x120>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005aa:	4922      	ldr	r1, [pc, #136]	; (8000634 <getKeyInput+0x128>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d12d      	bne.n	8000612 <getKeyInput+0x106>
		  if (KeyReg2[i] != KeyReg3[i]){
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <getKeyInput+0x128>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005be:	491f      	ldr	r1, [pc, #124]	; (800063c <getKeyInput+0x130>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d015      	beq.n	80005f6 <getKeyInput+0xea>
			  KeyReg3[i] = KeyReg2[i];
 80005ca:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <getKeyInput+0x128>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d2:	491a      	ldr	r1, [pc, #104]	; (800063c <getKeyInput+0x130>)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  if (KeyReg2[i] == PRESSED_STATE){
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <getKeyInput+0x128>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d115      	bne.n	8000612 <getKeyInput+0x106>
				TimeOutForKeyPress = 3000;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <getKeyInput+0x134>)
 80005e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80005ec:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ff68 	bl	80004c4 <subKeyProcess>
 80005f4:	e00d      	b.n	8000612 <getKeyInput+0x106>
			  }
		}else{
		   TimeOutForKeyPress --;
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <getKeyInput+0x134>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <getKeyInput+0x134>)
 80005fe:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0){
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <getKeyInput+0x134>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d104      	bne.n	8000612 <getKeyInput+0x106>
			  KeyReg3[i] = NORMAL_STATE;
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <getKeyInput+0x130>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2101      	movs	r1, #1
 800060e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0;i<3;i++){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b02      	cmp	r3, #2
 800061c:	f77f af7c 	ble.w	8000518 <getKeyInput+0xc>
			}
		}
	  }
	}
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	2000000c 	.word	0x2000000c
 8000630:	20000000 	.word	0x20000000
 8000634:	20000018 	.word	0x20000018
 8000638:	40010c00 	.word	0x40010c00
 800063c:	20000024 	.word	0x20000024
 8000640:	20000030 	.word	0x20000030

08000644 <display>:
 *
 *  Created on: Nov 9, 2022
 *      Author: Hong Phat
 */
#include "display.h"
void display(int led, int mode){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	if(mode == 1){
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	f040 8322 	bne.w	8000c9a <display+0x656>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b03      	cmp	r3, #3
 800065c:	f200 831f 	bhi.w	8000c9e <display+0x65a>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <display+0x24>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000679 	.word	0x08000679
 800066c:	080007d7 	.word	0x080007d7
 8000670:	0800095b 	.word	0x0800095b
 8000674:	08000ac7 	.word	0x08000ac7
		switch(led){
		case 1:
			switch(status){
 8000678:	4bca      	ldr	r3, [pc, #808]	; (80009a4 <display+0x360>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	2b0d      	cmp	r3, #13
 8000680:	f200 80a7 	bhi.w	80007d2 <display+0x18e>
 8000684:	a201      	add	r2, pc, #4	; (adr r2, 800068c <display+0x48>)
 8000686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068a:	bf00      	nop
 800068c:	080006c5 	.word	0x080006c5
 8000690:	08000709 	.word	0x08000709
 8000694:	0800074d 	.word	0x0800074d
 8000698:	080007d3 	.word	0x080007d3
 800069c:	080007d3 	.word	0x080007d3
 80006a0:	080007d3 	.word	0x080007d3
 80006a4:	080007d3 	.word	0x080007d3
 80006a8:	080007d3 	.word	0x080007d3
 80006ac:	080007d3 	.word	0x080007d3
 80006b0:	080007d3 	.word	0x080007d3
 80006b4:	080007d3 	.word	0x080007d3
 80006b8:	08000791 	.word	0x08000791
 80006bc:	08000791 	.word	0x08000791
 80006c0:	08000791 	.word	0x08000791
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	48b7      	ldr	r0, [pc, #732]	; (80009a8 <display+0x364>)
 80006ca:	f001 fc4a 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d4:	48b4      	ldr	r0, [pc, #720]	; (80009a8 <display+0x364>)
 80006d6:	f001 fc44 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e0:	48b1      	ldr	r0, [pc, #708]	; (80009a8 <display+0x364>)
 80006e2:	f001 fc3e 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	48af      	ldr	r0, [pc, #700]	; (80009a8 <display+0x364>)
 80006ec:	f001 fc39 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timerred_counter/10);
 80006f0:	4bae      	ldr	r3, [pc, #696]	; (80009ac <display+0x368>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4aae      	ldr	r2, [pc, #696]	; (80009b0 <display+0x36c>)
 80006f6:	fb82 1203 	smull	r1, r2, r2, r3
 80006fa:	1092      	asrs	r2, r2, #2
 80006fc:	17db      	asrs	r3, r3, #31
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd23 	bl	800014c <display7SEG>
					break;
 8000706:	e065      	b.n	80007d4 <display+0x190>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800070e:	48a6      	ldr	r0, [pc, #664]	; (80009a8 <display+0x364>)
 8000710:	f001 fc27 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	48a3      	ldr	r0, [pc, #652]	; (80009a8 <display+0x364>)
 800071c:	f001 fc21 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	48a0      	ldr	r0, [pc, #640]	; (80009a8 <display+0x364>)
 8000726:	f001 fc1c 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 800072a:	2200      	movs	r2, #0
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	489e      	ldr	r0, [pc, #632]	; (80009a8 <display+0x364>)
 8000730:	f001 fc17 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timeryellow_counter/10);
 8000734:	4b9f      	ldr	r3, [pc, #636]	; (80009b4 <display+0x370>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a9d      	ldr	r2, [pc, #628]	; (80009b0 <display+0x36c>)
 800073a:	fb82 1203 	smull	r1, r2, r2, r3
 800073e:	1092      	asrs	r2, r2, #2
 8000740:	17db      	asrs	r3, r3, #31
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd01 	bl	800014c <display7SEG>
					break;
 800074a:	e043      	b.n	80007d4 <display+0x190>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000752:	4895      	ldr	r0, [pc, #596]	; (80009a8 <display+0x364>)
 8000754:	f001 fc05 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075e:	4892      	ldr	r0, [pc, #584]	; (80009a8 <display+0x364>)
 8000760:	f001 fbff 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	488f      	ldr	r0, [pc, #572]	; (80009a8 <display+0x364>)
 800076a:	f001 fbfa 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	488d      	ldr	r0, [pc, #564]	; (80009a8 <display+0x364>)
 8000774:	f001 fbf5 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timergreen_counter/10);
 8000778:	4b8f      	ldr	r3, [pc, #572]	; (80009b8 <display+0x374>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a8c      	ldr	r2, [pc, #560]	; (80009b0 <display+0x36c>)
 800077e:	fb82 1203 	smull	r1, r2, r2, r3
 8000782:	1092      	asrs	r2, r2, #2
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fcdf 	bl	800014c <display7SEG>
					break;
 800078e:	e021      	b.n	80007d4 <display+0x190>
				case MAN_RED:
				case MAN_GREEN:
				case MAN_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000790:	2201      	movs	r2, #1
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	4884      	ldr	r0, [pc, #528]	; (80009a8 <display+0x364>)
 8000796:	f001 fbe4 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	4881      	ldr	r0, [pc, #516]	; (80009a8 <display+0x364>)
 80007a2:	f001 fbde 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ac:	487e      	ldr	r0, [pc, #504]	; (80009a8 <display+0x364>)
 80007ae:	f001 fbd8 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2140      	movs	r1, #64	; 0x40
 80007b6:	487c      	ldr	r0, [pc, #496]	; (80009a8 <display+0x364>)
 80007b8:	f001 fbd3 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(set_timer/10);
 80007bc:	4b7f      	ldr	r3, [pc, #508]	; (80009bc <display+0x378>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a7b      	ldr	r2, [pc, #492]	; (80009b0 <display+0x36c>)
 80007c2:	fb82 1203 	smull	r1, r2, r2, r3
 80007c6:	1092      	asrs	r2, r2, #2
 80007c8:	17db      	asrs	r3, r3, #31
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fcbd 	bl	800014c <display7SEG>
				default:
					break;
 80007d2:	bf00      	nop
			}
			break;
 80007d4:	e264      	b.n	8000ca0 <display+0x65c>
		case 2:
			switch(status){
 80007d6:	4b73      	ldr	r3, [pc, #460]	; (80009a4 <display+0x360>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3b01      	subs	r3, #1
 80007dc:	2b0d      	cmp	r3, #13
 80007de:	f200 80ba 	bhi.w	8000956 <display+0x312>
 80007e2:	a201      	add	r2, pc, #4	; (adr r2, 80007e8 <display+0x1a4>)
 80007e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e8:	08000821 	.word	0x08000821
 80007ec:	0800086f 	.word	0x0800086f
 80007f0:	080008bd 	.word	0x080008bd
 80007f4:	08000957 	.word	0x08000957
 80007f8:	08000957 	.word	0x08000957
 80007fc:	08000957 	.word	0x08000957
 8000800:	08000957 	.word	0x08000957
 8000804:	08000957 	.word	0x08000957
 8000808:	08000957 	.word	0x08000957
 800080c:	08000957 	.word	0x08000957
 8000810:	08000957 	.word	0x08000957
 8000814:	0800090b 	.word	0x0800090b
 8000818:	0800090b 	.word	0x0800090b
 800081c:	0800090b 	.word	0x0800090b
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000820:	2201      	movs	r2, #1
 8000822:	2140      	movs	r1, #64	; 0x40
 8000824:	4860      	ldr	r0, [pc, #384]	; (80009a8 <display+0x364>)
 8000826:	f001 fb9c 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000830:	485d      	ldr	r0, [pc, #372]	; (80009a8 <display+0x364>)
 8000832:	f001 fb96 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000836:	2201      	movs	r2, #1
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	485a      	ldr	r0, [pc, #360]	; (80009a8 <display+0x364>)
 800083e:	f001 fb90 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000842:	2200      	movs	r2, #0
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	4858      	ldr	r0, [pc, #352]	; (80009a8 <display+0x364>)
 8000848:	f001 fb8b 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timerred_counter%10);
 800084c:	4b57      	ldr	r3, [pc, #348]	; (80009ac <display+0x368>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b57      	ldr	r3, [pc, #348]	; (80009b0 <display+0x36c>)
 8000852:	fb83 1302 	smull	r1, r3, r3, r2
 8000856:	1099      	asrs	r1, r3, #2
 8000858:	17d3      	asrs	r3, r2, #31
 800085a:	1ac9      	subs	r1, r1, r3
 800085c:	460b      	mov	r3, r1
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	440b      	add	r3, r1
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	1ad1      	subs	r1, r2, r3
 8000866:	4608      	mov	r0, r1
 8000868:	f7ff fc70 	bl	800014c <display7SEG>
					break;
 800086c:	e074      	b.n	8000958 <display+0x314>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800086e:	2201      	movs	r2, #1
 8000870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000874:	484c      	ldr	r0, [pc, #304]	; (80009a8 <display+0x364>)
 8000876:	f001 fb74 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000880:	4849      	ldr	r0, [pc, #292]	; (80009a8 <display+0x364>)
 8000882:	f001 fb6e 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000886:	2201      	movs	r2, #1
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4847      	ldr	r0, [pc, #284]	; (80009a8 <display+0x364>)
 800088c:	f001 fb69 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	4844      	ldr	r0, [pc, #272]	; (80009a8 <display+0x364>)
 8000896:	f001 fb64 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timeryellow_counter%10);
 800089a:	4b46      	ldr	r3, [pc, #280]	; (80009b4 <display+0x370>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	4b44      	ldr	r3, [pc, #272]	; (80009b0 <display+0x36c>)
 80008a0:	fb83 1302 	smull	r1, r3, r3, r2
 80008a4:	1099      	asrs	r1, r3, #2
 80008a6:	17d3      	asrs	r3, r2, #31
 80008a8:	1ac9      	subs	r1, r1, r3
 80008aa:	460b      	mov	r3, r1
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	1ad1      	subs	r1, r2, r3
 80008b4:	4608      	mov	r0, r1
 80008b6:	f7ff fc49 	bl	800014c <display7SEG>
					break;
 80008ba:	e04d      	b.n	8000958 <display+0x314>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	4839      	ldr	r0, [pc, #228]	; (80009a8 <display+0x364>)
 80008c4:	f001 fb4d 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	4836      	ldr	r0, [pc, #216]	; (80009a8 <display+0x364>)
 80008d0:	f001 fb47 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2140      	movs	r1, #64	; 0x40
 80008d8:	4833      	ldr	r0, [pc, #204]	; (80009a8 <display+0x364>)
 80008da:	f001 fb42 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	4831      	ldr	r0, [pc, #196]	; (80009a8 <display+0x364>)
 80008e4:	f001 fb3d 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timergreen_counter%10);
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <display+0x374>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <display+0x36c>)
 80008ee:	fb83 1302 	smull	r1, r3, r3, r2
 80008f2:	1099      	asrs	r1, r3, #2
 80008f4:	17d3      	asrs	r3, r2, #31
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	1ad1      	subs	r1, r2, r3
 8000902:	4608      	mov	r0, r1
 8000904:	f7ff fc22 	bl	800014c <display7SEG>
					break;
 8000908:	e026      	b.n	8000958 <display+0x314>
				case MAN_RED:
				case MAN_GREEN:
				case MAN_YELLOW:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000910:	4825      	ldr	r0, [pc, #148]	; (80009a8 <display+0x364>)
 8000912:	f001 fb26 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000916:	2201      	movs	r2, #1
 8000918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091c:	4822      	ldr	r0, [pc, #136]	; (80009a8 <display+0x364>)
 800091e:	f001 fb20 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000922:	2201      	movs	r2, #1
 8000924:	2140      	movs	r1, #64	; 0x40
 8000926:	4820      	ldr	r0, [pc, #128]	; (80009a8 <display+0x364>)
 8000928:	f001 fb1b 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,0);
 800092c:	2200      	movs	r2, #0
 800092e:	2180      	movs	r1, #128	; 0x80
 8000930:	481d      	ldr	r0, [pc, #116]	; (80009a8 <display+0x364>)
 8000932:	f001 fb16 	bl	8001f62 <HAL_GPIO_WritePin>
					display7SEG(set_timer%10);
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <display+0x378>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <display+0x36c>)
 800093c:	fb83 1302 	smull	r1, r3, r3, r2
 8000940:	1099      	asrs	r1, r3, #2
 8000942:	17d3      	asrs	r3, r2, #31
 8000944:	1ac9      	subs	r1, r1, r3
 8000946:	460b      	mov	r3, r1
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	440b      	add	r3, r1
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	1ad1      	subs	r1, r2, r3
 8000950:	4608      	mov	r0, r1
 8000952:	f7ff fbfb 	bl	800014c <display7SEG>
				default:
					break;
 8000956:	bf00      	nop
			}
			break;
 8000958:	e1a2      	b.n	8000ca0 <display+0x65c>
		case 3:
			switch(status2){
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <display+0x37c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	2b0d      	cmp	r3, #13
 8000962:	f200 80ae 	bhi.w	8000ac2 <display+0x47e>
 8000966:	a201      	add	r2, pc, #4	; (adr r2, 800096c <display+0x328>)
 8000968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096c:	080009c5 	.word	0x080009c5
 8000970:	08000a09 	.word	0x08000a09
 8000974:	08000a4d 	.word	0x08000a4d
 8000978:	08000ac3 	.word	0x08000ac3
 800097c:	08000ac3 	.word	0x08000ac3
 8000980:	08000ac3 	.word	0x08000ac3
 8000984:	08000ac3 	.word	0x08000ac3
 8000988:	08000ac3 	.word	0x08000ac3
 800098c:	08000ac3 	.word	0x08000ac3
 8000990:	08000ac3 	.word	0x08000ac3
 8000994:	08000ac3 	.word	0x08000ac3
 8000998:	08000a91 	.word	0x08000a91
 800099c:	08000a91 	.word	0x08000a91
 80009a0:	08000a91 	.word	0x08000a91
 80009a4:	200000c0 	.word	0x200000c0
 80009a8:	40010800 	.word	0x40010800
 80009ac:	20000040 	.word	0x20000040
 80009b0:	66666667 	.word	0x66666667
 80009b4:	20000044 	.word	0x20000044
 80009b8:	20000048 	.word	0x20000048
 80009bc:	20000090 	.word	0x20000090
 80009c0:	200000bc 	.word	0x200000bc
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	48b7      	ldr	r0, [pc, #732]	; (8000ca8 <display+0x664>)
 80009ca:	f001 faca 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d4:	48b4      	ldr	r0, [pc, #720]	; (8000ca8 <display+0x664>)
 80009d6:	f001 fac4 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 80009da:	2201      	movs	r2, #1
 80009dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e0:	48b1      	ldr	r0, [pc, #708]	; (8000ca8 <display+0x664>)
 80009e2:	f001 fabe 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 80009e6:	2201      	movs	r2, #1
 80009e8:	2140      	movs	r1, #64	; 0x40
 80009ea:	48af      	ldr	r0, [pc, #700]	; (8000ca8 <display+0x664>)
 80009ec:	f001 fab9 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timerred2_counter/10);
 80009f0:	4bae      	ldr	r3, [pc, #696]	; (8000cac <display+0x668>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4aae      	ldr	r2, [pc, #696]	; (8000cb0 <display+0x66c>)
 80009f6:	fb82 1203 	smull	r1, r2, r2, r3
 80009fa:	1092      	asrs	r2, r2, #2
 80009fc:	17db      	asrs	r3, r3, #31
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fba3 	bl	800014c <display7SEG>
					break;
 8000a06:	e05d      	b.n	8000ac4 <display+0x480>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0e:	48a6      	ldr	r0, [pc, #664]	; (8000ca8 <display+0x664>)
 8000a10:	f001 faa7 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a1a:	48a3      	ldr	r0, [pc, #652]	; (8000ca8 <display+0x664>)
 8000a1c:	f001 faa1 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	48a0      	ldr	r0, [pc, #640]	; (8000ca8 <display+0x664>)
 8000a26:	f001 fa9c 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	489e      	ldr	r0, [pc, #632]	; (8000ca8 <display+0x664>)
 8000a30:	f001 fa97 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timeryellow2_counter/10);
 8000a34:	4b9f      	ldr	r3, [pc, #636]	; (8000cb4 <display+0x670>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a9d      	ldr	r2, [pc, #628]	; (8000cb0 <display+0x66c>)
 8000a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3e:	1092      	asrs	r2, r2, #2
 8000a40:	17db      	asrs	r3, r3, #31
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fb81 	bl	800014c <display7SEG>
					break;
 8000a4a:	e03b      	b.n	8000ac4 <display+0x480>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a52:	4895      	ldr	r0, [pc, #596]	; (8000ca8 <display+0x664>)
 8000a54:	f001 fa85 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5e:	4892      	ldr	r0, [pc, #584]	; (8000ca8 <display+0x664>)
 8000a60:	f001 fa7f 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	488f      	ldr	r0, [pc, #572]	; (8000ca8 <display+0x664>)
 8000a6a:	f001 fa7a 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	2140      	movs	r1, #64	; 0x40
 8000a72:	488d      	ldr	r0, [pc, #564]	; (8000ca8 <display+0x664>)
 8000a74:	f001 fa75 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timergreen2_counter/10);
 8000a78:	4b8f      	ldr	r3, [pc, #572]	; (8000cb8 <display+0x674>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a8c      	ldr	r2, [pc, #560]	; (8000cb0 <display+0x66c>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	1092      	asrs	r2, r2, #2
 8000a84:	17db      	asrs	r3, r3, #31
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fb5f 	bl	800014c <display7SEG>
					break;
 8000a8e:	e019      	b.n	8000ac4 <display+0x480>
				case MAN_RED:
				case MAN_GREEN:
				case MAN_YELLOW:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	4884      	ldr	r0, [pc, #528]	; (8000ca8 <display+0x664>)
 8000a98:	f001 fa63 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	4881      	ldr	r0, [pc, #516]	; (8000ca8 <display+0x664>)
 8000aa4:	f001 fa5d 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	487e      	ldr	r0, [pc, #504]	; (8000ca8 <display+0x664>)
 8000aae:	f001 fa58 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2140      	movs	r1, #64	; 0x40
 8000ab6:	487c      	ldr	r0, [pc, #496]	; (8000ca8 <display+0x664>)
 8000ab8:	f001 fa53 	bl	8001f62 <HAL_GPIO_WritePin>
					display7SEG(0);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fb45 	bl	800014c <display7SEG>
				default:
					break;
 8000ac2:	bf00      	nop
			}
			break;
 8000ac4:	e0ec      	b.n	8000ca0 <display+0x65c>
		case 4:
			switch(status2){
 8000ac6:	4b7d      	ldr	r3, [pc, #500]	; (8000cbc <display+0x678>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	3b01      	subs	r3, #1
 8000acc:	2b0d      	cmp	r3, #13
 8000ace:	f200 80e2 	bhi.w	8000c96 <display+0x652>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <display+0x494>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000b11 	.word	0x08000b11
 8000adc:	08000b5f 	.word	0x08000b5f
 8000ae0:	08000bad 	.word	0x08000bad
 8000ae4:	08000c97 	.word	0x08000c97
 8000ae8:	08000c97 	.word	0x08000c97
 8000aec:	08000c97 	.word	0x08000c97
 8000af0:	08000c97 	.word	0x08000c97
 8000af4:	08000c97 	.word	0x08000c97
 8000af8:	08000c97 	.word	0x08000c97
 8000afc:	08000c97 	.word	0x08000c97
 8000b00:	08000c97 	.word	0x08000c97
 8000b04:	08000bfb 	.word	0x08000bfb
 8000b08:	08000c63 	.word	0x08000c63
 8000b0c:	08000c2f 	.word	0x08000c2f
				case AUTO_RED:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	4864      	ldr	r0, [pc, #400]	; (8000ca8 <display+0x664>)
 8000b16:	f001 fa24 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b20:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <display+0x664>)
 8000b22:	f001 fa1e 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2c:	485e      	ldr	r0, [pc, #376]	; (8000ca8 <display+0x664>)
 8000b2e:	f001 fa18 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	485c      	ldr	r0, [pc, #368]	; (8000ca8 <display+0x664>)
 8000b38:	f001 fa13 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timerred2_counter%10);
 8000b3c:	4b5b      	ldr	r3, [pc, #364]	; (8000cac <display+0x668>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b5b      	ldr	r3, [pc, #364]	; (8000cb0 <display+0x66c>)
 8000b42:	fb83 1302 	smull	r1, r3, r3, r2
 8000b46:	1099      	asrs	r1, r3, #2
 8000b48:	17d3      	asrs	r3, r2, #31
 8000b4a:	1ac9      	subs	r1, r1, r3
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	440b      	add	r3, r1
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	1ad1      	subs	r1, r2, r3
 8000b56:	4608      	mov	r0, r1
 8000b58:	f7ff faf8 	bl	800014c <display7SEG>
					break;
 8000b5c:	e09c      	b.n	8000c98 <display+0x654>
				case AUTO_YELLOW:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4850      	ldr	r0, [pc, #320]	; (8000ca8 <display+0x664>)
 8000b66:	f001 f9fc 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	484d      	ldr	r0, [pc, #308]	; (8000ca8 <display+0x664>)
 8000b72:	f001 f9f6 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <display+0x664>)
 8000b7c:	f001 f9f1 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000b80:	2201      	movs	r2, #1
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	4848      	ldr	r0, [pc, #288]	; (8000ca8 <display+0x664>)
 8000b86:	f001 f9ec 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timeryellow2_counter%10);
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <display+0x670>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4b48      	ldr	r3, [pc, #288]	; (8000cb0 <display+0x66c>)
 8000b90:	fb83 1302 	smull	r1, r3, r3, r2
 8000b94:	1099      	asrs	r1, r3, #2
 8000b96:	17d3      	asrs	r3, r2, #31
 8000b98:	1ac9      	subs	r1, r1, r3
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	1ad1      	subs	r1, r2, r3
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	f7ff fad1 	bl	800014c <display7SEG>
					break;
 8000baa:	e075      	b.n	8000c98 <display+0x654>
				case AUTO_GREEN:
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	483d      	ldr	r0, [pc, #244]	; (8000ca8 <display+0x664>)
 8000bb4:	f001 f9d5 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbe:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <display+0x664>)
 8000bc0:	f001 f9cf 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	4837      	ldr	r0, [pc, #220]	; (8000ca8 <display+0x664>)
 8000bca:	f001 f9ca 	bl	8001f62 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	4835      	ldr	r0, [pc, #212]	; (8000ca8 <display+0x664>)
 8000bd4:	f001 f9c5 	bl	8001f62 <HAL_GPIO_WritePin>
						display7SEG(timergreen2_counter%10);
 8000bd8:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <display+0x674>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b34      	ldr	r3, [pc, #208]	; (8000cb0 <display+0x66c>)
 8000bde:	fb83 1302 	smull	r1, r3, r3, r2
 8000be2:	1099      	asrs	r1, r3, #2
 8000be4:	17d3      	asrs	r3, r2, #31
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	460b      	mov	r3, r1
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	1ad1      	subs	r1, r2, r3
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	f7ff faaa 	bl	800014c <display7SEG>
					break;
 8000bf8:	e04e      	b.n	8000c98 <display+0x654>
				case MAN_RED:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c00:	4829      	ldr	r0, [pc, #164]	; (8000ca8 <display+0x664>)
 8000c02:	f001 f9ae 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0c:	4826      	ldr	r0, [pc, #152]	; (8000ca8 <display+0x664>)
 8000c0e:	f001 f9a8 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <display+0x664>)
 8000c18:	f001 f9a3 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2140      	movs	r1, #64	; 0x40
 8000c20:	4821      	ldr	r0, [pc, #132]	; (8000ca8 <display+0x664>)
 8000c22:	f001 f99e 	bl	8001f62 <HAL_GPIO_WritePin>
					display7SEG(2);
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff fa90 	bl	800014c <display7SEG>
					break;
 8000c2c:	e034      	b.n	8000c98 <display+0x654>
				case MAN_YELLOW:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <display+0x664>)
 8000c36:	f001 f994 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c40:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <display+0x664>)
 8000c42:	f001 f98e 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <display+0x664>)
 8000c4c:	f001 f989 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	4814      	ldr	r0, [pc, #80]	; (8000ca8 <display+0x664>)
 8000c56:	f001 f984 	bl	8001f62 <HAL_GPIO_WritePin>
					display7SEG(3);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f7ff fa76 	bl	800014c <display7SEG>
					break;
 8000c60:	e01a      	b.n	8000c98 <display+0x654>
				case MAN_GREEN:
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,1);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <display+0x664>)
 8000c6a:	f001 f97a 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <display+0x664>)
 8000c76:	f001 f974 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,1);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <display+0x664>)
 8000c80:	f001 f96f 	bl	8001f62 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	4807      	ldr	r0, [pc, #28]	; (8000ca8 <display+0x664>)
 8000c8a:	f001 f96a 	bl	8001f62 <HAL_GPIO_WritePin>
					display7SEG(4);
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f7ff fa5c 	bl	800014c <display7SEG>
					break;
 8000c94:	e000      	b.n	8000c98 <display+0x654>
				default:
					break;
 8000c96:	bf00      	nop
			}
			break;
 8000c98:	e002      	b.n	8000ca0 <display+0x65c>
			default:
				break;
		}
	}
 8000c9a:	bf00      	nop
 8000c9c:	e000      	b.n	8000ca0 <display+0x65c>
				break;
 8000c9e:	bf00      	nop
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	2000004c 	.word	0x2000004c
 8000cb0:	66666667 	.word	0x66666667
 8000cb4:	20000050 	.word	0x20000050
 8000cb8:	20000054 	.word	0x20000054
 8000cbc:	200000bc 	.word	0x200000bc

08000cc0 <fsm_automatic_run>:
//			break;
//
//		}
//
//}
void fsm_automatic_run(){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	switch(status){
 8000cc4:	4bb8      	ldr	r3, [pc, #736]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	f200 8133 	bhi.w	8000f34 <fsm_automatic_run+0x274>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <fsm_automatic_run+0x14>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000ce5 	.word	0x08000ce5
 8000cd8:	08000d31 	.word	0x08000d31
 8000cdc:	08000ddb 	.word	0x08000ddb
 8000ce0:	08000e83 	.word	0x08000e83
		case INIT:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2108      	movs	r1, #8
 8000ce8:	48b0      	ldr	r0, [pc, #704]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000cea:	f001 f93a 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	48ae      	ldr	r0, [pc, #696]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000cf4:	f001 f935 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	48ab      	ldr	r0, [pc, #684]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000cfe:	f001 f930 	bl	8001f62 <HAL_GPIO_WritePin>
			status = AUTO_RED;
 8000d02:	4ba9      	ldr	r3, [pc, #676]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
			setTimer2(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f000 fca2 	bl	8001654 <setTimer2>
			timerred_counter = timer_red/1000;
 8000d10:	4ba7      	ldr	r3, [pc, #668]	; (8000fb0 <fsm_automatic_run+0x2f0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4aa7      	ldr	r2, [pc, #668]	; (8000fb4 <fsm_automatic_run+0x2f4>)
 8000d16:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1a:	1192      	asrs	r2, r2, #6
 8000d1c:	17db      	asrs	r3, r3, #31
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	4aa5      	ldr	r2, [pc, #660]	; (8000fb8 <fsm_automatic_run+0x2f8>)
 8000d22:	6013      	str	r3, [r2, #0]
			setTimer(timer_red);
 8000d24:	4ba2      	ldr	r3, [pc, #648]	; (8000fb0 <fsm_automatic_run+0x2f0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f000 fc79 	bl	8001620 <setTimer>
			break;
 8000d2e:	e101      	b.n	8000f34 <fsm_automatic_run+0x274>
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2108      	movs	r1, #8
 8000d34:	489d      	ldr	r0, [pc, #628]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000d36:	f001 f914 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	489b      	ldr	r0, [pc, #620]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000d40:	f001 f90f 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000d44:	2201      	movs	r2, #1
 8000d46:	2120      	movs	r1, #32
 8000d48:	4898      	ldr	r0, [pc, #608]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000d4a:	f001 f90a 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000d4e:	4b9b      	ldr	r3, [pc, #620]	; (8000fbc <fsm_automatic_run+0x2fc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d108      	bne.n	8000d68 <fsm_automatic_run+0xa8>
				setTimer2(1000);
 8000d56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5a:	f000 fc7b 	bl	8001654 <setTimer2>
				timerred_counter--;
 8000d5e:	4b96      	ldr	r3, [pc, #600]	; (8000fb8 <fsm_automatic_run+0x2f8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	4a94      	ldr	r2, [pc, #592]	; (8000fb8 <fsm_automatic_run+0x2f8>)
 8000d66:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000d68:	4b95      	ldr	r3, [pc, #596]	; (8000fc0 <fsm_automatic_run+0x300>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d115      	bne.n	8000d9c <fsm_automatic_run+0xdc>
				setTimer2(1000);
 8000d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d74:	f000 fc6e 	bl	8001654 <setTimer2>
				timergreen_counter = timer_green/1000;
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <fsm_automatic_run+0x304>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a8d      	ldr	r2, [pc, #564]	; (8000fb4 <fsm_automatic_run+0x2f4>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1192      	asrs	r2, r2, #6
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	4a8f      	ldr	r2, [pc, #572]	; (8000fc8 <fsm_automatic_run+0x308>)
 8000d8a:	6013      	str	r3, [r2, #0]
				setTimer(timer_green);
 8000d8c:	4b8d      	ldr	r3, [pc, #564]	; (8000fc4 <fsm_automatic_run+0x304>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fc45 	bl	8001620 <setTimer>
				status = AUTO_GREEN;
 8000d96:	4b84      	ldr	r3, [pc, #528]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1){
 8000d9c:	f7ff fb5c 	bl	8000458 <isButton1Pressed>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	f040 80c1 	bne.w	8000f2a <fsm_automatic_run+0x26a>
				status = MAN_RED;
 8000da8:	4b7f      	ldr	r3, [pc, #508]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000dae:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <fsm_automatic_run+0x30c>)
 8000db0:	220c      	movs	r2, #12
 8000db2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000db4:	2201      	movs	r2, #1
 8000db6:	2108      	movs	r1, #8
 8000db8:	487c      	ldr	r0, [pc, #496]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000dba:	f001 f8d2 	bl	8001f62 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000dbe:	220a      	movs	r2, #10
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	4879      	ldr	r0, [pc, #484]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000dc6:	f001 f8cc 	bl	8001f62 <HAL_GPIO_WritePin>
				set_timer = 0;
 8000dca:	4b81      	ldr	r3, [pc, #516]	; (8000fd0 <fsm_automatic_run+0x310>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd4:	f000 fc3e 	bl	8001654 <setTimer2>
			}
			break;
 8000dd8:	e0a7      	b.n	8000f2a <fsm_automatic_run+0x26a>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4873      	ldr	r0, [pc, #460]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000de0:	f001 f8bf 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2110      	movs	r1, #16
 8000de8:	4870      	ldr	r0, [pc, #448]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000dea:	f001 f8ba 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2120      	movs	r1, #32
 8000df2:	486e      	ldr	r0, [pc, #440]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000df4:	f001 f8b5 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000df8:	4b70      	ldr	r3, [pc, #448]	; (8000fbc <fsm_automatic_run+0x2fc>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d108      	bne.n	8000e12 <fsm_automatic_run+0x152>
				setTimer2(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f000 fc26 	bl	8001654 <setTimer2>
				timeryellow_counter--;
 8000e08:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <fsm_automatic_run+0x314>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	4a71      	ldr	r2, [pc, #452]	; (8000fd4 <fsm_automatic_run+0x314>)
 8000e10:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000e12:	4b6b      	ldr	r3, [pc, #428]	; (8000fc0 <fsm_automatic_run+0x300>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d115      	bne.n	8000e46 <fsm_automatic_run+0x186>
				status = AUTO_RED;
 8000e1a:	4b63      	ldr	r3, [pc, #396]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e24:	f000 fc16 	bl	8001654 <setTimer2>
				timerred_counter = timer_red/1000;
 8000e28:	4b61      	ldr	r3, [pc, #388]	; (8000fb0 <fsm_automatic_run+0x2f0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a61      	ldr	r2, [pc, #388]	; (8000fb4 <fsm_automatic_run+0x2f4>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1192      	asrs	r2, r2, #6
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	4a5f      	ldr	r2, [pc, #380]	; (8000fb8 <fsm_automatic_run+0x2f8>)
 8000e3a:	6013      	str	r3, [r2, #0]
				setTimer(timer_red);
 8000e3c:	4b5c      	ldr	r3, [pc, #368]	; (8000fb0 <fsm_automatic_run+0x2f0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fbed 	bl	8001620 <setTimer>
			}
			if(isButton1Pressed() == 1){
 8000e46:	f7ff fb07 	bl	8000458 <isButton1Pressed>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d16e      	bne.n	8000f2e <fsm_automatic_run+0x26e>
				status = MAN_RED;
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <fsm_automatic_run+0x30c>)
 8000e58:	220c      	movs	r2, #12
 8000e5a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2108      	movs	r1, #8
 8000e60:	4852      	ldr	r0, [pc, #328]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000e62:	f001 f87e 	bl	8001f62 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000e66:	220a      	movs	r2, #10
 8000e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e6c:	484f      	ldr	r0, [pc, #316]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000e6e:	f001 f878 	bl	8001f62 <HAL_GPIO_WritePin>
				set_timer = 0;
 8000e72:	4b57      	ldr	r3, [pc, #348]	; (8000fd0 <fsm_automatic_run+0x310>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000e78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e7c:	f000 fbea 	bl	8001654 <setTimer2>
			}
			break;
 8000e80:	e055      	b.n	8000f2e <fsm_automatic_run+0x26e>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2108      	movs	r1, #8
 8000e86:	4849      	ldr	r0, [pc, #292]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000e88:	f001 f86b 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	2110      	movs	r1, #16
 8000e90:	4846      	ldr	r0, [pc, #280]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000e92:	f001 f866 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4844      	ldr	r0, [pc, #272]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000e9c:	f001 f861 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <fsm_automatic_run+0x2fc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d108      	bne.n	8000eba <fsm_automatic_run+0x1fa>
				setTimer2(1000);
 8000ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eac:	f000 fbd2 	bl	8001654 <setTimer2>
				timergreen_counter--;
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <fsm_automatic_run+0x308>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a44      	ldr	r2, [pc, #272]	; (8000fc8 <fsm_automatic_run+0x308>)
 8000eb8:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000eba:	4b41      	ldr	r3, [pc, #260]	; (8000fc0 <fsm_automatic_run+0x300>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d115      	bne.n	8000eee <fsm_automatic_run+0x22e>
				status = AUTO_YELLOW;
 8000ec2:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000ec8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ecc:	f000 fbc2 	bl	8001654 <setTimer2>
				timeryellow_counter = timer_yellow/1000;
 8000ed0:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <fsm_automatic_run+0x318>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a37      	ldr	r2, [pc, #220]	; (8000fb4 <fsm_automatic_run+0x2f4>)
 8000ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eda:	1192      	asrs	r2, r2, #6
 8000edc:	17db      	asrs	r3, r3, #31
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	4a3c      	ldr	r2, [pc, #240]	; (8000fd4 <fsm_automatic_run+0x314>)
 8000ee2:	6013      	str	r3, [r2, #0]
				setTimer(timer_yellow);
 8000ee4:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <fsm_automatic_run+0x318>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fb99 	bl	8001620 <setTimer>
			}
			if(isButton1Pressed() == 1){
 8000eee:	f7ff fab3 	bl	8000458 <isButton1Pressed>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d11c      	bne.n	8000f32 <fsm_automatic_run+0x272>
				status = MAN_RED;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <fsm_automatic_run+0x2e8>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
				status2 = MAN_RED;
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <fsm_automatic_run+0x30c>)
 8000f00:	220c      	movs	r2, #12
 8000f02:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2108      	movs	r1, #8
 8000f08:	4828      	ldr	r0, [pc, #160]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000f0a:	f001 f82a 	bl	8001f62 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,10);
 8000f0e:	220a      	movs	r2, #10
 8000f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f14:	4825      	ldr	r0, [pc, #148]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000f16:	f001 f824 	bl	8001f62 <HAL_GPIO_WritePin>
				set_timer = 0;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <fsm_automatic_run+0x310>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8000f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f24:	f000 fb96 	bl	8001654 <setTimer2>
			}
			break;
 8000f28:	e003      	b.n	8000f32 <fsm_automatic_run+0x272>
			break;
 8000f2a:	bf00      	nop
 8000f2c:	e002      	b.n	8000f34 <fsm_automatic_run+0x274>
			break;
 8000f2e:	bf00      	nop
 8000f30:	e000      	b.n	8000f34 <fsm_automatic_run+0x274>
			break;
 8000f32:	bf00      	nop
	}
	switch(status2){
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <fsm_automatic_run+0x30c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	f200 8105 	bhi.w	8001148 <fsm_automatic_run+0x488>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <fsm_automatic_run+0x284>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	08000fe1 	.word	0x08000fe1
 8000f4c:	08001057 	.word	0x08001057
 8000f50:	080010cb 	.word	0x080010cb
		case INIT:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000f5c:	f001 f801 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000f68:	f000 fffb 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <fsm_automatic_run+0x2ec>)
 8000f74:	f000 fff5 	bl	8001f62 <HAL_GPIO_WritePin>
			status2 = AUTO_GREEN;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <fsm_automatic_run+0x30c>)
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	601a      	str	r2, [r3, #0]
			setTimer5(1000);
 8000f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f82:	f000 fbb5 	bl	80016f0 <setTimer5>
			timergreen2_counter = timer_green/1000;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <fsm_automatic_run+0x304>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <fsm_automatic_run+0x2f4>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1192      	asrs	r2, r2, #6
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <fsm_automatic_run+0x31c>)
 8000f98:	6013      	str	r3, [r2, #0]
			setTimer4(timer_green);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <fsm_automatic_run+0x304>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb8c 	bl	80016bc <setTimer4>
			break;
 8000fa4:	e0d0      	b.n	8001148 <fsm_automatic_run+0x488>
 8000fa6:	bf00      	nop
 8000fa8:	200000c0 	.word	0x200000c0
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	20000034 	.word	0x20000034
 8000fb4:	10624dd3 	.word	0x10624dd3
 8000fb8:	20000040 	.word	0x20000040
 8000fbc:	200000ac 	.word	0x200000ac
 8000fc0:	200000a8 	.word	0x200000a8
 8000fc4:	2000003c 	.word	0x2000003c
 8000fc8:	20000048 	.word	0x20000048
 8000fcc:	200000bc 	.word	0x200000bc
 8000fd0:	20000090 	.word	0x20000090
 8000fd4:	20000044 	.word	0x20000044
 8000fd8:	20000038 	.word	0x20000038
 8000fdc:	20000054 	.word	0x20000054
		case AUTO_RED:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4859      	ldr	r0, [pc, #356]	; (800114c <fsm_automatic_run+0x48c>)
 8000fe8:	f000 ffbb 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4856      	ldr	r0, [pc, #344]	; (800114c <fsm_automatic_run+0x48c>)
 8000ff4:	f000 ffb5 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4853      	ldr	r0, [pc, #332]	; (800114c <fsm_automatic_run+0x48c>)
 8001000:	f000 ffaf 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 8001004:	4b52      	ldr	r3, [pc, #328]	; (8001150 <fsm_automatic_run+0x490>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d108      	bne.n	800101e <fsm_automatic_run+0x35e>
				setTimer5(1000);
 800100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001010:	f000 fb6e 	bl	80016f0 <setTimer5>
				timerred2_counter--;
 8001014:	4b4f      	ldr	r3, [pc, #316]	; (8001154 <fsm_automatic_run+0x494>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <fsm_automatic_run+0x494>)
 800101c:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 800101e:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <fsm_automatic_run+0x498>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	f040 808b 	bne.w	800113e <fsm_automatic_run+0x47e>
				setTimer5(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102c:	f000 fb60 	bl	80016f0 <setTimer5>
				timergreen2_counter = timer_green/1000;
 8001030:	4b4a      	ldr	r3, [pc, #296]	; (800115c <fsm_automatic_run+0x49c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <fsm_automatic_run+0x4a0>)
 8001036:	fb82 1203 	smull	r1, r2, r2, r3
 800103a:	1192      	asrs	r2, r2, #6
 800103c:	17db      	asrs	r3, r3, #31
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <fsm_automatic_run+0x4a4>)
 8001042:	6013      	str	r3, [r2, #0]
				setTimer4(timer_green);
 8001044:	4b45      	ldr	r3, [pc, #276]	; (800115c <fsm_automatic_run+0x49c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fb37 	bl	80016bc <setTimer4>
				status2 = AUTO_GREEN;
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <fsm_automatic_run+0x4a8>)
 8001050:	2203      	movs	r2, #3
 8001052:	601a      	str	r2, [r3, #0]
//			if(isButton1Pressed() == 1){
//				status2 = MAN_RED;
//				status = MAN_RED;
//				setTimer2(500);
//			}
			break;
 8001054:	e073      	b.n	800113e <fsm_automatic_run+0x47e>
		case AUTO_YELLOW:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	483b      	ldr	r0, [pc, #236]	; (800114c <fsm_automatic_run+0x48c>)
 800105e:	f000 ff80 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,0);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001068:	4838      	ldr	r0, [pc, #224]	; (800114c <fsm_automatic_run+0x48c>)
 800106a:	f000 ff7a 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001074:	4835      	ldr	r0, [pc, #212]	; (800114c <fsm_automatic_run+0x48c>)
 8001076:	f000 ff74 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 800107a:	4b35      	ldr	r3, [pc, #212]	; (8001150 <fsm_automatic_run+0x490>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d108      	bne.n	8001094 <fsm_automatic_run+0x3d4>
				setTimer5(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f000 fb33 	bl	80016f0 <setTimer5>
				timeryellow2_counter--;
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <fsm_automatic_run+0x4ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3b01      	subs	r3, #1
 8001090:	4a36      	ldr	r2, [pc, #216]	; (800116c <fsm_automatic_run+0x4ac>)
 8001092:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <fsm_automatic_run+0x498>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d152      	bne.n	8001142 <fsm_automatic_run+0x482>
				status2 = AUTO_RED;
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <fsm_automatic_run+0x4a8>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
				setTimer5(1000);
 80010a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010a6:	f000 fb23 	bl	80016f0 <setTimer5>
				timerred2_counter = timer_red/1000;
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <fsm_automatic_run+0x4b0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <fsm_automatic_run+0x4a0>)
 80010b0:	fb82 1203 	smull	r1, r2, r2, r3
 80010b4:	1192      	asrs	r2, r2, #6
 80010b6:	17db      	asrs	r3, r3, #31
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <fsm_automatic_run+0x494>)
 80010bc:	6013      	str	r3, [r2, #0]
				setTimer4(timer_red);
 80010be:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <fsm_automatic_run+0x4b0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fafa 	bl	80016bc <setTimer4>
			}
//			if(isButton1Pressed() == 1){
//				status2 = MAN_RED;
//				setTimer2(500);
//			}
			break;
 80010c8:	e03b      	b.n	8001142 <fsm_automatic_run+0x482>
		case AUTO_GREEN:
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d0:	481e      	ldr	r0, [pc, #120]	; (800114c <fsm_automatic_run+0x48c>)
 80010d2:	f000 ff46 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	481b      	ldr	r0, [pc, #108]	; (800114c <fsm_automatic_run+0x48c>)
 80010de:	f000 ff40 	bl	8001f62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e8:	4818      	ldr	r0, [pc, #96]	; (800114c <fsm_automatic_run+0x48c>)
 80010ea:	f000 ff3a 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer5_flag == 1){
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <fsm_automatic_run+0x490>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d108      	bne.n	8001108 <fsm_automatic_run+0x448>
				setTimer5(1000);
 80010f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010fa:	f000 faf9 	bl	80016f0 <setTimer5>
				timergreen2_counter--;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <fsm_automatic_run+0x4a4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <fsm_automatic_run+0x4a4>)
 8001106:	6013      	str	r3, [r2, #0]
			}
			if(timer4_flag == 1){
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <fsm_automatic_run+0x498>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d11a      	bne.n	8001146 <fsm_automatic_run+0x486>
				setTimer5(1000);
 8001110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001114:	f000 faec 	bl	80016f0 <setTimer5>
				status2 = AUTO_YELLOW;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <fsm_automatic_run+0x4a8>)
 800111a:	2202      	movs	r2, #2
 800111c:	601a      	str	r2, [r3, #0]
				timeryellow2_counter = timer_yellow/1000;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <fsm_automatic_run+0x4b4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <fsm_automatic_run+0x4a0>)
 8001124:	fb82 1203 	smull	r1, r2, r2, r3
 8001128:	1192      	asrs	r2, r2, #6
 800112a:	17db      	asrs	r3, r3, #31
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <fsm_automatic_run+0x4ac>)
 8001130:	6013      	str	r3, [r2, #0]
				setTimer4(timer_yellow);
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <fsm_automatic_run+0x4b4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fac0 	bl	80016bc <setTimer4>
			}
//			if(isButton1Pressed() == 1){
//				status2 = MAN_RED;
//				setTimer2(500);
//			}
			break;
 800113c:	e003      	b.n	8001146 <fsm_automatic_run+0x486>
			break;
 800113e:	bf00      	nop
 8001140:	e002      	b.n	8001148 <fsm_automatic_run+0x488>
			break;
 8001142:	bf00      	nop
 8001144:	e000      	b.n	8001148 <fsm_automatic_run+0x488>
			break;
 8001146:	bf00      	nop
		}
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40010800 	.word	0x40010800
 8001150:	200000b8 	.word	0x200000b8
 8001154:	2000004c 	.word	0x2000004c
 8001158:	200000b4 	.word	0x200000b4
 800115c:	2000003c 	.word	0x2000003c
 8001160:	10624dd3 	.word	0x10624dd3
 8001164:	20000054 	.word	0x20000054
 8001168:	200000bc 	.word	0x200000bc
 800116c:	20000050 	.word	0x20000050
 8001170:	20000034 	.word	0x20000034
 8001174:	20000038 	.word	0x20000038

08001178 <fsm_manual_run>:
 *      Author: Hong Phat
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	switch(status){
 800117c:	4b82      	ldr	r3, [pc, #520]	; (8001388 <fsm_manual_run+0x210>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b0e      	cmp	r3, #14
 8001182:	d05a      	beq.n	800123a <fsm_manual_run+0xc2>
 8001184:	2b0e      	cmp	r3, #14
 8001186:	f300 80f6 	bgt.w	8001376 <fsm_manual_run+0x1fe>
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d003      	beq.n	8001196 <fsm_manual_run+0x1e>
 800118e:	2b0d      	cmp	r3, #13
 8001190:	f000 80a4 	beq.w	80012dc <fsm_manual_run+0x164>
		if(isButton3Pressed() == 1){
			timer_green= set_timer*1000;
		}
		break;
	default:
		break;
 8001194:	e0ef      	b.n	8001376 <fsm_manual_run+0x1fe>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 8001196:	2201      	movs	r2, #1
 8001198:	2110      	movs	r1, #16
 800119a:	487c      	ldr	r0, [pc, #496]	; (800138c <fsm_manual_run+0x214>)
 800119c:	f000 fee1 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	4879      	ldr	r0, [pc, #484]	; (800138c <fsm_manual_run+0x214>)
 80011a6:	f000 fedc 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b0:	4876      	ldr	r0, [pc, #472]	; (800138c <fsm_manual_run+0x214>)
 80011b2:	f000 fed6 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4873      	ldr	r0, [pc, #460]	; (800138c <fsm_manual_run+0x214>)
 80011be:	f000 fed0 	bl	8001f62 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 80011c2:	4b73      	ldr	r3, [pc, #460]	; (8001390 <fsm_manual_run+0x218>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d10c      	bne.n	80011e4 <fsm_manual_run+0x6c>
			setTimer2(500);
 80011ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ce:	f000 fa41 	bl	8001654 <setTimer2>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 80011d2:	2108      	movs	r1, #8
 80011d4:	486d      	ldr	r0, [pc, #436]	; (800138c <fsm_manual_run+0x214>)
 80011d6:	f000 fedc 	bl	8001f92 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_10);
 80011da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011de:	486b      	ldr	r0, [pc, #428]	; (800138c <fsm_manual_run+0x214>)
 80011e0:	f000 fed7 	bl	8001f92 <HAL_GPIO_TogglePin>
		if(isButton1Pressed() == 1){
 80011e4:	f7ff f938 	bl	8000458 <isButton1Pressed>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10c      	bne.n	8001208 <fsm_manual_run+0x90>
			setTimer2(500);
 80011ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f2:	f000 fa2f 	bl	8001654 <setTimer2>
			set_timer = 0;
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <fsm_manual_run+0x21c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
			status = MAN_YELLOW;
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <fsm_manual_run+0x210>)
 80011fe:	220e      	movs	r2, #14
 8001200:	601a      	str	r2, [r3, #0]
			status2 = MAN_YELLOW;
 8001202:	4b65      	ldr	r3, [pc, #404]	; (8001398 <fsm_manual_run+0x220>)
 8001204:	220e      	movs	r2, #14
 8001206:	601a      	str	r2, [r3, #0]
		if(isButton2Pressed() == 1){
 8001208:	f7ff f938 	bl	800047c <isButton2Pressed>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d104      	bne.n	800121c <fsm_manual_run+0xa4>
			set_timer++;
 8001212:	4b60      	ldr	r3, [pc, #384]	; (8001394 <fsm_manual_run+0x21c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	4a5e      	ldr	r2, [pc, #376]	; (8001394 <fsm_manual_run+0x21c>)
 800121a:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 800121c:	f7ff f940 	bl	80004a0 <isButton3Pressed>
 8001220:	4603      	mov	r3, r0
 8001222:	2b01      	cmp	r3, #1
 8001224:	f040 80a9 	bne.w	800137a <fsm_manual_run+0x202>
			timer_red = set_timer*1000;
 8001228:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <fsm_manual_run+0x21c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a59      	ldr	r2, [pc, #356]	; (800139c <fsm_manual_run+0x224>)
 8001236:	6013      	str	r3, [r2, #0]
		break;
 8001238:	e09f      	b.n	800137a <fsm_manual_run+0x202>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 800123a:	2201      	movs	r2, #1
 800123c:	2108      	movs	r1, #8
 800123e:	4853      	ldr	r0, [pc, #332]	; (800138c <fsm_manual_run+0x214>)
 8001240:	f000 fe8f 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 8001244:	2201      	movs	r2, #1
 8001246:	2120      	movs	r1, #32
 8001248:	4850      	ldr	r0, [pc, #320]	; (800138c <fsm_manual_run+0x214>)
 800124a:	f000 fe8a 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001254:	484d      	ldr	r0, [pc, #308]	; (800138c <fsm_manual_run+0x214>)
 8001256:	f000 fe84 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,1);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001260:	484a      	ldr	r0, [pc, #296]	; (800138c <fsm_manual_run+0x214>)
 8001262:	f000 fe7e 	bl	8001f62 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <fsm_manual_run+0x218>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10c      	bne.n	8001288 <fsm_manual_run+0x110>
				setTimer2(500);
 800126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001272:	f000 f9ef 	bl	8001654 <setTimer2>
				HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_4);
 8001276:	2110      	movs	r1, #16
 8001278:	4844      	ldr	r0, [pc, #272]	; (800138c <fsm_manual_run+0x214>)
 800127a:	f000 fe8a 	bl	8001f92 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_11);
 800127e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001282:	4842      	ldr	r0, [pc, #264]	; (800138c <fsm_manual_run+0x214>)
 8001284:	f000 fe85 	bl	8001f92 <HAL_GPIO_TogglePin>
			if(isButton1Pressed() == 1){
 8001288:	f7ff f8e6 	bl	8000458 <isButton1Pressed>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d10c      	bne.n	80012ac <fsm_manual_run+0x134>
				set_timer = 0;
 8001292:	4b40      	ldr	r3, [pc, #256]	; (8001394 <fsm_manual_run+0x21c>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
				setTimer2(500);
 8001298:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129c:	f000 f9da 	bl	8001654 <setTimer2>
				status = MAN_GREEN;
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <fsm_manual_run+0x210>)
 80012a2:	220d      	movs	r2, #13
 80012a4:	601a      	str	r2, [r3, #0]
				status2 = MAN_GREEN;
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <fsm_manual_run+0x220>)
 80012a8:	220d      	movs	r2, #13
 80012aa:	601a      	str	r2, [r3, #0]
			if(isButton2Pressed() == 1){
 80012ac:	f7ff f8e6 	bl	800047c <isButton2Pressed>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <fsm_manual_run+0x148>
				set_timer++;
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <fsm_manual_run+0x21c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4a35      	ldr	r2, [pc, #212]	; (8001394 <fsm_manual_run+0x21c>)
 80012be:	6013      	str	r3, [r2, #0]
			if(isButton3Pressed() == 1){
 80012c0:	f7ff f8ee 	bl	80004a0 <isButton3Pressed>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d159      	bne.n	800137e <fsm_manual_run+0x206>
				timer_yellow = set_timer*1000;
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <fsm_manual_run+0x21c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012d2:	fb02 f303 	mul.w	r3, r2, r3
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <fsm_manual_run+0x228>)
 80012d8:	6013      	str	r3, [r2, #0]
			break;
 80012da:	e050      	b.n	800137e <fsm_manual_run+0x206>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3,1);
 80012dc:	2201      	movs	r2, #1
 80012de:	2108      	movs	r1, #8
 80012e0:	482a      	ldr	r0, [pc, #168]	; (800138c <fsm_manual_run+0x214>)
 80012e2:	f000 fe3e 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,1);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2110      	movs	r1, #16
 80012ea:	4828      	ldr	r0, [pc, #160]	; (800138c <fsm_manual_run+0x214>)
 80012ec:	f000 fe39 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,1);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012f6:	4825      	ldr	r0, [pc, #148]	; (800138c <fsm_manual_run+0x214>)
 80012f8:	f000 fe33 	bl	8001f62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001302:	4822      	ldr	r0, [pc, #136]	; (800138c <fsm_manual_run+0x214>)
 8001304:	f000 fe2d 	bl	8001f62 <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <fsm_manual_run+0x218>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10c      	bne.n	800132a <fsm_manual_run+0x1b2>
			setTimer2(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f000 f99e 	bl	8001654 <setTimer2>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001318:	2120      	movs	r1, #32
 800131a:	481c      	ldr	r0, [pc, #112]	; (800138c <fsm_manual_run+0x214>)
 800131c:	f000 fe39 	bl	8001f92 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4819      	ldr	r0, [pc, #100]	; (800138c <fsm_manual_run+0x214>)
 8001326:	f000 fe34 	bl	8001f92 <HAL_GPIO_TogglePin>
		if(isButton1Pressed() == 1){
 800132a:	f7ff f895 	bl	8000458 <isButton1Pressed>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d108      	bne.n	8001346 <fsm_manual_run+0x1ce>
			set_timer = 0;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <fsm_manual_run+0x21c>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
			status = INIT;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <fsm_manual_run+0x210>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
			status2 = INIT;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <fsm_manual_run+0x220>)
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
		if(isButton2Pressed() == 1){
 8001346:	f7ff f899 	bl	800047c <isButton2Pressed>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d104      	bne.n	800135a <fsm_manual_run+0x1e2>
			set_timer++;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <fsm_manual_run+0x21c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <fsm_manual_run+0x21c>)
 8001358:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed() == 1){
 800135a:	f7ff f8a1 	bl	80004a0 <isButton3Pressed>
 800135e:	4603      	mov	r3, r0
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10e      	bne.n	8001382 <fsm_manual_run+0x20a>
			timer_green= set_timer*1000;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <fsm_manual_run+0x21c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <fsm_manual_run+0x22c>)
 8001372:	6013      	str	r3, [r2, #0]
		break;
 8001374:	e005      	b.n	8001382 <fsm_manual_run+0x20a>
		break;
 8001376:	bf00      	nop
 8001378:	e004      	b.n	8001384 <fsm_manual_run+0x20c>
		break;
 800137a:	bf00      	nop
 800137c:	e002      	b.n	8001384 <fsm_manual_run+0x20c>
			break;
 800137e:	bf00      	nop
 8001380:	e000      	b.n	8001384 <fsm_manual_run+0x20c>
		break;
 8001382:	bf00      	nop
	}
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000c0 	.word	0x200000c0
 800138c:	40010800 	.word	0x40010800
 8001390:	200000ac 	.word	0x200000ac
 8001394:	20000090 	.word	0x20000090
 8001398:	200000bc 	.word	0x200000bc
 800139c:	20000034 	.word	0x20000034
 80013a0:	20000038 	.word	0x20000038
 80013a4:	2000003c 	.word	0x2000003c

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 fad7 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f833 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f000 f8b9 	bl	800152c <MX_GPIO_Init>
  MX_TIM2_Init();
 80013ba:	f000 f86b 	bl	8001494 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <main+0x64>)
 80013c0:	f001 fa38 	bl	8002834 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <main+0x68>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <main+0x6c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  setTimer3(50);
 80013d0:	2032      	movs	r0, #50	; 0x32
 80013d2:	f000 f959 	bl	8001688 <setTimer3>
  int led = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	607b      	str	r3, [r7, #4]
// status2 = INIT;
// setTimer2(5000);
  while (1)
  {

	  if(timer3_flag == 1){
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <main+0x70>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10e      	bne.n	8001400 <main+0x58>
	  setTimer3(250);
 80013e2:	20fa      	movs	r0, #250	; 0xfa
 80013e4:	f000 f950 	bl	8001688 <setTimer3>
	  display(led,1);
 80013e8:	2101      	movs	r1, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f92a 	bl	8000644 <display>
	  led++;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3301      	adds	r3, #1
 80013f4:	607b      	str	r3, [r7, #4]
	  if(led > 4) led = 1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	dd01      	ble.n	8001400 <main+0x58>
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
	  }
	  fsm_automatic_run();
 8001400:	f7ff fc5e 	bl	8000cc0 <fsm_automatic_run>
	  fsm_manual_run();
 8001404:	f7ff feb8 	bl	8001178 <fsm_manual_run>
	  if(timer3_flag == 1){
 8001408:	e7e7      	b.n	80013da <main+0x32>
 800140a:	bf00      	nop
 800140c:	200000c4 	.word	0x200000c4
 8001410:	200000c0 	.word	0x200000c0
 8001414:	200000bc 	.word	0x200000bc
 8001418:	200000b0 	.word	0x200000b0

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b090      	sub	sp, #64	; 0x40
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fdba 	bl	8002fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001442:	2301      	movs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001446:	2310      	movs	r3, #16
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fdb6 	bl	8001fc4 <HAL_RCC_OscConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800145e:	f000 f8d9 	bl	8001614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	230f      	movs	r3, #15
 8001464:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f001 f822 	bl	80024c4 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001486:	f000 f8c5 	bl	8001614 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3740      	adds	r7, #64	; 0x40
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_TIM2_Init+0x94>)
 80014b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_TIM2_Init+0x94>)
 80014ba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM2_Init+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_TIM2_Init+0x94>)
 80014c8:	2209      	movs	r2, #9
 80014ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_TIM2_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_TIM2_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <MX_TIM2_Init+0x94>)
 80014da:	f001 f95b 	bl	8002794 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014e4:	f000 f896 	bl	8001614 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	4619      	mov	r1, r3
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <MX_TIM2_Init+0x94>)
 80014f6:	f001 faf1 	bl	8002adc <HAL_TIM_ConfigClockSource>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001500:	f000 f888 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	4619      	mov	r1, r3
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_TIM2_Init+0x94>)
 8001512:	f001 fcb9 	bl	8002e88 <HAL_TIMEx_MasterConfigSynchronization>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800151c:	f000 f87a 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000c4 	.word	0x200000c4

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_GPIO_Init+0xc4>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <MX_GPIO_Init+0xc4>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a24      	ldr	r2, [pc, #144]	; (80015f0 <MX_GPIO_Init+0xc4>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <MX_GPIO_Init+0xc4>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	2138      	movs	r1, #56	; 0x38
 8001574:	481f      	ldr	r0, [pc, #124]	; (80015f4 <MX_GPIO_Init+0xc8>)
 8001576:	f000 fcf4 	bl	8001f62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 517f 	mov.w	r1, #16320	; 0x3fc0
 8001580:	481c      	ldr	r0, [pc, #112]	; (80015f4 <MX_GPIO_Init+0xc8>)
 8001582:	f000 fcee 	bl	8001f62 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001586:	2200      	movs	r2, #0
 8001588:	f64f 417f 	movw	r1, #64639	; 0xfc7f
 800158c:	481a      	ldr	r0, [pc, #104]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800158e:	f000 fce8 	bl	8001f62 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin PA10
                           PA11 PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|EN0_Pin
 8001592:	f643 73f8 	movw	r3, #16376	; 0x3ff8
 8001596:	60bb      	str	r3, [r7, #8]
                          |EN1_Pin|EN2_Pin|EN3_Pin|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2302      	movs	r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	4619      	mov	r1, r3
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <MX_GPIO_Init+0xc8>)
 80015ac:	f000 fb48 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80015b0:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 80015b4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2302      	movs	r3, #2
 80015c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <MX_GPIO_Init+0xcc>)
 80015ca:	f000 fb39 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 80015ce:	f44f 7360 	mov.w	r3, #896	; 0x380
 80015d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	4619      	mov	r1, r3
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_GPIO_Init+0xcc>)
 80015e4:	f000 fb2c 	bl	8001c40 <HAL_GPIO_Init>

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00

080015fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	timerRun();
 8001604:	f000 f88e 	bl	8001724 <timerRun>
	getKeyInput();
 8001608:	f7fe ff80 	bl	800050c <getKeyInput>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	e7fe      	b.n	800161c <Error_Handler+0x8>
	...

08001620 <setTimer>:
int timer2_flag = 0 ;
int timer3_flag = 0;
int timer4_flag = 0;
int timer5_flag = 0;
int TICK = 10;
void setTimer(int duration){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <setTimer+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001632:	4a06      	ldr	r2, [pc, #24]	; (800164c <setTimer+0x2c>)
 8001634:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <setTimer+0x30>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000058 	.word	0x20000058
 800164c:	20000094 	.word	0x20000094
 8001650:	200000a8 	.word	0x200000a8

08001654 <setTimer2>:
void setTimer2(int duration){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <setTimer2+0x28>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	fb92 f3f3 	sdiv	r3, r2, r3
 8001666:	4a06      	ldr	r2, [pc, #24]	; (8001680 <setTimer2+0x2c>)
 8001668:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <setTimer2+0x30>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000058 	.word	0x20000058
 8001680:	20000098 	.word	0x20000098
 8001684:	200000ac 	.word	0x200000ac

08001688 <setTimer3>:
void setTimer3(int duration){
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <setTimer3+0x28>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	fb92 f3f3 	sdiv	r3, r2, r3
 800169a:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <setTimer3+0x2c>)
 800169c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <setTimer3+0x30>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000058 	.word	0x20000058
 80016b4:	2000009c 	.word	0x2000009c
 80016b8:	200000b0 	.word	0x200000b0

080016bc <setTimer4>:
void setTimer4(int duration){
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 80016c4:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <setTimer4+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ce:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <setTimer4+0x2c>)
 80016d0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <setTimer4+0x30>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000058 	.word	0x20000058
 80016e8:	200000a0 	.word	0x200000a0
 80016ec:	200000b4 	.word	0x200000b4

080016f0 <setTimer5>:
void setTimer5(int duration){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <setTimer5+0x28>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001702:	4a06      	ldr	r2, [pc, #24]	; (800171c <setTimer5+0x2c>)
 8001704:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <setTimer5+0x30>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000058 	.word	0x20000058
 800171c:	200000a4 	.word	0x200000a4
 8001720:	200000b8 	.word	0x200000b8

08001724 <timerRun>:
void timerRun(){
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <timerRun+0xac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	dd0b      	ble.n	8001748 <timerRun+0x24>
		timer1_counter--;
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <timerRun+0xac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3b01      	subs	r3, #1
 8001736:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <timerRun+0xac>)
 8001738:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <timerRun+0xac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dc02      	bgt.n	8001748 <timerRun+0x24>
			timer1_flag = 1;
 8001742:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <timerRun+0xb0>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <timerRun+0xb4>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	dd0b      	ble.n	8001768 <timerRun+0x44>
		timer2_counter--;
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <timerRun+0xb4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	3b01      	subs	r3, #1
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <timerRun+0xb4>)
 8001758:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <timerRun+0xb4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	dc02      	bgt.n	8001768 <timerRun+0x44>
			timer2_flag = 1;
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <timerRun+0xb8>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <timerRun+0xbc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	dd0b      	ble.n	8001788 <timerRun+0x64>
		timer3_counter--;
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <timerRun+0xbc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <timerRun+0xbc>)
 8001778:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <timerRun+0xbc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	dc02      	bgt.n	8001788 <timerRun+0x64>
			timer3_flag = 1;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <timerRun+0xc0>)
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter>0){
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <timerRun+0xc4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	dd0b      	ble.n	80017a8 <timerRun+0x84>
		timer4_counter--;
 8001790:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <timerRun+0xc4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <timerRun+0xc4>)
 8001798:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <timerRun+0xc4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	dc02      	bgt.n	80017a8 <timerRun+0x84>
			timer4_flag = 1;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <timerRun+0xc8>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter>0){
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <timerRun+0xcc>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd0b      	ble.n	80017c8 <timerRun+0xa4>
		timer5_counter--;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <timerRun+0xcc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <timerRun+0xcc>)
 80017b8:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <timerRun+0xcc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dc02      	bgt.n	80017c8 <timerRun+0xa4>
			timer5_flag = 1;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <timerRun+0xd0>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	20000094 	.word	0x20000094
 80017d4:	200000a8 	.word	0x200000a8
 80017d8:	20000098 	.word	0x20000098
 80017dc:	200000ac 	.word	0x200000ac
 80017e0:	2000009c 	.word	0x2000009c
 80017e4:	200000b0 	.word	0x200000b0
 80017e8:	200000a0 	.word	0x200000a0
 80017ec:	200000b4 	.word	0x200000b4
 80017f0:	200000a4 	.word	0x200000a4
 80017f4:	200000b8 	.word	0x200000b8

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <HAL_MspInit+0x5c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_MspInit+0x5c>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_MspInit+0x5c>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_MspInit+0x5c>)
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_MspInit+0x60>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_MspInit+0x60>)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000

0800185c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d113      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	201c      	movs	r0, #28
 800188c:	f000 f9a1 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001890:	201c      	movs	r0, #28
 8001892:	f000 f9ba 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f87f 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f000 ffe7 	bl	80028cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000c4 	.word	0x200000c4

08001908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001916:	490d      	ldr	r1, [pc, #52]	; (800194c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800192c:	4c0a      	ldr	r4, [pc, #40]	; (8001958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193a:	f7ff ffe5 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f001 fb0d 	bl	8002f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001942:	f7ff fd31 	bl	80013a8 <main>
  bx lr
 8001946:	4770      	bx	lr
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001950:	08002ff4 	.word	0x08002ff4
  ldr r2, =_sbss
 8001954:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001958:	20000110 	.word	0x20000110

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_Init+0x28>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x28>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f923 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff ff3c 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f93b 	bl	8001c26 <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f903 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000005c 	.word	0x2000005c
 80019e4:	20000064 	.word	0x20000064
 80019e8:	20000060 	.word	0x20000060

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_IncTick+0x20>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000064 	.word	0x20000064
 8001a0c:	2000010c 	.word	0x2000010c

08001a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	2000010c 	.word	0x2000010c

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <__NVIC_EnableIRQ+0x34>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff90 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff2d 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff42 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff90 	bl	8001b14 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5f 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff35 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e148      	b.n	8001ee6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c54:	2201      	movs	r2, #1
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8137 	bne.w	8001ee0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4aa3      	ldr	r2, [pc, #652]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d05e      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c7c:	4aa1      	ldr	r2, [pc, #644]	; (8001f04 <HAL_GPIO_Init+0x2c4>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d875      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c82:	4aa1      	ldr	r2, [pc, #644]	; (8001f08 <HAL_GPIO_Init+0x2c8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d058      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c88:	4a9f      	ldr	r2, [pc, #636]	; (8001f08 <HAL_GPIO_Init+0x2c8>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d86f      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c8e:	4a9f      	ldr	r2, [pc, #636]	; (8001f0c <HAL_GPIO_Init+0x2cc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d052      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c94:	4a9d      	ldr	r2, [pc, #628]	; (8001f0c <HAL_GPIO_Init+0x2cc>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d869      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c9a:	4a9d      	ldr	r2, [pc, #628]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04c      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001ca0:	4a9b      	ldr	r2, [pc, #620]	; (8001f10 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d863      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001ca6:	4a9b      	ldr	r2, [pc, #620]	; (8001f14 <HAL_GPIO_Init+0x2d4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d046      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001cac:	4a99      	ldr	r2, [pc, #612]	; (8001f14 <HAL_GPIO_Init+0x2d4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d85d      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cb2:	2b12      	cmp	r3, #18
 8001cb4:	d82a      	bhi.n	8001d0c <HAL_GPIO_Init+0xcc>
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d859      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_GPIO_Init+0x80>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d15 	.word	0x08001d15
 8001cc8:	08001d27 	.word	0x08001d27
 8001ccc:	08001d69 	.word	0x08001d69
 8001cd0:	08001d6f 	.word	0x08001d6f
 8001cd4:	08001d6f 	.word	0x08001d6f
 8001cd8:	08001d6f 	.word	0x08001d6f
 8001cdc:	08001d6f 	.word	0x08001d6f
 8001ce0:	08001d6f 	.word	0x08001d6f
 8001ce4:	08001d6f 	.word	0x08001d6f
 8001ce8:	08001d6f 	.word	0x08001d6f
 8001cec:	08001d6f 	.word	0x08001d6f
 8001cf0:	08001d6f 	.word	0x08001d6f
 8001cf4:	08001d6f 	.word	0x08001d6f
 8001cf8:	08001d6f 	.word	0x08001d6f
 8001cfc:	08001d6f 	.word	0x08001d6f
 8001d00:	08001d6f 	.word	0x08001d6f
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d31 	.word	0x08001d31
 8001d0c:	4a82      	ldr	r2, [pc, #520]	; (8001f18 <HAL_GPIO_Init+0x2d8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d12:	e02c      	b.n	8001d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e029      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e024      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e01f      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	330c      	adds	r3, #12
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e01a      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d42:	2304      	movs	r3, #4
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e013      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d50:	2308      	movs	r3, #8
 8001d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	611a      	str	r2, [r3, #16]
          break;
 8001d5a:	e009      	b.n	8001d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	615a      	str	r2, [r3, #20]
          break;
 8001d66:	e003      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          break;
 8001d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2bff      	cmp	r3, #255	; 0xff
 8001d74:	d801      	bhi.n	8001d7a <HAL_GPIO_Init+0x13a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_Init+0x13e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d802      	bhi.n	8001d8c <HAL_GPIO_Init+0x14c>
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x152>
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3b08      	subs	r3, #8
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	210f      	movs	r1, #15
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8090 	beq.w	8001ee0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc0:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_GPIO_Init+0x2dc>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a55      	ldr	r2, [pc, #340]	; (8001f1c <HAL_GPIO_Init+0x2dc>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b53      	ldr	r3, [pc, #332]	; (8001f1c <HAL_GPIO_Init+0x2dc>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd8:	4a51      	ldr	r2, [pc, #324]	; (8001f20 <HAL_GPIO_Init+0x2e0>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a49      	ldr	r2, [pc, #292]	; (8001f24 <HAL_GPIO_Init+0x2e4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00d      	beq.n	8001e20 <HAL_GPIO_Init+0x1e0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d007      	beq.n	8001e1c <HAL_GPIO_Init+0x1dc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a47      	ldr	r2, [pc, #284]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_GPIO_Init+0x1d8>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e004      	b.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e20:	2300      	movs	r3, #0
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e32:	493b      	ldr	r1, [pc, #236]	; (8001f20 <HAL_GPIO_Init+0x2e0>)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4933      	ldr	r1, [pc, #204]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	492d      	ldr	r1, [pc, #180]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	4929      	ldr	r1, [pc, #164]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e9c:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4923      	ldr	r1, [pc, #140]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	491f      	ldr	r1, [pc, #124]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4919      	ldr	r1, [pc, #100]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60cb      	str	r3, [r1, #12]
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	4915      	ldr	r1, [pc, #84]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f47f aeaf 	bne.w	8001c54 <HAL_GPIO_Init+0x14>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	bf00      	nop
 8001efa:	372c      	adds	r7, #44	; 0x2c
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	10320000 	.word	0x10320000
 8001f08:	10310000 	.word	0x10310000
 8001f0c:	10220000 	.word	0x10220000
 8001f10:	10210000 	.word	0x10210000
 8001f14:	10120000 	.word	0x10120000
 8001f18:	10110000 	.word	0x10110000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40010800 	.word	0x40010800
 8001f28:	40010c00 	.word	0x40010c00
 8001f2c:	40011000 	.word	0x40011000
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f72:	787b      	ldrb	r3, [r7, #1]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f78:	887a      	ldrh	r2, [r7, #2]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f7e:	e003      	b.n	8001f88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f80:	887b      	ldrh	r3, [r7, #2]
 8001f82:	041a      	lsls	r2, r3, #16
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	041a      	lsls	r2, r3, #16
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43d9      	mvns	r1, r3
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	400b      	ands	r3, r1
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	611a      	str	r2, [r3, #16]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e26c      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8087 	beq.w	80020f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe4:	4b92      	ldr	r3, [pc, #584]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff0:	4b8f      	ldr	r3, [pc, #572]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d112      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b89      	ldr	r3, [pc, #548]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x12c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d168      	bne.n	80020f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e246      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x76>
 800202c:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7f      	ldr	r2, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e02e      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b7b      	ldr	r3, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7a      	ldr	r2, [pc, #488]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b78      	ldr	r3, [pc, #480]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a77      	ldr	r2, [pc, #476]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xbc>
 8002066:	4b72      	ldr	r3, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a71      	ldr	r2, [pc, #452]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6e      	ldr	r2, [pc, #440]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xd4>
 8002080:	4b6b      	ldr	r3, [pc, #428]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6a      	ldr	r2, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b68      	ldr	r3, [pc, #416]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a67      	ldr	r2, [pc, #412]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fcb6 	bl	8001a10 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff fcb2 	bl	8001a10 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1fa      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe4>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fca2 	bl	8001a10 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fc9e 	bl	8001a10 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1e6      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b53      	ldr	r3, [pc, #332]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x10c>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fe:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210a:	4b49      	ldr	r3, [pc, #292]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
 8002116:	4b46      	ldr	r3, [pc, #280]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1ba      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4939      	ldr	r1, [pc, #228]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff fc57 	bl	8001a10 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7ff fc53 	bl	8001a10 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e19b      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b2d      	ldr	r3, [pc, #180]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b2a      	ldr	r3, [pc, #168]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b26      	ldr	r3, [pc, #152]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fc36 	bl	8001a10 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7ff fc32 	bl	8001a10 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e17a      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d03a      	beq.n	8002248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d019      	beq.n	800220e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e0:	f7ff fc16 	bl	8001a10 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff fc12 	bl	8001a10 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e15a      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002206:	2001      	movs	r0, #1
 8002208:	f000 faa6 	bl	8002758 <RCC_Delay>
 800220c:	e01c      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7ff fbfc 	bl	8001a10 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221a:	e00f      	b.n	800223c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800221c:	f7ff fbf8 	bl	8001a10 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d908      	bls.n	800223c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e140      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	42420000 	.word	0x42420000
 8002238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800223c:	4b9e      	ldr	r3, [pc, #632]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1e9      	bne.n	800221c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a6 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b97      	ldr	r3, [pc, #604]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b94      	ldr	r3, [pc, #592]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4a93      	ldr	r2, [pc, #588]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	61d3      	str	r3, [r2, #28]
 8002272:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228e:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7ff fbb9 	bl	8001a10 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7ff fbb5 	bl	8001a10 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e0fd      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x4f8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x312>
 80022c8:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6213      	str	r3, [r2, #32]
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x334>
 80022de:	4b76      	ldr	r3, [pc, #472]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a75      	ldr	r2, [pc, #468]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b73      	ldr	r3, [pc, #460]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a72      	ldr	r2, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x356>
 8002300:	4b6d      	ldr	r3, [pc, #436]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	4a6c      	ldr	r2, [pc, #432]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6213      	str	r3, [r2, #32]
 800230c:	4b6a      	ldr	r3, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x36e>
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	4a66      	ldr	r2, [pc, #408]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6213      	str	r3, [r2, #32]
 8002326:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a63      	ldr	r2, [pc, #396]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff fb69 	bl	8001a10 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7ff fb65 	bl	8001a10 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0ab      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x37e>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff fb53 	bl	8001a10 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7ff fb4f 	bl	8001a10 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	; 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e095      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a47      	ldr	r2, [pc, #284]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8081 	beq.w	80024ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d061      	beq.n	800247c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d146      	bne.n	800244e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_OscConfig+0x4fc>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fb23 	bl	8001a10 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff fb1f 	bl	8001a10 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e067      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	4b35      	ldr	r3, [pc, #212]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	492d      	ldr	r1, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a19      	ldr	r1, [r3, #32]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	430b      	orrs	r3, r1
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x4fc>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7ff faf3 	bl	8001a10 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7ff faef 	bl	8001a10 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e037      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x46a>
 800244c:	e02f      	b.n	80024ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <HAL_RCC_OscConfig+0x4fc>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fadc 	bl	8001a10 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff fad8 	bl	8001a10 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e020      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x498>
 800247a:	e018      	b.n	80024ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e013      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	429a      	cmp	r2, r3
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40007000 	.word	0x40007000
 80024c0:	42420060 	.word	0x42420060

080024c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0d0      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4965      	ldr	r1, [pc, #404]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b8      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800252a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002538:	4b53      	ldr	r3, [pc, #332]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002542:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b50      	ldr	r3, [pc, #320]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	494d      	ldr	r1, [pc, #308]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d040      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d115      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e07f      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b41      	ldr	r3, [pc, #260]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e073      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06b      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b39      	ldr	r3, [pc, #228]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4936      	ldr	r1, [pc, #216]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7ff fa2c 	bl	8001a10 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7ff fa28 	bl	8001a10 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e053      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d210      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4922      	ldr	r1, [pc, #136]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e032      	b.n	800267a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	4916      	ldr	r1, [pc, #88]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800263e:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	490e      	ldr	r1, [pc, #56]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002652:	f000 f821 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	490a      	ldr	r1, [pc, #40]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	fa22 f303 	lsr.w	r3, r2, r3
 800266a:	4a09      	ldr	r2, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1cc>)
 800266c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800266e:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1d0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff f98a 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40022000 	.word	0x40022000
 8002688:	40021000 	.word	0x40021000
 800268c:	08002fdc 	.word	0x08002fdc
 8002690:	2000005c 	.word	0x2000005c
 8002694:	20000060 	.word	0x20000060

08002698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b490      	push	{r4, r7}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026a0:	1d3c      	adds	r4, r7, #4
 80026a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026a8:	f240 2301 	movw	r3, #513	; 0x201
 80026ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	2300      	movs	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026c2:	4b22      	ldr	r3, [pc, #136]	; (800274c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 030c 	and.w	r3, r3, #12
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d002      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x40>
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x46>
 80026d6:	e02d      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026da:	623b      	str	r3, [r7, #32]
      break;
 80026dc:	e02d      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	0c9b      	lsrs	r3, r3, #18
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ea:	4413      	add	r3, r2
 80026ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d013      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026fc:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	0c5b      	lsrs	r3, r3, #17
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800270a:	4413      	add	r3, r2
 800270c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002710:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	4a0e      	ldr	r2, [pc, #56]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002716:	fb02 f203 	mul.w	r2, r2, r3
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e004      	b.n	800272e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	623b      	str	r3, [r7, #32]
      break;
 8002732:	e002      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002736:	623b      	str	r3, [r7, #32]
      break;
 8002738:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273a:	6a3b      	ldr	r3, [r7, #32]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc90      	pop	{r4, r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	08002fcc 	.word	0x08002fcc
 800274c:	40021000 	.word	0x40021000
 8002750:	007a1200 	.word	0x007a1200
 8002754:	003d0900 	.word	0x003d0900

08002758 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <RCC_Delay+0x34>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <RCC_Delay+0x38>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0a5b      	lsrs	r3, r3, #9
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002774:	bf00      	nop
  }
  while (Delay --);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e5a      	subs	r2, r3, #1
 800277a:	60fa      	str	r2, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f9      	bne.n	8002774 <RCC_Delay+0x1c>
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	2000005c 	.word	0x2000005c
 8002790:	10624dd3 	.word	0x10624dd3

08002794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e041      	b.n	800282a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff f84e 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f000 fa6a 	bl	8002cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e035      	b.n	80028b8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_TIM_Base_Start_IT+0x90>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x4e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002876:	d004      	beq.n	8002882 <HAL_TIM_Base_Start_IT+0x4e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <HAL_TIM_Base_Start_IT+0x94>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d111      	bne.n	80028a6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b06      	cmp	r3, #6
 8002892:	d010      	beq.n	80028b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a4:	e007      	b.n	80028b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40000400 	.word	0x40000400

080028cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d122      	bne.n	8002928 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d11b      	bne.n	8002928 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0202 	mvn.w	r2, #2
 80028f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f9b1 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002914:	e005      	b.n	8002922 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f9a4 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f9b3 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b04      	cmp	r3, #4
 8002934:	d122      	bne.n	800297c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	d11b      	bne.n	800297c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0204 	mvn.w	r2, #4
 800294c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2202      	movs	r2, #2
 8002952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f987 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002968:	e005      	b.n	8002976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f97a 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 f989 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d122      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b08      	cmp	r3, #8
 8002996:	d11b      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0208 	mvn.w	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f95d 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f950 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f95f 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b10      	cmp	r3, #16
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2208      	movs	r2, #8
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f933 	bl	8002c76 <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f926 	bl	8002c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f935 	bl	8002c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10e      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0201 	mvn.w	r2, #1
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe fdd6 	bl	80015fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	2b80      	cmp	r3, #128	; 0x80
 8002a5c:	d10e      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	2b80      	cmp	r3, #128	; 0x80
 8002a6a:	d107      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fa67 	bl	8002f4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b40      	cmp	r3, #64	; 0x40
 8002a88:	d10e      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	2b40      	cmp	r3, #64	; 0x40
 8002a96:	d107      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8f9 	bl	8002c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0220 	mvn.w	r2, #32
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa32 	bl	8002f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_ConfigClockSource+0x18>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0b3      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x180>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2c:	d03e      	beq.n	8002bac <HAL_TIM_ConfigClockSource+0xd0>
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b32:	f200 8087 	bhi.w	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b3a:	f000 8085 	beq.w	8002c48 <HAL_TIM_ConfigClockSource+0x16c>
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b42:	d87f      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b44:	2b70      	cmp	r3, #112	; 0x70
 8002b46:	d01a      	beq.n	8002b7e <HAL_TIM_ConfigClockSource+0xa2>
 8002b48:	2b70      	cmp	r3, #112	; 0x70
 8002b4a:	d87b      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b4c:	2b60      	cmp	r3, #96	; 0x60
 8002b4e:	d050      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x116>
 8002b50:	2b60      	cmp	r3, #96	; 0x60
 8002b52:	d877      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b54:	2b50      	cmp	r3, #80	; 0x50
 8002b56:	d03c      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0xf6>
 8002b58:	2b50      	cmp	r3, #80	; 0x50
 8002b5a:	d873      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d058      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x136>
 8002b60:	2b40      	cmp	r3, #64	; 0x40
 8002b62:	d86f      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b64:	2b30      	cmp	r3, #48	; 0x30
 8002b66:	d064      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x156>
 8002b68:	2b30      	cmp	r3, #48	; 0x30
 8002b6a:	d86b      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d060      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x156>
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d867      	bhi.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d05c      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x156>
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d05a      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b7c:	e062      	b.n	8002c44 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f000 f95c 	bl	8002e4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ba0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	609a      	str	r2, [r3, #8]
      break;
 8002baa:	e04e      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6899      	ldr	r1, [r3, #8]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f000 f945 	bl	8002e4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bce:	609a      	str	r2, [r3, #8]
      break;
 8002bd0:	e03b      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f8bc 	bl	8002d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2150      	movs	r1, #80	; 0x50
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f913 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e02b      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f8da 	bl	8002db8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2160      	movs	r1, #96	; 0x60
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f903 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e01b      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f89c 	bl	8002d5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2140      	movs	r1, #64	; 0x40
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f8f3 	bl	8002e16 <TIM_ITRx_SetConfig>
      break;
 8002c30:	e00b      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f000 f8ea 	bl	8002e16 <TIM_ITRx_SetConfig>
        break;
 8002c42:	e002      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c44:	bf00      	nop
 8002c46:	e000      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a25      	ldr	r2, [pc, #148]	; (8002d54 <TIM_Base_SetConfig+0xa8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d007      	beq.n	8002cd4 <TIM_Base_SetConfig+0x28>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0x28>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <TIM_Base_SetConfig+0xac>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <TIM_Base_SetConfig+0xa8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x52>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x52>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <TIM_Base_SetConfig+0xac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <TIM_Base_SetConfig+0xa8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40000400 	.word	0x40000400

08002d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f023 030a 	bic.w	r3, r3, #10
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	bf00      	nop
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f023 0210 	bic.w	r2, r3, #16
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	031b      	lsls	r3, r3, #12
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002df4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	621a      	str	r2, [r3, #32]
}
 8002e0c:	bf00      	nop
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f043 0307 	orr.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b087      	sub	sp, #28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	021a      	lsls	r2, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e041      	b.n	8002f24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eec:	d004      	beq.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10c      	bne.n	8002f12 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40000400 	.word	0x40000400

08002f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <__libc_init_array>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	2600      	movs	r6, #0
 8002f60:	4d0c      	ldr	r5, [pc, #48]	; (8002f94 <__libc_init_array+0x38>)
 8002f62:	4c0d      	ldr	r4, [pc, #52]	; (8002f98 <__libc_init_array+0x3c>)
 8002f64:	1b64      	subs	r4, r4, r5
 8002f66:	10a4      	asrs	r4, r4, #2
 8002f68:	42a6      	cmp	r6, r4
 8002f6a:	d109      	bne.n	8002f80 <__libc_init_array+0x24>
 8002f6c:	f000 f822 	bl	8002fb4 <_init>
 8002f70:	2600      	movs	r6, #0
 8002f72:	4d0a      	ldr	r5, [pc, #40]	; (8002f9c <__libc_init_array+0x40>)
 8002f74:	4c0a      	ldr	r4, [pc, #40]	; (8002fa0 <__libc_init_array+0x44>)
 8002f76:	1b64      	subs	r4, r4, r5
 8002f78:	10a4      	asrs	r4, r4, #2
 8002f7a:	42a6      	cmp	r6, r4
 8002f7c:	d105      	bne.n	8002f8a <__libc_init_array+0x2e>
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
 8002f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f84:	4798      	blx	r3
 8002f86:	3601      	adds	r6, #1
 8002f88:	e7ee      	b.n	8002f68 <__libc_init_array+0xc>
 8002f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8e:	4798      	blx	r3
 8002f90:	3601      	adds	r6, #1
 8002f92:	e7f2      	b.n	8002f7a <__libc_init_array+0x1e>
 8002f94:	08002fec 	.word	0x08002fec
 8002f98:	08002fec 	.word	0x08002fec
 8002f9c:	08002fec 	.word	0x08002fec
 8002fa0:	08002ff0 	.word	0x08002ff0

08002fa4 <memset>:
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4402      	add	r2, r0
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d100      	bne.n	8002fae <memset+0xa>
 8002fac:	4770      	bx	lr
 8002fae:	f803 1b01 	strb.w	r1, [r3], #1
 8002fb2:	e7f9      	b.n	8002fa8 <memset+0x4>

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	bf00      	nop
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	bf00      	nop
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
